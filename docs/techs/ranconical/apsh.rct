
; -------------- Parameters --------------

RR [mirrorOption]
?mirror option?

RR [searchRange]
?search range?

RR [stepSize]
?step size?

RR [firstRing]
?inner radius?

RR [lastRing]
?outer radius?

; ---------------- Inputs ----------------

FR
?references?[centered_refs]
FR
?input images to align?[unaligned_images]
FR
?list of particles?[selection_list]

; --------------- Outputs ---------------

FR
?alignment doc file?[alignment_doc]
FR
?aligned image stack?[new_aligned_stack]
FR
?master_aligned image stack?[master_aligned]
FR
?view selection docs?[view_select]
FR
?sorted view selection docs?[sorted_select]
FR
?particles-per-view doc?[how_many]
FR
?view average stack?[viewavg_stack]
FR
?view variance stack?[viewvar_stack]

; ----------- END BATCH HEADER -----------

fr l
[new_aligned_images][new_aligned_stack]@*****   ; new aligned-image template (modify if >=100,000 particles)
fr l
[viewavg_slice][viewavg_stack]@***              ; multi-reference average image-template (modify if >=1000 references)
fr l
[viewvar_slice][viewvar_stack]@***              ; view-variance image-template (modify if >=1000 references)
FR L
[temp_uncentered_avg]_11
FR L
[temp_uncentered_var]_12
FR L
[temp_centered_avg]_13

[one] = 1

; get number of references
FI H [refCounter]
[centered_refs]
MAXIM

; run multireference alignment
if([mirrorOption].eq.1) then
    vm
    echo "Searching for mirrored positions" ; date
    
    ap sh
    [centered_refs]
    (1-[refCounter])
    [searchRange],[stepSize]
    [firstRing],[lastRing]
    *                ; no reference angles doc
    [unaligned_images]
    [selection_list]
    *                ; no previous alignment doc
    (0,0)            ; no restiction angle, angle-change threshold
    Y,N              ; check mirrored positions, don't pre-align input
    [alignment_doc]  ; OUTPUT
else
    vm
    echo "Not searching for mirrored positions"
    
    ap sh
    [centered_refs]
    (1-[refCounter])
    [searchRange],[stepSize]
    [firstRing],[lastRing]
    *                ; no reference angles doc
    [unaligned_images]
    [selection_list]
    *                ; no previous alignment doc
    (0,0)            ; no restiction angle, angle-change threshold
    N,N              ; check mirrored positions, don't pre-align input
    [alignment_doc]  ; OUTPUT
endif


; APPLY ALIGNMENTS

vm
echo ; echo "Applying alignments" ; date

de
[new_aligned_stack]@

; get #particles
ud n [numTotParts]
[selection_list]

; loop through particles
do lb3 [partKey] = 1,[numTotParts]
    ; get particle#
    ud ic [partKey], [part-num]
    [selection_list]
    
    ; read parameters
    ud ic [part-num], x81,x82,x83,x84,x85,[inplane-angle],[xshift],[yshift],x89,x90,x91,x92,x93,x94,[mirror-flag]
    [alignment_doc]
    ; (If MIRROR_FLAG is negative, mirroring is required.)

    ; check for mirroring
    if([mirror-flag].lt.0) then
        rt sq
        [unaligned_images][part-num]
        _31  ; OUTPUT
        [inplane-angle]
        [xshift],[yshift]

        mr
        _31
        [new_aligned_images][part-num]
        Y  ; mirror-axis
    else
        rt sq
        [unaligned_images][part-num]
        [new_aligned_images][part-num]
        [inplane-angle]
        [xshift],[yshift]
    endif
lb3
; end particle-loop

; close docs
ud ice
[selection_list]
ud ice
[alignment_doc]

; copy aligned images to central location (will be overwritten by subsequent alignments)
cp
[new_aligned_stack]@
[master_aligned]@


; clean up
de
[how_many]
de a
[view_select][one]

; separate by view
vo mq
(0)            ; CC threshold
[alignment_doc]
[refCounter]
[view_select]  ; OUTPUT
[how_many]     ; OUTPUT


; GENERATE AVERAGES AND SORT BY CCROT

vm
echo "Generating averages"; date

de
[viewavg_stack]@
DE
[viewvar_stack]@

; get image dimension
FI H [imgDim]
[unaligned_images][one]
NX

; loop through views
do lb2 [viewNum] = 1,[refCounter]
    ; sort by CCROT
    doc sort
    [view_select][viewNum]
    [sorted_select][viewNum]   ; OUTPUT: in VIEW_DIR, which contains VIEW-NUM
    (2)                        ; column#: CCROT
    Y                          ; renumber?

    ; label docs
    SD /      PART_NUM      CC_ROT     MIRRORFLAG
    [view_select][viewNum]
    SD /      PART_NUM      CC_ROT     MIRRORFLAG
    [sorted_select][viewNum]
    sd e
    [view_select][viewNum]
    sd e
    [sorted_select][viewNum]


    ; GENERATE AVERAGES

    ; get #particles
    ud n [numViewParts]
    [sorted_select][viewNum]

    ; if #particles=0 then create blank images
    if([numViewParts].eq.0) then
        bl
        [viewavg_slice][viewNum]
        [imgDim],[imgDim]
        N    ; background from image?
        (0)  ; background 

        bl
        [viewvar_slice][viewNum]
        [imgDim],[imgDim]
        N    ; background from image?
        (0)  ; background 
    endif

    ; if #particles=1 then...
    if([numViewParts].eq.1) then
        ; get parameters
        ud 1,[part-num]  ; WAS [view-slice],x92,[df-slice],x94,[flip-flop],[df-group]
        [sorted_select][viewNum]
        ud e

        cp
        [new_aligned_images][part-num]
        [viewavg_slice][viewNum]

        bl
        [viewvar_slice][viewNum]
        [imgDim],[imgDim]
        N    ; background from image?
        (0)  ; background 
    endif

    ; if #particles>1 then...
    if([numViewParts].gt.1) then
        ; generate average
        AS R
        [new_aligned_images]
        [sorted_select][viewNum]
        A                      ; _A_ll images
        [temp_uncentered_avg]  ; OUTPUT: class-average
        [temp_uncentered_var]  ; OUTPUT: class-variance (not saved)

        if([cgOption].eq.1) then
            ; center reference
            cg ph x21,x22,[xshift],[yshift]
            [temp_uncentered_avg]  ; INPUT: unshifted class-average

            ; shift average & variance
            sh
            [temp_uncentered_avg]  ; INPUT: unshifted class-average
            [viewavg_slice][viewNum]
            -[xshift],-[yshift]
            sh
            [temp_uncentered_var]  ; INPUT: unshifted class-variance
            [viewvar_slice][viewNum]
            -[xshift],-[yshift]
        elseif([cgOption].eq.2) then
            ; center by rotating by 180 degrees and self-alignment
            @center1([xshift],[yshift])
            [temp_uncentered_avg]  ; INPUT: uncentered class-average
            [temp_centered_avg]    ; OUTPUT
            
            CP
            [temp_centered_avg]
            [viewavg_slice][viewNum]
            SH
            [temp_uncentered_var]  ; INPUT: unshifted class-variance
            [viewvar_slice][viewNum]
            -[xshift],-[yshift]
        else
            CP
            [temp_uncentered_avg]  ; INPUT: uncentered class-average
            [viewavg_slice][viewNum]
            CP
            [temp_uncentered_var]  ; INPUT: uncentered class-variance
            [viewvar_slice][viewNum]
        endif
    endif
lb2
; end view-loop

RE
