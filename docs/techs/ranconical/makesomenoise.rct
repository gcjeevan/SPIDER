; Adapted from NOISE.SPI  Extract a series of particle-sized windows from a
; micrograph, compare their standard deviations to obtain a noise image.
;
; An initial set of windows is sorted by their standard deviations.
; An area in the center of the micrograph is examined (the large window).
; From the 30 windows with lowest std devs, a second measurement is made
; of the local std dev of each quadrant of each window, which are then
; sorted by this second measure. 
; This set of images should be viewed in Web to select the final noise file.
; 
; Selects one and copies it to the output noise file
;
; Inputs:
;   input image (in spider format)
;   [largeWindowSize] : size of the large window (area to be examined)
;   [deleteYN]        : delete flag. If [deleteYN] = 1, temporaray doc files are deleted.
;
; Outputs:
;   noise image
;   series of noise images 

; ----------- Parameters ------------

[revContrastYN]    = 0             ; reverse contrast? (1==Yes)
[micnum]           = -1            ; micrograph number to find noise image (-1 == last)
[userNumNoiseImgs] = 30            ; number of noise images to window
;                                 ; (use the top (30) with smallest std_dev)
[largeWindowSize]  = 1000          ; diameter of the large window from which noise will be windowed
[deleteYN]         = 1             ; 1 = delete temp doc files, 0 = don't delete

; ----------- Input files -----------
FR G
[params]params                      ; parameter file 
FR G
[mic_pair_doc]docmicpairs           ; micrograph-pairing list
FR G
[mic]Micrographs/mic{***[micnum]}   ; micrograph filename template

; ---------- Output files ----------
FR G
[noise]noise                        ; selected output noise window
FR G
[ndir]tmpnoise                      ; directory for noise images
;;FR G
;;[noisewin]noi@                      ; stack of output noise windows, in NDIR
FR G
[output][ndir]/noi@                 ; use this path for output files
FR G
[docnoise][ndir]/docnoise           ; (optional) doc file of window statistics
FR G
[docsort][ndir]/docsort             ; (optional) sorted doc file
FR G
[docvar][ndir]/docvar               ; (optional) doc file of local variance
FR G
[docvarsort][ndir]/docvarsort       ; (optional) doc file of sorted local variance

; -------- END BATCH HEADER --------

; Temporary files
[temp_mic]      = '_4'
[temp_win]      = '_11'
[temp_subimage] = '_12'

SYS
mkdir -p [ndir] 

; delete the doc files if they already exist
;;DE
;;[noisewin]
DE
[docnoise]
DE
[docsort]
DE
[docvar]
DE
[docvarsort]
DE
[output]

; get the window size
UD 17, [smallWindowSize]
[params]
UD E

; get last micrograph# if default is chosen
if([micnum].lt.0) then
    UD N [numMics]
    [mic_pair_doc]
    
    UD [numMics], [micnum]
    [mic_pair_doc]
    UD E
endif


[percentOverlap] = 50 ; percent overlap of the small windows

; ----------------------------------------------------------
; The large window is at the center of the input image.

; invert contrast, if necessary
IF ( [revContrastYN] .GE. 0.5 ) THEN
    NEG
    [mic]
    [temp_mic]
ELSE
    CP
    [mic]
    [temp_mic]
ENDIF

; get file size
FI [micXDim],[micYDim]
[temp_mic]
12,2

IF ( [largeWindowSize] .GT. [micXDim] ) [largeWindowSize] = [micXDim]
IF ( [largeWindowSize] .GT. [micYDim] ) [largeWindowSize] = [micYDim]

[largeTopLeftX] = ([micXDim] - [largeWindowSize]) / 2
[largeTopLeftY] = ([micYDim] - [largeWindowSize]) / 2
IF ( [largeTopLeftX] .LT. 1 ) [largeTopLeftX] = 1
IF ( [largeTopLeftY] .LT. 1 ) [largeTopLeftY] = 1

; ----------------------------------------------------------

x51       = 100 / [percentOverlap]
[numWin]  = ([largeWindowSize]/[smallWindowSize]) * x51 - 1  ; number of windows in X and Y
[winIncr] = int([smallWindowSize] / x51)                     ; increment for start window coords

[counter] = 1 ; a counter for incrementing keys

; if the doc files already exist, delete them
IQ FI [exists]
[docnoise]
IF ( [exists] .EQ. 1 ) THEN
   DE
   [docnoise]
ENDIF

IQ FI [exists]
[docsort]
IF ( [exists] .EQ. 1 ) THEN
   DE
   [docsort]
ENDIF

IQ FI [exists]
[docvar]
IF ( [exists] .EQ. 1 ) THEN
   DE
   [docvar]
ENDIF

IQ FI [exists]
[docvarsort]
IF ( [exists] .EQ. 1 ) THEN
   DE
   [docvarsort]
ENDIF

; First Loop ------------------------------------------------

DO LB1 [ykey] = 1,[numWin]    ; y loop
    DO LB2 [xkey] = 1,[numWin]    ; x loop
        [noiseTopLeftX] = [largeTopLeftX] + [winIncr] * ([xkey] - 1)  ; x UL corner of window
        [noiseTopLeftY] = [largeTopLeftY] + [winIncr] * ([ykey] - 1)  ; y UL corner of window

        WI
        [temp_mic]
        [temp_win]
        [smallWindowSize],[smallWindowSize]
        [noiseTopLeftX],[noiseTopLeftY]    ; top left coords

        ; get st.dev.
        FS x71,x72,x73,[stdev]
        [temp_win]

        SD [counter], [stdev], [noiseTopLeftX],[noiseTopLeftY]   ; save key,std_dev,x,y
        [docnoise]

        [counter] = [counter] + 1
    LB2
LB1

; -----------------------------------------------

; sort docfile according to std_dev (column 1)
DOC SORT
[docnoise]
[docsort]
1
Y

UD N [measNumNoiseImgs]     ; get the number of entries
[docsort]


IF ([measNumNoiseImgs].LT.[userNumNoiseImgs]) [userNumNoiseImgs] = [measNumNoiseImgs]

; ---------------------------------------------------------
; Local variance: ; get the images, measure average of each
; quadrant. Calculate mean,var of the 4 averages

; Loop through noise images
DO LB3 [noiseKey3] = 1,[userNumNoiseImgs]
    UD [noiseKey3],[stdev],[noiseTopLeftX],[noiseTopLeftY]   ; get (key), std_dev, x coord, y coord
    [docsort]

    WI 
    [temp_mic]
    [temp_win]
    [smallWindowSize],[smallWindowSize]
    [noiseTopLeftX],[noiseTopLeftY]    ; top left coords

    ; get data from the four subimages
;;    x93 = 1
;;    x94 = 1
    [subimageSize] = INT([smallWindowSize]/2)

    ; ------------------------------ 1

    WI
    [temp_win]
    [temp_subimage]
    [subimageSize],[subimageSize]
    1,1

    FS x71,x72,[avg],x74
    [temp_subimage]

    [avg1] = [avg] ; the average value

    ; ------------------------------ 2
    WI
    [temp_win]
    [temp_subimage]
    [subimageSize],[subimageSize]
    [subimageSize]-1,1

    FS x71,x72,[avg],x74
    [temp_subimage]

    [avg2] = [avg] ; the average value

    ; ------------------------------ 3
    WI
    [temp_win]
    [temp_subimage]
    [subimageSize],[subimageSize]
    1, [subimageSize]-1

    FS x71,x72,[avg],x74
    [temp_subimage]

    [avg3] = [avg] ; the average value

    ; ------------------------------ 4
    WI
    [temp_win]
    [temp_subimage]
    [subimageSize],[subimageSize]
    [subimageSize]-1,[subimageSize]-1

    FS x71,x72,[avg],x74
    [temp_subimage]

    [avg4] = [avg] ; the average value


    [avgAvgs]  = ([avg1] + [avg2] + [avg3] + [avg4]) / 4.0   ; mean
    [variance] = 0   ; sum  (becomes variance of averages)
    [variance] = [variance] + (([avg1] - [avgAvgs])*([avg1] - [avgAvgs]))
    [variance] = [variance] + (([avg2] - [avgAvgs])*([avg2] - [avgAvgs]))
    [variance] = [variance] + (([avg3] - [avgAvgs])*([avg3] - [avgAvgs]))
    [variance] = [variance] + (([avg4] - [avgAvgs])*([avg4] - [avgAvgs]))   

    SD [noiseKey3], [variance],[stdev],[noiseTopLeftX],[noiseTopLeftY]   ; put (key), var, std_dev, x coord, y coord
    [docvar]
LB3
; End noise-loop

; --------------------------------------------------------
; sort docfile according to std_dev (column 1)
DOC SORT
[docvar]
[docvarsort]
1
Y

; get windows sorted by lowest variance

; Loop through noise images
DO LB4 [noiseKey4] = 1,[userNumNoiseImgs]
   UD [noiseKey4],x79, x80,[noiseTopLeftX],[noiseTopLeftY]   ; get (key), var, std_dev, x coord, y coord
   [docvarsort]

   WI 
   [temp_mic]
   [output]{***[noiseKey4]}
   [smallWindowSize],[smallWindowSize]
   [noiseTopLeftX],[noiseTopLeftY]    ; top left coords
LB4
; End noise-loop

IF ( [deleteYN] .EQ. 1 ) THEN
   DE
   [docnoise]
   DE
   [docsort]
   DE
   [docvar]
   UD E
   ;[docvarsort]  UD E takes no argument, but it's closing this file
   DE
   [docvarsort]
ENDIF

; select one at random
[random] = int(RAN(x14) * [userNumNoiseImgs])

CP
[output]{***[random]}
[noise]

SYS
echo selected [output]{***[random]} for the noise file

EN D

; Modified 2018-02-12
;    2018-02-07 (trs) -- added option to invert contrast, modernized a bit
;    2014-03-05 (trs) -- writing images in stacks
;    2014-02-31 (trs) -- reads last untilted micrograph by default
;    2012-08-31 (trs) -- adapted from noise.spi
