; RUNS PROJECTIONS ONTO CONVEX SETS
;
; Adapted from Michael Radermacher's pocscs.rec

; ---------------------- Parameters ----------------------

[classNum]          = 1      ; volume number
[numIter]           = 98     ; number of iterations of POCS
[tiltAngle]         = 49     ; maximum tilt angle
[yprjPhi]           = 180    ; angle phi for y-projections (Euler angles will be (PHI,90,0))
[docfileValuesYN]   = 0      ; override parameters below with (optional) filter docfile? (1==docfile, 0==header values)
[headerType]        = 7      ; filter type (7==Butterworth, 5==Fermi, 3==Gaussian, 1==Tophat)
[headerParam1]      = 30     ; Butterworth filter pass-band (Angstroms)
[headerParam2]      = 20     ; Butterworth filter stop-band (Angstroms)
[progressInterval]  = 10     ; progress message written to screen every Nth iteration

; ------------------------ Inputs ------------------------
FR L
[parameter_doc]params                       ; parameter doc file
FR L
[vol_dir]Volumes                            ; volume I/O directory
FR L
[filter_doc][vol_dir]/docvolfilt            ; (optional) doc file with filter parameters
FR L
[class_vol][vol_dir]/vcla{***[classNum]}    ; unaligned experimental volume template
FR L
[mask][vol_dir]/vcla{***[classNum]}-mask    ; mask

; ----------------------- Outputs -----------------------
FR L
[pocs_dir]Pocs                                          ; output directory
FR L
[y_projections]yprj_{***[classNum]}                     ; projection stack, in POCS_DIR (w/o "@")
FR L
[last_link]yprj-LAST                                    ; softlink to most recent stack of projections (for SPIRE)
FR L
[pocs_stats_doc][pocs_dir]/docpocsstats                 ; volume statistcs for each iteration
FR L
[pocs_vol][vol_dir]/vcla{***[classNum]}-pocs            ; POCS volume
FR L
[filt_pocs_vol][vol_dir]/vcla{***[classNum]}-pocs-filt  ; filtered POCS volume

; ------------------- END BATCH HEADER -------------------

; Temporary files
FR L
[temp_vol_incore]_10
FR L
[temp_vol_ft]_11
FR L
[temp_masked_vol]_12
FR L
[temp_masked_ft]_13
FR L
[temp_filtered_ft]_14
FR L
[temp_filtered_vol]_15

; get pixel-size
UD 5, [pxsz]
[parameter_doc]
UD E

; check if filter docfile exists
IQ FI [filterdocExists]
[filter_doc]

IF ( [filterdocExists] .EQ. 1 ) THEN
    SYS
    echo "[filter_doc].$DATEXT exists"
    
    IF ( [docfileValuesYN] .EQ. 0 ) THEN
        SYS
        echo "Will use filter parameters specified in batch file"
    ELSE
        SYS
        echo "Will use filter parameters specified in [filter_doc].$DATEXT"
    ENDIF
ENDIF

SYS
echo

; (The only condition where we use the docfile parameters is if the docfile exists AND override=1)
IF ( [docfileValuesYN]*[filterdocExists] .NE. 0 ) THEN
    UD FIND [docfileKey], [docfileClassnum],[docfileFiltertype],[docfileParam1],[docfileParam2]
    [filter_doc]
    1,[classNum]   ; column# to search, value to search for
    UD FIND E
    [filter_doc]
    
    ; if parameters found, use those
    IF ( [docfileKey] .EQ. 0 ) THEN
        SYS
        echo "Couldn't find info for class #{***[classNum]} in [filter_doc].$DATEXT -- using values in batchfile header..."
        
        [filterType]   = [headerType]
        [filterParam1] = [headerParam1]
        [filterParam2] = [headerParam2]
    ELSE
        [filterType]   = [docfileFiltertype]
        [filterParam1] = [docfileParam1]
        [filterParam2] = [docfileParam2]
    ENDIF

; use filter parameters in header
ELSE
    [filterType]   = [headerType]
    [filterParam1] = [headerParam1]
    [filterParam2] = [headerParam2]
ENDIF

SYS
echo "Class #{***[classNum]} -- Filter type: {*[filterType]}, Parameter1: {%f6.2%[filterParam1]}, Parameter2: {%f6.2%[filterParam2]}" ; echo

; convert filter radii from Angstroms to px^-1
[filterParam1] = [pxsz]/[filterParam1]
[filterParam2] = [pxsz]/[filterParam2]

SYS
echo "Running [class_vol].$DATEXT through {***[numIter]} iterations of POCS" ; date ; echo

CP
[class_vol]
[temp_vol_incore]

; get volume dimension
FI [ydim]
[temp_vol_incore]
2   ; header position for NROW

;;;[midY] = ([ydim]/2) + 1

SYS
mkdir -p [pocs_dir]

[sliceNum] = 1

DE
[pocs_dir]/[y_projections]@

; project in y
PJ 3
[temp_vol_incore]
[ydim],[ydim]
[pocs_dir]/[y_projections]@{***[sliceNum]}
[yprjPhi],90,0

; Fourier transform
FT
[temp_vol_incore]
[temp_vol_ft]

DE
[pocs_stats_doc]

; loop through iterations
DO LB1 [iter] = 1,[numIter]
    IF ( INT([iter]/[progressInterval]) .EQ. [iter]/[progressInterval] ) THEN
        SYS
        echo "Working on iteration #{***[iter]} out of {***[numIter]}"
    ENDIF
    
    ; multiply by mask
    MU
    [temp_vol_incore]   ; initially input volume, will be overwritten by CV REPL
    [mask]
    [temp_masked_vol]   ; OUTPUT
    *                   ; no more files to multiply

    ; Fourier transform
    FT
    [temp_masked_vol]
    [temp_masked_ft]
    
    ; Fourier filter
    FF
    [temp_masked_ft]
    [temp_filtered_ft]
    7   ; Butterworth low-pass
    [filterParam1],[filterParam2]

    ; convex sets, projector replace
    CV REPL
    [temp_filtered_ft]   ; INPUT (overwritten)
    [temp_vol_ft]        ; INPUT
    C                    ; _C_onical tilting
    [tiltAngle]

    ; inverse Fourier
    FT
    [temp_filtered_ft]
    [temp_vol_incore]

    ; find statistics
    FS [fmax],[fmin],[favg],[stdev]
    [temp_vol_incore]

    [sliceNum] = [iter] + 1
    
    ; write to doc file
    SD [iter], [fmax],[fmin],[favg],[stdev], [sliceNum]
    [pocs_stats_doc]

    ; project in y
    PJ 3
    [temp_vol_incore]
    [ydim],[ydim]
    [pocs_dir]/[y_projections]@{***[sliceNum]}
    [yprjPhi],90,0
LB1
; end iteration-loop

; create soft link of most recent projection stack for SPIRE
SYS
cd [pocs_dir] && rm -f [last_link].$DATEXT && ln -sv [y_projections].$DATEXT [last_link].$DATEXT ; echo

; close doc
SD /        FMAX          FMIN          FAVG          S.D.
[pocs_stats_doc]
SD E
[pocs_stats_doc]
; copy to final
CP
[temp_vol_incore]
[pocs_vol]

; filter
FQ NP
[pocs_vol]
[filt_pocs_vol]
[filterType]
[filterParam1],[filterParam2]

SYS
echo ; echo "Done" ; date

EN D

; Modified 2018-02-07
;    TO DO: read filter parameters using subroutine
;    2016-04-20 (trs) -- creates link to more recent projection stack for SPIRE
;    2015-08-06 (trs) -- diagnostic y-projections written as stack (numbered from 2 to [numIters]+1)
