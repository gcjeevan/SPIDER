; FILTERS VOLUMES 

; ------------------- Parameters -------------------

[single-class]    = 0      ; class number to calculate reconstruction (0==all)
[multiref-iter]   = -1     ; iteration of multireference alignment to use as input (<0 == last)
[docfileValuesYN] = 1      ; override parameters below with (optional) filter docfile? (1==docfile, 0==header values)
[header-type]     = 7      ; filter type (7==Butterworth, 5==Fermi, 3==Gaussian, 1==Tophat)
[header-param1]   = 30.0   ; pass band for Butterworth, else filter radius (Angstroms)
[header-param2]   = 20.0   ; stop band for Butterworth, temperature for Fermi, else unused (Angstroms)
[numProcs]        = 0      ; number of CPUs to use (0==ALL)

; ------------------ Input files ------------------
fr l
[parameter_doc]params                             ; parameter doc file
fr l
[class_list]Zerodegr/Multiref{*[iter]}/listviews  ; list of classes
fr l
[multiref_tracking_doc]Zerodegr/docmultiref       ; list of multireference alignment iterations 
fr l
[volume_dir]Volumes                               ; output reconstruction directory
fr l
[class_vol][volume_dir]/vcla{***[classNum]}       ; class volume filename template

; ------------------ Output files -----------------
fr l
[filt_vol]vcla{***[classNum]}-flt     ; class volume filename template, in VOLUME_DIR
fr l
[filter_doc][volume_dir]/docvolfilt   ; editable doc file with filter parameters

; ---------------- END BATCH HEADER ---------------

FR L
[temp_filter_copy]tmpdoccopy
fr l
[temp_sorted_doc]tmpdocsorted

; get pixel-size
ud 5, [pixel-size]
[parameter_doc]
ud e

; check if all classes or single class specified
if([single-class].eq.0) then
    ; GET ITERATION NUMBER

    ; if input iteration-specified
    if([multiref-iter].gt.0) then
        [iter] = [multiref-iter]

    ; if input iteration not specified
    else
        ; look for last iteration number
        ud n [last-iter-key]
        [multiref_tracking_doc]
        
        ; get iteration number
        ud [last-iter-key], [iter]
        [multiref_tracking_doc]
        ud e  ; close doc
    endif

    ; get #classes
    ud n [num-classes]
    [class_list]
    
    vm
    echo "Filtering all {***[num-classes]} classes listed in [class_list]"
else
    vm
    echo "Filtering only class #{***[single-class]}"
    
    [num-classes] = 1
    [classNum]    = [single-class]
endif

; check if filter docfile exists
iq fi [filterdoc-exists]
[filter_doc]

if([filterdoc-exists].eq.1) then
    vm
    echo "[filter_doc].$DATEXT exists"
    
    if([docfileValuesYN].eq.0) then
        vm
        echo "Will use filter parameters specified in batch file"
    else
        vm
        echo "Will use filter parameters specified in [filter_doc].$DATEXT"
        
        VM
        cp -f [filter_doc].$DATEXT [temp_filter_copy].$DATEXT
    endif
else
    vm
    echo "Will write filter parameters to [filter_doc].$DATEXT"
endif

VM
echo

md
set mp
[numProcs]

; loop through classes
do lb1 [class-key] = 1,[num-classes]
    ; get class# if not a single class
    if([single-class].eq.0) then
        ud ic [class-key], [classNum]
        [class_list]
    endif
    ; (If single class, [classNum] will have been set above.)
    
    ; check if volume exists
    iq fi, [vol-exists]
    [class_vol]

    ; skip if no volume
    if([vol-exists].eq.0) then 
        vm
        echo "Did not find [class_vol].$DATEXT -- Continuing..." ; echo

        goto lb1
    endif
    
    ; (The only condition where we use the docfile parameters is if the docfile exists AND override=1)
    if([docfileValuesYN]*[filterdoc-exists].ne.0) then
        ud find [docfileKey], [docfile-classnum],[docfile-filtertype],[docfile-param1],[docfile-param2]
        [temp_filter_copy]   ; WAS [filter_doc]
        (1,[classNum])   ; column# to search, value to search for
;        ud find e
;        [temp_filter_copy]   ; WAS [filter_doc]
        
        [docfileKey]   ; diagnostic
        
        ; if parameters found, use those
        if([docfileKey].eq.0) then
            vm
            echo "Couldn't find info for class #{***[classNum]} in [filter_doc].$DATEXT -- using values in batchfile header..."
            
            [filter-type] = [header-type]
            [filt-param1] = [pixel-size]/[header-param1]
            [filt-param2] = [pixel-size]/[header-param2]
            
            ; The following will be written to the filter docfile
            [docfile-param1] = [header-param1]
            [docfile-param2] = [header-param2]
        else
            [filter-type] = [docfile-filtertype]
            [filt-param1] = [pixel-size]/[docfile-param1]
            [filt-param2] = [pixel-size]/[docfile-param2]
        endif
    
    ; use filter parameters in header
    else
        [filter-type] = [header-type]
        [filt-param1] = [pixel-size]/[header-param1]
        [filt-param2] = [pixel-size]/[header-param2]
        
        ; The following will be written to the filter docfile
        [docfile-param1] = [header-param1]
        [docfile-param2] = [header-param2]
    endif
    
    ; write to docfile
    sd [classNum], [classNum],[filter-type],[docfile-param1],[docfile-param2]
    [filter_doc]
;    sd e
;    [filter_doc]
    
    vm
    echo "Class #{***[classNum]} -- Filter type: {*[filter-type]}, Parameter1: {%f6.2%[docfile-param1]}, Parameter2: {%f6.2%[docfile-param2]}" ; echo

    ; filter volume
    fq np
    [class_vol]
    [volume_dir]/[filt_vol]
    [filter-type]
    [filt-param1],[filt-param2]  ; passband, stopband
    
;    ; link to version ending in .spi
;    vm
;    pushd [volume_dir] ; ln -sv [filt_vol].$DATEXT [filt_vol].spi ; popd
lb1
; end class-loop

; close docs
ud find e
[temp_filter_copy]
de
[temp_filter_copy]
sd e
[filter_doc]

; update
doc sort
[filter_doc]
[temp_sorted_doc]
(1)   ; column# to sort: class#
Y,Y   ; renumber keys?, remove duplicates?

doc ren
[temp_sorted_doc]
[filter_doc]

; close docs
de
[temp_sorted_doc]
SD /      CLASS_NUM     FILT_TYPE    FILT_PARAM1   FILT_PARAM2
[filter_doc]
sd e
[filter_doc]

fs
[class_vol]

vm
echo "Done"

en 

; Modified 2017-11-03
;    2015-07-16 (trs) -- UD FIND doesn't like sharing with SD
;    2015-07-16 (trs) -- number of CPUs now user-defined
;    2014-03-04 (trs) -- looks for last iteration of multireference alignment

