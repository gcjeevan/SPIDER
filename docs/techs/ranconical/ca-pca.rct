; RUNS CORRESPONDENCE ANALYSIS OR PRINCIPAL COMPONENT ANALYSIS

; NOTES: 
;   uses Python script eigendoc.py (jsl & trs)

; ---------------- Parameters ----------------

[filteredImgsYN] = -1    ; use low-pass filtered images? (1==YES, 0==NO, -1==If_Available)
[numFactors]     = 27    ; number of factors to calculate
[casOption]      = 1     ; correspondence analysis (1), PCA (2), IPCA (3)
[reconstCoeffs]  = 0     ; coefficients for reconstituted images, in multiples of st.dev. (0 == min & max)
                         ; (for example, if 2, then reconstituted images will be at -2*stdev and +2*stdev)
[radius]         = -1    ; particle radius (pixels, used if no custom mask, <0==IDIM/2)
[addConstant]    = 0     ; additive constant if using correspondence analysis (0 == Automatic)
[factormapRange] = 3.0   ; range in factor map, as a multiple of st.dev. (0 == don't generate)
                         ; (SPIDER sometimes crashes if this number is too small)
[numCPUs]        = 0     ; number of CPUs to use (0 == All)

; ------------------ Inputs ------------------
FR L
[selection_doc]listparticles             ; selection doc file
FR L
[custom_mask]stkmask@4                   ; (optional) custom mask

; aligned images (will set [particles])
FR L 
[fullsized_stack]Zerodegr/stk3-aligned   ; unfiltered-particle stack (w/o "@", see option [filteredImgsYN])
FR L 
[filtered_stack]Zerodegr/stkfiltered     ; filtered-particle stack (w/o "@", see option [filteredImgsYN])

; ------------------ Outputs ------------------

FR L
[ca_dir]Zerodegr/MSA                           ; output directory
FR L
[cas_prefix][ca_dir]/cas                       ; correspondence-analysis output prefix
FR L
[ps_eigenvalue_hist][ca_dir]/ps_eigenvalues    ; eigenvalue histogram, encapsulated PostScript
FR L
[eigen_img][ca_dir]/stkeigenimg                ; eigenimage stack (w/o "@")
FR L
[reconstituted_img][ca_dir]/stkreconst         ; reconstituted image stack (w/o "@")
FR L
[ps_factor_map][ca_dir]/factormap              ; eigenvalue factor map, PostScript format

; -------------- END BATCH HEADER --------------

; Temporary files
FR L
[temp_mask]_6
FR L
[temp_gnuplot]tmp2.gnu
FR L
[temp_eigenvalues_text]eigenvalues.txt
FR L
[temp_corrmap]tmpdoccorrmap                   ; eigenvalue (1-9) document file (for WEB->CorrMap)
FR L
[temp_rec_stack]tmpstkreconst

SYS
mkdir -p [ca_dir]

MD
SET MP
[numCPUs]

IF ( [filteredImgsYN] .EQ. -1 ) THEN
    ; See if filtered images exist
    IQ FI [filteredExist]
    [filtered_stack]

    IF ( [filteredExist] .EQ. 1 ) [filteredImgsYN]=1
ENDIF

IF ( [filteredImgsYN] .EQ. 1 ) THEN
    SYS
    echo "Using filtered/shrunken images [filtered_stack].$DATEXT" ; echo
    FR L
    [particles][filtered_stack]@*****
ELSE
    SYS
    echo "Using fullsize images [fullsized_stack].$DATEXT" ; echo
    FR L
    [particles][fullsized_stack]@*****
ENDIF

; get first particle#
[one] = 1
UD IC [one], [firstPart]
[selection_doc]

; get size of first image
FI H [idim]
[particles][firstPart]
NY

SYS
echo "Using window dimension of {%i0%[idim]} pixels"; echo

; check if custom mask present
IQ FI [maskExists]
[custom_mask]

; if custom mask present, copy it into memory
IF ( [maskExists] .EQ. 1 ) THEN
    CP
    [custom_mask]  ; INPUT
    [temp_mask]    ; OUTPUT

    ; check dimensions
    FI [maskYDim]
    [temp_mask]
    2  ; header position for NROW

    ; compare dimensions
    IF ( [maskYDim] .NE. [idim] ) THEN
        [ydimQuotient] = [maskYDim]/[idim]

        ; check if integer downsampling factor
        IF ( [ydimQuotient] .EQ. INT([ydimQuotient]) ) THEN
            SYS
            echo "Mask [custom_mask] is {*[ydimQuotient]} times bigger than images.  Shrinking mask..."

            DC S
            [custom_mask]
            [temp_mask]
            [ydimQuotient],[ydimQuotient]
        ELSE
            SYS
            echo "ERROR: Mask dimension {***[maskYDim]} different from image dimension {***[idim]}.  Exiting..."

            EN
        ENDIF
    ENDIF

; if custom mask not present, make circular mask
ELSE
    ; check if radius undefined
    IF ( [radius] .LE. 0 ) [radius] = INT(([idim]-1)/2)

    SYS
    echo "Using mask radius {%i0%[radius]} pixels" ; echo
    
    MO  
    [temp_mask]    ; output mask file
    [idim],[idim]  ; dimensions
    C              ; _C_ircle
    [radius]
ENDIF

; if CA selected: check for small intensities
IF ( [casOption] .EQ. 1 ) THEN
    SYS
    echo "Finding statistics" ; date
    
    ; initialize minimum
    [globalMin] = 999999

    ; get #particles
    UD N [numParts]
    [selection_doc]

    ; loop through particles
    DO LB5 [partKey] = 1,[numParts]
        ; get particle number
        UD IC [partKey], [partNum]
        [selection_doc]

        ; get image-minimum
        FS
        [particles][partNum]
        FI [imgMin]
        [particles][partNum]
        8  ; header location for minimum intensity

        ; update if necessary
        IF ( [imgMin] .LT. [globalMin] ) THEN
            [globalMin] = [imgMin]
            [minPart] = [partNum]  ; particle#
        ENDIF
    LB5
    ; end particle-loop

    UD ICE  ; close document
    [selection_doc]

    ; if additive constant set to automatic, set it
    IF ( [globalMin] .LT. 0.05 ) THEN
        IF ( [addConstant] .EQ. 0 ) [addConstant] = 0.05-[globalMin]
    ENDIF

    SYS
    echo "Minimum intensity: {%f11.4%[globalMin]} (image #{******[minPart]}), additive constant: {%f11.4%[addConstant]}"; echo
ENDIF

IF ( [casOption] .EQ. 1 ) THEN
    SYS
    echo "Running correspondence analysis"; date

    ; run correspondence analysis
    CA S
    [particles]
    [selection_doc]
    [temp_mask]
    [numFactors]
    C             ; _C_orrespondence analysis
    [addConstant]
    [cas_prefix]  ; OUTPUT: file prefix
ENDIF

IF ( [casOption] .EQ. 2 ) THEN
    SYS
    echo "Running principal component analysis"; date

    ; run principal component analysis
    CA S
    [particles]
    [selection_doc]
    [temp_mask]
    [numFactors]
    P             ; _P_rinciple component analysis
    [cas_prefix]  ; OUTPUT: file prefix
ENDIF

IF ( [casOption] .EQ. 3 ) THEN
    SYS
    echo "Running iterative principal component analysis"; date

    ; run iterative principal component analysis
    CA S
    [particles]
    [selection_doc]
    [temp_mask]
    [numFactors]
    I             ; _I_terative PCA
    [cas_prefix]  ; OUTPUT: file prefix
ENDIF

SYS M
echo ; echo "Preparing eigenvalue plot" ; echo ;
rm -f [temp_gnuplot] [temp_eigenvalues_text] ;
python eigendoc.py [cas_prefix]_EIG.$DATEXT > [temp_eigenvalues_text]
.
SYS M
echo ' 'set terminal postscript eps enhanced monochrome \"Times-Roman\" 24 > [temp_gnuplot] ;
echo ' 'set encoding iso_8859_1 >> [temp_gnuplot] ;
echo ' 'set xlabel \"Eigenvalue number\"   >> [temp_gnuplot] ; 
echo ' 'set ylabel \"%\" >> [temp_gnuplot] ; 
echo ' 'set boxwidth 0.5 >> [temp_gnuplot] ;
echo ' 'set xrange \[0.2:{**[numFactors]}.5\] >> [temp_gnuplot] ;
echo ' 'set output \'[ps_eigenvalue_hist].ps\' >> [temp_gnuplot] ;
echo ' 'plot \'[temp_eigenvalues_text]\' using 1:3 title \'eigenvalues\' with boxes >> [temp_gnuplot] ;
gnuplot [temp_gnuplot] ;
rm -f [temp_gnuplot] [temp_eigenvalues_text]
.

; delete pre-existing files
DE
[eigen_img]@
DE
[reconstituted_img]@
DE
[temp_corrmap]


; RECONSTITUTE EIGENIMAGES

SYS
echo "Reconstituting eigenimages"; date

DE
[temp_rec_stack]@

;;[doubleDim] = [idim]*2  ; double image-dimension
;;[idimPlus1] = [idim]+1

; loop through factors
DO LB9 [factorNum] = 1,[numFactors]
        SD C
        [cas_prefix]
        [factorNum]  ; factor range 
        [temp_corrmap]
        
        ; Get factor statistics
        DOC STAT [nval],[min],[max],[sum],[avg],[stdev]
        [temp_corrmap]
        1  ; WAS [factorNum]

        IF ( [reconstCoeffs] .LE. 0 ) THEN
            [lowEnd]  = [min]
            [highEnd] = [max]

        ; if user-specified
        ELSE
            [lowEnd]  = -[reconstCoeffs]*[stdev]
            [highEnd] = [reconstCoeffs]*[stdev]
        ENDIF

    ; syntax is different for CA ([casOption]=1) than for (I)PCA
    IF ( [casOption] .EQ. 1 ) THEN
        ; generate eigenimage
        CA SRE
        [cas_prefix]
        [factorNum]
        [eigen_img]@{***[factorNum]}

        ; generate positive reconstituted image
        CA SRA
        [cas_prefix]
        [factorNum]
        [highEnd]  ; coefficient
        [temp_rec_stack]@1  ; WAS _1   ; WAS [temp_posrec]   ; OUTPUT

        ; generate negative reconstituted image
        CA SRA
        [cas_prefix]
        [factorNum]
        [lowEnd]  ; coefficient
        [temp_rec_stack]@2  ; WAS _3   ; WAS [temp_negrec]   ; OUTPUT

    ; syntax for PCA/IPCA ([casOption]={2,3})
    ELSE
        ; generate eigenimage
        CA SRE
        [cas_prefix]
        Y            ; subtract average?
        [factorNum]  ; eigenvector
        [eigen_img]@{***[factorNum]}

        ; generate positive reconstituted image
        CA SRA
        [cas_prefix]
        N          ; subtract average?
        [factorNum]
        [highEnd]  ; WAS (0.2)  ; eigenvalue
        [temp_rec_stack]@1  ; WAS _1   ; WAS [temp_posrec]

        ; generate negative reconstituted image
        CA SRA
        [cas_prefix]
        N         ; subtract average?
        [factorNum]
        [lowEnd]  ; WAS (-0.2)  ; eigenvalue
        [temp_rec_stack]@2  ; WAS _3   ; WAS [temp_negrec]
    ENDIF
    
    ; montage positive and negative reconstituted image
    MN S
    [temp_rec_stack]@*  ; input template
    1,2   ; image #s
    1,1   ; images/row, margin-width
    0     ; margin value
    [reconstituted_img]@{***[factorNum]}
        
    DE
    [temp_rec_stack]@
LB9
; End factor-loop

DE
[temp_corrmap]

; PREPARE FACTOR MAPS

IF ([factormapRange] .GE. 0) THEN
    SYS
    echo "Generating factor maps"; date

    [numPairs] = [numFactors] - 1  ; number of factor-pairs to plot

    ; loop through factor-pairs
    DO LB2 [factor1] = 1,[numPairs]
        [factor2] = [factor1] + 1  ; second factor to plot

        ; generate factor map
        CA SM
        I        ; plot _I_mage coordinates
        [cas_prefix]  ; INPUT
        0        ; #horizontal patches
        [factor1],[factor2]  ; factors to plot
        S        ; plot _S_ymbol
        +        ; symbol to plot
        Y        ; output to PostScript?
        [factormapRange] ; #standard devations to plot
        0        ; no axis-flip
        [ps_factor_map]{**[factor1]}{**[factor2]}  ; OUTPUT
                 ; TEXT SIZE FOR AXIS AND DATA
                 ; X AXIS OFFSET
                 ; LOWER, UPPER AXIS BOUNDS
                 ; AXIS LABEL UNIT AND TICKS / LABEL
                 ; LABEL NO. TO EDIT
                 ; Y AXIS OFFSET
                 ; LOWER, UPPER AXIS BOUNDS
                 ; AXIS LABEL UNIT AND TICKS / LABEL
                 ; LABEL NO. TO EDIT
    LB2
    ; end pair-loop
ENDIF

SYS
echo "Done"; date

EN D

; Modified 2018-02-12
;    2016-05-10 (trs) -- added option to skip factor map (CA SM crashes if too many point on margin)
;    2016-04-08 (trs) -- can use either filtered or unfiltered particles
;    2015-07-31 (trs) -- gets image dimension from first particle rather than PARAMS
;    2014-04-03 (trs) -- no longer saves correlation doc file -- SD C was crashing too much
;    2014-04-03 (trs) -- generates reconstituted images more intelligently
;    2014-03-06 (trs) -- writing images in stacks
;    2014-02-06 (trs) -- changed default range for factormap to +/- 3 s.d. -- SPIDER dumps core if too small
;    2014-02-04 (trs) -- number of standard deviations to plot in factor maps is now user-specified
;    2013-03-20 (trs & cjh) -- downsamples custom mask if necessary
;    2012-09-07 (trs) -- better scales reconstituted images
;    2012-09-07 (trs) -- generates Gnuplot script from scratch, ploteigen.gnu no longer needed
;    2012-04-18 (trs) -- reads optional custom mask
;    2010-02-09 (trs) -- CA SR* asks extra question if using PCA/IPCA
;    2008-11-26 (trs) -- now a parameter to specify CA, PCA, or IPCA
;    2007-11-02 (trs) -- added reconstituted images
;    2006-05-11 (trs) -- bug fix if more than nine factors
;    2005-08-23 (trs) -- factor maps adapted from jsl's casm.bat
