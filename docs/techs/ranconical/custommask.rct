; CREATE CUSTOM MASK
; FOR CORRESPONDENCE ANALYSIS

; ----------- Parameters -----------
[sumalignAvgYN]  = -1    ; use sumalign average? (1==YES, 0==NO, -1==If_available)
[filterRadius1]  = 0.1   ; Fourier radius for input image, absolute frequency
[factorSD]       = 0.6   ; first threshold == image average plus this number * s.d.
[filterRadius2]  = 0.1   ; Fourier radius for initial binary mask, absolute frequency
[maskThreshold2] = 0.01  ; threshold for filtered mask

; ------------- Input -------------
FR L
[align_dir]Zerodegr/Pairwise          ; alignment directory

; options for averages (will set [input_image])
FR L
[reffree_avg][align_dir]/rfreeavg001  ; reference-free average (see option [sumalignAvgYN])
FR L
[sumalign_avg][align_dir]/avgu001   ; average after sumalign (see option [sumalignAvgYN])

; ------------- Output -------------
FR L
[output_mask]stkmask                  ; mask stack (binary mask at slice #4)

; -------- END BATCH HEADER --------

IF ([sumalignAvgYN] .EQ. -1) THEN
    ; See if sumalign average exists
    IQ FI [sumalignExists]
    [sumalign_avg]

    IF ([sumalignExists] .EQ. 1) [sumalignAvgYN] = 1
ENDIF

IF ([sumalignAvgYN] .EQ. 1) THEN
    SYS
    echo "Masking sumalign average [sumalign_avg].$DATEXT" ; echo
    FR L
    [input_image][sumalign_avg]
ELSE
    SYS
    echo "Masking reference-free average [reffree_avg].$DATEXT" ; echo
    FR L
    [input_image][reffree_avg]
ENDIF

; Delete pre-existing stack
DE
[output_mask]

; Filter input image
FQ
[input_image]
[output_mask]@1
3  ; filter type: Gaussian low-pass
[filterRadius1]

; Get image avg, s.d.
FS
[input_image]
FI [imgAvg], [imgSD]
[input_image]
9,10  ; header positions for avg, s.d.

; Calculate threshold
[imgThreshold1] = [imgAvg] + [imgSD]*[factorSD]

; Threshold image
TH M
[output_mask]@1  ; INPUT: filtered image
[output_mask]@2  ; OUTPUT
B                ; mask _B_elow threshold
[imgThreshold1]

; Filter thresholded image
FQ
[output_mask]@2  ; INPUT: thresholded image
[output_mask]@3  ; OUTPUT
3                ; filter type: Gaussian low-pass
[filterRadius1]

; Threshold filtered mask
TH M
[output_mask]@3  ; INPUT: filtered mask
[output_mask]@4  ; OUTPUT
B  ; mask _B_elow threshold
[maskThreshold2]

; Copy image to be masked
CP
[input_image]
[output_mask]@5

; Apply mask
MM C
[output_mask]@4  ; INPUT: mask
[output_mask]@5  ; OUTPUT: mask-multiplied image

; Invert mask
AR
[output_mask]@4  ; INPUT: mask
[output_mask]@6
-1*p1-1

; Copy image to be masked
CP
[input_image]
[output_mask]@7

; Apply inverted mask
MM C
[output_mask]@6  ; INPUT: inverted mask
[output_mask]@7  ; OUTPUT: inverted-mask-multiplied image

EN D

; Modified 2020-04-07
;    TODO: change frequency units to Angstroms

