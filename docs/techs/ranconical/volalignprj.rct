; COMPARE PROJECTIONS OF TWO VOLUMES
; 
; Requires montageprj.rct

; --------------- Parameters ---------------

[expNum]     = 3     ; volume number to align to reference
[refNum]     = 1     ; volume number of reference
[numSolns]   = 2     ; number of alignment solutions to compare (starting from highest CC)

[dtheta]     = 15    ; angular increment for re-projections (15==83 projections)
[shiftRange] = 8     ; alignment shift range, pixels
[shiftStep]  = 2     ; alignment step size, pixels
[firstRing]  = 1     ; inner alignment radius, pixels

; ---------------- Inputs -----------------
FR L
[parameter_doc]params                    ; parameter doc file
FR L
[vol_dir]Volumes                         ; volume directory
FR L
[class_vol][vol_dir]/vcla***-pocs-filt   ; class volume template

; ---------------- Outputs ----------------
FR L
[volalign_dir]Volumes/Alignment             ; volume-alignment directory
FR L
[class_list][volalign_dir]/list2merge       ; list of class volumes (appended)
;        CLASS_NUM    SOLUTIONNUM
FR L
[ref_angles][volalign_dir]/refangles        ; projection-angle doc file
FR L
[list_projs][volalign_dir]/projlist         ; list of projections
FR L
[prj_stack][volalign_dir]/prj_***           ; re-projection stack (for both reference and experimental volumes)
FR L
[align_doc][volalign_dir]/sortprjalign***   ; alignment docfile, sorted
FR L
[vol_align_doc][volalign_dir]/dalv***       ; volume alignment doc filename template
FR L
[proj_montage]mproj***                      ; stack of compared reprojections, in VOLALIGN_DIR
FR L
[last_link]mproj-LAST                       ; softlink to most recent stack of reprojections (for SPIRE)
FR L
[aligned_vol][vol_dir]/vcla***-ali          ; aligned volume

; ------------ END BATCH HEADER ------------

; Temporary files
FR L
[temp_class_list]tmplistclasses
FR L
[temp_align_doc]tmpapsh
FR L
[temp_refvol_aligned]_11
FR L
[temp_expvol_aligned]_12
FR L
[temp_expvol_refined]_13
FR L
[temp_mask]_20
FR L
[temp_initial_reproj]tmp_init_projs{***[solnNum]}
FR L
[temp_refined_reproj]tmp_refi_projs{***[solnNum]}
FR L
[temp_comparison_stack]_21

; get image, particle dimensions
UD IC 17, [imgDim]
[parameter_doc]
UD IC 18, [diameter]
[parameter_doc]
UD ICE
[parameter_doc]

SYS
mkdir -p [volalign_dir]


; GENERATE RE-PROJECTIONS (Adapted from refproj.spi)

DE 
[ref_angles]

; compute projection angles
VO EA [numang]
[dtheta]       ; Delta theta
0,0            ; Range of theta
0,0            ; Range of phi
[ref_angles]   ; Doc file of angles       (output)

[numang] = [numang] - 1
; (Last projection is redundant with (0,0,0).)

DOC CREATE
[list_projs]
1           ; column# to fill
1-[numang]  ; values to enter

[prjRadius] = [imgDim]/2 - 1

; generate class list
DOC CREATE
[temp_class_list]
1           ; column# to fill
[refNum],[expNum]


; UPDATE CLASS LIST

[one]  = 1
SD [one], [refNum],[one]
[class_list]
SD [one], [expNum],[one]
[class_list]
SD E
[class_list]
DOC REN
[class_list]
[class_list]

DOC SORT
[class_list]  ; INPUT
[class_list]  ; OUTPUT
1             ; column# to sort
Y,Y           ; renumber keys?, remove duplicates?

; label
SD /      CLASS_NUM    SOLUTIONNUM
[class_list]
SD E
[class_list]

UD N [num-classes]
[class_list]

SYS
echo "Accumulated {***[num-classes]} classes total in [class_list].$DATEXT" ; echo

; loop through classes
DO LB3 [classKey] = 1,2
    UD IC [classKey], [classNum]
    [temp_class_list]
    
    DE
    [prj_stack][classNum]@

    SYS
    echo "Projecting [class_vol][classNum]"

    ; project volume
    PJ 3Q
    [class_vol][classNum]        ; Volume to be projected          (input)
    [prjRadius]                  ; Radius
    1-[numang]                   ; List of file numbers
    [ref_angles]                 ; Proj. angles doc file           (input)
    [prj_stack][classNum]@****   ; Template for projection stack   (output)
LB3
; end class-loop

; close doc
UD ICE
[temp_class_list]
DE
[temp_class_list]


; ALIGN RE-PROJECTIONS

SYS
echo ; echo "Aligning re-projections" ; date

; calculate particle-radius
[alignRadius] = ([diameter] - 1)/1.4  
; (padding it a bit)

; check outer alignment radius
[checkRadius] = INT([imgDim]/2) - [alignRadius] - [shiftRange]

; fix outer alignment radius, if necessary
IF ( [checkRadius] .LT. 2 ) [alignRadius] = INT([imgDim]/2) - [shiftRange] - 3

SYS
echo "Using outer alignment radius of {***[alignRadius]} pixels" ; echo

; align to reference projections
AP SH
[prj_stack][refNum]@****    ; reference-image template
[list_projs]                ; list of reference images
[shiftRange],[shiftStep]    ; search range, step size
[firstRing],[alignRadius]   ; first, last ring
[ref_angles]                ; projection angles
[prj_stack][expNum]@****    ; experimental-image template
[list_projs]                ; experimental image(s)
*                           ; initial angles
0,0                         ; search range, threshold angle
Y,N                         ; check mirrored positions?, shift/rotate input?
[temp_align_doc]            ; OUTPUT: alignment doc

; sort by CC
DOC SORT
[temp_align_doc]       ; INPUT
[align_doc][expNum]   ; OUTPUT
11                     ; column# to sort: CCROT
Y,N                    ; renumber?, remove duplicates?

DE
[temp_align_doc]
;                     1             2              3            4             5             6            7              8             9            10            11            12           13             14            15
SD /              ANGLE_PSI    ANGLE_THETA     ANGLE_PHI     REFPROJ       EXP_IMG  CUM.{INPLANE      X_SHIFT        Y_SHIFT}      NUMPROJ       ANGDIFF        CCROT        INPLANE      X_SHIFT        Y_SHIFT        MIRCC
[align_doc][expNum]
SD E
[align_doc][expNum]


; COMPARING ALIGNMENTS

; delete pre-existing files
DE
[vol_align_doc][expNum]
DE
[vol_align_doc][refNum]
DE
[volalign_dir]/[proj_montage][expNum]@

[prjRadius] = ([imgDim]/2) - 1
[volCenter] = ([imgDim]/2) + 1

; make mask for CC
MO 3
[temp_mask]
[imgDim],[imgDim],[imgDim]
SP        ; SPhere
N         ; coordinates from doc file?
(1)       ; density
[prjRadius]
[volCenter],[volCenter],[volCenter]
(0,0,0)   ; don't continue

[ydim]                = [imgDim] + 36  ; label is 36 pixels tall
[numComparisonSlices] = 2*([numSolns]+1)*[numang]

; make empty stack for labelled re-projections
MS
[temp_comparison_stack]@
[imgDim],[ydim]  ; dimensions
[numComparisonSlices]

SYS
echo "Aligning [class_vol][expNum] to [class_vol][refNum]"

; get #projections
UD N [numProj]
[align_doc][expNum]

; loop through solutions
DO LB1 [solnNum] = 1,[numSolns]
    ; alignment doc assumed to be sorted from lowest to highest, so count from end
    [key] = [numProj] - [solnNum] + 1

    ; read alignment parameters
    UD IC [key], x81,x82,x83,[refProj],[expProj],[inplane],x87,x88,x89,x90,x91,x92,x93,x94,[mirrorFlag]
    [align_doc][expNum]

    ; get reference angles
    UD IC [refProj], [refPsi],[refTheta],[refPhi]
    [ref_angles]
    ; (May differ from angles in ALIGN_DOC if mirroring was required.)

    ; get experimental angles
    UD IC [expProj], [expPsi],[expTheta],[expPhi]
    [ref_angles]

    IF ([mirrorFlag].LE.0) THEN
        ; combine rotation with mirror (180-degree rotation around y)
        SA 3 [mirPhi],[mirTheta],[mirPsi],[xsh],[ysh],[zsh]
        [expPhi],[expTheta],[inplane]
        0,0,0     ; x,y,z-shifts
        0,180,0   ; 2nd rotation
        0,0,0     ; x,y,z-shifts

        ; combine angles to get reference's frame of reference
        SA 3 [aliPhi],[aliTheta],[aliPsi],[xsh],[ysh],[zsh]
        [mirPhi],[mirTheta],[mirPsi]      ; 1st set of angles
        0,0,0                             ; x,y,z-shifts
        -[refPsi],-[refTheta],-[refPhi]   ; 2nd set of angles
        0,0,0                             ; x,y,z-shifts

        ; rotate experimental volume
        RT 3D
        [class_vol][expNum]
        [temp_expvol_aligned]   ; OUTPUT
        [aliPhi],[aliTheta],[aliPsi]

        SYS
        echo "Solution #{*[solnNum]}, initial alignment: ({%f7.2%[mirPhi]},{%f7.2%[mirTheta]},{%f7.2%[mirPsi]}) at reference projection #{***[refProj]}"
        
        ; refine alignments
        OR 3Q [or3qPhi],[or3qTheta],[or3qPsi],[or3qCC]
        [class_vol][refNum]   ; INPUT: reference
        [class_vol][expNum]   ; INPUT: experimental volume
        [prjRadius]
        [aliPhi],[aliTheta]
        [aliPsi]
        
        ; rotate experimental volume
        RT 3D
        [class_vol][expNum]
        [temp_expvol_refined]   ; OUTPUT
        [or3qPhi],[or3qTheta],[or3qPsi]

        SYS
        echo "Solution #{*[solnNum]}, refined alignment: ({%f7.2%[or3qPhi]},{%f7.2%[or3qTheta]},{%f7.2%[or3qPsi]})" ; echo
        
    ; if mirror not required
    ELSE
        ; combine angles to get reference's frame of reference
        SA 3 [aliPhi],[aliTheta],[aliPsi],[xsh],[ysh],[zsh]
        [expPhi],[expTheta],[inplane]      ; 1st set of angles
        0,0,0                              ; x,y,z-shifts
        -[refPsi],-[refTheta],-[refPhi]   ; 2nd set of angles
        0,0,0                              ; x,y,z-shifts

        ; rotate experimental volume
        RT 3D
        [class_vol][expNum]
        [temp_expvol_aligned]   ; OUTPUT
        [aliPhi],[aliTheta],[aliPsi]

        SYS
        echo "Solution #{*[solnNum]}, initial alignment: ({%f7.2%[aliPhi]},{%f7.2%[aliTheta]},{%f7.2%[aliPsi]}) at reference projection #{***[refProj]}"
        
        ; refine alignments
        OR 3Q [or3qPhi],[or3qTheta],[or3qPsi],[or3qCC]
        [class_vol][refNum]   ; INPUT: reference
        [class_vol][expNum]   ; INPUT: experimental volume
        [prjRadius]
        [aliPhi],[aliTheta]
        [aliPsi]
        
        ; rotate experimental volume
        RT 3D
        [class_vol][expNum]
        [temp_expvol_refined]   ; OUTPUT
        [or3qPhi],[or3qTheta],[or3qPsi]

        SYS
        echo "Solution #{*[solnNum]}, refined alignment: ({%f7.2%[or3qPhi]},{%f7.2%[or3qTheta]},{%f7.2%[or3qPsi]})" ; echo
    ENDIF

    ; compute CCCs
    CC C [initialCC]
    [class_vol][refNum]
    [temp_expvol_aligned]
    [temp_mask]
    
    CC C [refinedCC]
    [class_vol][refNum]
    [temp_expvol_refined]
    [temp_mask]
    ; (Output from OR 3Q isn't exactly comparable.)
    
    
    ; WRITE TO ALIGNMENT DOC
    
    SD [solnNum], [refProj],[aliPhi],[aliTheta],[aliPsi],[initialCC],[or3qPhi],[or3qTheta],[or3qPsi],[refinedCC]
    [vol_align_doc][expNum]
    
    DE
    [temp_initial_reproj]@
    DE
    [temp_refined_reproj]@

    ; generate projections of aligned volumes
    PJ 3Q
    [temp_expvol_aligned]
    [prjRadius]       ; Radius
    [list_projs]       ; List of file numbers
    [ref_angles]       ; Proj. angles doc file           (input)
    [temp_initial_reproj]@****

    PJ 3Q
    [temp_expvol_refined]
    [prjRadius]       ; Radius
    [list_projs]       ; List of file numbers
    [ref_angles]       ; Proj. angles doc file           (input)
    [temp_refined_reproj]@****
    
    ; loop through projections
    DO LB2 [prjNum] = 1,[numProj]
        @montageprj
        [prjNum]                                ; PARAMETER: projection#
        [solnNum]                               ; PARAMETER: solution#
        [numSolns]                              ; PARAMETER: #solutions
        [prj_stack][refNum]                     ; INPUT: reference-projections
        [temp_initial_reproj]                   ; INPUT: initial aligned projections
        [temp_refined_reproj]                   ; INPUT: refined aligned projections
        [temp_comparison_stack]                 ; INPUT/OUTPUT: re-projection stack
    LB2
    ; end projection-loop
    
    ; if best solution, write volume to disk
    IF ( [solnNum] .EQ. 1 ) THEN
        CP
        [temp_expvol_refined]
        [aligned_vol][expNum]
        
        SYS
        echo "Wrote refined volume [aligned_vol][expNum].$DATEXT" ; echo
        
        ; write dummy file for reference
        [zero] = 0
        SD [solnNum], [one],[zero],[zero],[zero],[one],[zero],[zero],[zero],[one]
        [vol_align_doc][refNum]
    ENDIF
LB1
; end solution-loop

; close docs
UD ICE
[align_doc][expNum]
UD ICE
[ref_angles]
SD /SOLN   REFPROJ     INITIAL_PHI  INITIAL_THETA  INITIAL_PSI   INITIAL_CC     REFINED_PHI  REFINED_THETA  REFINED_PSI   REFINED_CC
[vol_align_doc][expNum]
SD E
[vol_align_doc][expNum]
SD /SOLN   REFPROJ     INITIAL_PHI  INITIAL_THETA  INITIAL_PSI   INITIAL_CC     REFINED_PHI  REFINED_THETA  REFINED_PSI   REFINED_CC
[vol_align_doc][refNum]
SD E
[vol_align_doc][refNum]


; CREATE MONTAGE OF PROJECTIONS

SYS
echo "Generating montages of re-projections" ; date ; echo

DE
[volalign_dir]/[proj_montage][expNum]@

; loop through projections
DO LB5 [prjNum] = 1,[numProj]
    [firstSlice] = ([prjNum]-1)*([numSolns]+1)*2 + 1
    [firstSlice]
    
    [lastSlice]  = ([prjNum])*([numSolns]+1)*2
    [lastSlice]
    
    ; create montage
    MN S
    [temp_comparison_stack]@****                          ; INPUT
    [firstSlice]-[lastSlice]                              ; range of images
    2,1                                                   ; images/row, margin width
    0,5                                                   ; margin value
    [volalign_dir]/[proj_montage][expNum]@{****[prjNum]}  ; OUTPUT
LB5
; end projection-loop

SYS
cd [volalign_dir] && rm -f [last_link].$DATEXT && ln -sv [proj_montage][expNum].$DATEXT [last_link].$DATEXT ; echo

; CLEAN UP

DO LB4 [solnNum] = 1,[numSolns]
    DE
    [temp_initial_reproj]@
    DE
    [temp_refined_reproj]@
LB4

EN D

; Modified 2018-02-07
;    TO DO: incorporate shifts in volume alignment
;    2015-03-17 (trs & qw) -- bug fix: in output montage, wrote the same solution's re-projections
