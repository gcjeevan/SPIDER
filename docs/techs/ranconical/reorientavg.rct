; REALIGNS IMAGE ALONG COORDINATE AXES
;
;----------------------------------------------------------------------------------------!
; Adapted from b04.fed/hbf : - check last cycle of reference free alignment with respect 
;                            - to horizontal and/or vertical orientation
;----------------------------------------------------------------------------------------!

; --------------- Parameters ---------------
[reduceFactor] = 1   ; downsampling factor applied to input images
[innerRadius]  = 5   ; inner radius for alignment, pixels
[partDiam]     = -1  ; outer radius, pixels (<0 == automatic)

; -------------- Input files --------------
FR L
[parameter_doc]params                      ; (optional) parameter doc file
FR L
[align_dir]Zerodegr/Pairwise               ; alignment input-output directory
FR L
[aligned_avg][align_dir]/rfreeavg001       ; reference-free alignment average

; -------------- Output files --------------
FR L
[align_solution][align_dir]/solalign***    ; candidate solutions
FR L
[doc_align_solution][align_dir]/dsolalign  ; doc file with the alignment solutions
FR L
[MONTAGE][align_dir]/malign                ; montage of solutions

; ------------ END BATCH HEADER ------------

[minLabelDim] = 100

; Temporary files
[temp_solnstk]  = 'tmpstksolutions'
[temp_avg]      = 'scr001'   ; WAS '[temp_solnstk]@1'  ; WAS 
[temp_avg_mir]  = 'scr002'   ; WAS '[temp_solnstk]@2'  ; WAS 
[temp_acf]      = 'scr003'   ; WAS '[temp_solnstk]@3'  ; WAS 
[temp_acf_mir]  = 'scr004'   ; WAS '[temp_solnstk]@4'  ; WAS 
[temp_padstk]   = 'tmpstkpadded'
[temp_labelstk] = 'tmpstklabel'

; Clean up pre-existing docfile
DE
[doc_align_solution]
DE
[temp_solnstk]@

; get window dimension
FI H [idim]
[aligned_avg]
NX

; divide by decimation factor
[idim] = [idim]/[reduceFactor]

;-----------------------------------------------------------------------------!
; check alignment of the last reference free image with its mirror inversion
;-----------------------------------------------------------------------------!

; Copy average into memory
CP
[aligned_avg]
[temp_avg]
CP
[temp_avg]
[temp_solnstk]@1

; Compute the mirror inverted copy of this image 
MR
[temp_avg]
[temp_avg_mir]
Y  ; mirror about y-axis
CP
[temp_avg_mir]
[temp_solnstk]@2

; Compute the autocorrelation of the original image
AC
[temp_avg]  ; INPUT: average
[temp_acf]
CP
[temp_acf]
[temp_solnstk]@3

; Compute the autocorrelation of the mirror inverted image
AC
[temp_avg_mir]  ; INPUT: mirrored-average
[temp_acf_mir]
CP
[temp_acf_mir]
[temp_solnstk]@4

; Calculate power-spectrum radius
[radiusPW] = [idim]/2 - 3
[ringStep] = 1

; Angular cross-correlation of the two autocorrelation functions
OR R [acfAngle],[peakHeight]
[temp_acf_mir]   ; INPUT: ACF of mirrored-average
[temp_acf]       ; INPUT: ACF of average
[innerRadius],[radiusPW],[ringStep]
F                ; _F_ull circle alignment
1                ; #peaks 

;;or 2,[acfAngle],[peakHeight]
;;[temp_acf_mir]   ; INPUT: ACF of mirrored-average
;;[temp_acf]       ; INPUT: ACF of average
;;[innerRadius],[radiusPW]
;;[ringStep]      ; step-size
;;F                ; _F_ull circle alignment

[solutionCounter] = 0   ; Initialize

;-----------------------------------------------------------------------------!
; TWO ACF SOLUTIONS CAN BE FOUND TO GET THE DESIRED ORIENTATION OF YOUR IMAGES 
; BY ALIGNING THE ACFs:
; Solution No.1 : apply a half rotation angle -[acfAngle]/2.
; Solution No.2 : apply solution No.1 + 90 degrees 
;-----------------------------------------------------------------------------!

; Loop through solutions
DO LB1 [solnKey] = 1,4
    [solutionCounter] = [solutionCounter] + 1

    ; Apply a rotation of -[acfAngle]/2. => Y axis = cylinder axis )
    [rotationAngle] = -[acfAngle]/2. + ([solnKey]-1)*90
    [sliceNum]      = [solutionCounter] + 4

    RT
    [aligned_avg]
    [temp_solnstk]@{**[sliceNum]}
    [rotationAngle]

    ; Search the new center of gravity of the rotated average
    CG PH x21,x22,[xshift],[yshift]
    [temp_solnstk]@{**[sliceNum]}   ; INPUT: rotated-average

    [xshift] = -[xshift]
    [yshift] = -[yshift]

    ; Rotation and translation of the first solution 
    RT SQ
    [aligned_avg]
    [align_solution][solutionCounter]
    [rotationAngle]
    [xshift],[yshift]

    ; Save rotation and X Y shifts for solution No.1
    SD [solutionCounter], [rotationAngle],[xshift],[yshift]
    [doc_align_solution]
LB1
; End solution-loop


;-----------------------------------------------------------------------------!
; TWO MORE SOLUTIONS CAN BE FOUND TO GET THE DESIRED ORIENTATION OF YOUR IMAGES 
; BY ALIGNING IN REAL SPACE :
; Solution No.3: apply a half rotation angle -[alignment-angle]/2.
; Solution No.4: apply solution No.3 + 90 degrees 
;-----------------------------------------------------------------------------!

; if outer radius automatic, get particle diameter
IF ( [partDiam] .LE. 0 ) THEN
    UD IC 18, [particleDiam]
    [parameter_doc]

    [partDiam] = ([particleDiam] - 1)/1.4
ENDIF

; Sanity check
IF ( [partDiam] .GT. [idim]/2 - 3 ) THEN
    [oldDiam] = [partDiam]
    [partDiam] = INT([idim]/2 - 3)

    SYS
    echo "Reducing outer radius from {%i0%[oldDiam]} to {%i0%[partDiam]}px"
ENDIF

; Divide by decimation factor ([reduceFactor])
[partDiam] = [partDiam]/[reduceFactor]

; Calculate particle radius
[partRadius] = [partDiam]/2

; Angular cross-correlation of the two images in real space
OR R [rsAngle],[peakHeight]
[temp_avg_mir]   ; INPUT: mirrored-average
[temp_avg]       ; INPUT: average
[innerRadius],[partRadius],[ringStep]
F                ; _F_ull circle alignment
1                ; #peaks 


; Loop through solutions
DO LB2 [solnKey] = 1,4
    [solutionCounter] = [solutionCounter] + 1

    ; Apply a rotation of -[rsAngle]/2. => Y axis = cylinder axis )
    [rotationAngle] = -[rsAngle]/2. + ([solnKey]-1)*90
    [rotationAngle]
    [sliceNum]      = [solutionCounter] + 4

    RT
    [aligned_avg]
    [temp_solnstk]@{**[sliceNum]}
    [rotationAngle]

    ; Search the new center of gravity of the rotated average
    CG PH x21,x22,[xshift],[yshift]
    [temp_solnstk]@{**[sliceNum]}   ; INPUT: rotated-average

    [xshift] = -[xshift]
    [yshift] = -[yshift]

    ;   rotation and translation of the first solution 
    RT SQ
    [aligned_avg]
    [align_solution][solutionCounter]
    [rotationAngle]
    [xshift],[yshift]

    ;  save rotation and X Y shifts for solution No.1
    SD [solutionCounter], [rotationAngle],[xshift],[yshift]
    [doc_align_solution]
LB2
; End solution-loop


; Pad + label images

DE
[temp_padstk]@

IF ([idim] .LT. [minLabelDim]) THEN
    [paddedDim] = [minLabelDim]
ELSE
    [paddedDim] = [idim]
ENDIF

[topLeft] = ([paddedDim]-[idim])/2
; (Images assumed to be square.)

[numSlices] = [solutionCounter] + 4

; Loop through solutions
DO LB30 [soln] = 1,[numSlices]
    ; Pad image (so that label will fit)
    PD
    [temp_solnstk]@{**[soln]}
    [temp_padstk]@{**[soln]}
    [paddedDim],[paddedDim]   ; new dimensions
    M                         ; set background to _B_order
    [topLeft],[topLeft]       ; top-left coordinates
LB30
; End solution-loop

DE
[temp_labelstk]@

; Label originals
LA
[temp_padstk]@1
[temp_labelstk]@1
AVG

LA
[temp_padstk]@2
[temp_labelstk]@2
MIRROR

LA
[temp_padstk]@3
[temp_labelstk]@3
ACF(AVG)

LA
[temp_padstk]@4
[temp_labelstk]@4
ACF(MIR)

; Label the solutions
DO LB32 [soln] = 1,[solutionCounter]
    [sliceNum] = [soln] + 4

    LA
    [temp_padstk]@{**[sliceNum]}
    [temp_labelstk]@{**[sliceNum]}
    SOLN {**[soln]}
LB32
; End solution-loop


;-----------------------------------------------------------------------------!
; Creates a montage with intermediate images of 
; solution No.1 left  column of the montage
; solution No.2 right column of the montage
;-----------------------------------------------------------------------------!

[numImgs] = [solutionCounter] + 4

; Create montage file with four columns
MN S
[temp_labelstk]@*
1-[numImgs]   ; image range
4,2           ; images/row, margin-width
2.            ; margin-value
[MONTAGE]

; Remove intermediate images
DE
[temp_solnstk]@
DE
[temp_padstk]@
DE
[temp_labelstk]@
DE A
[temp_avg]

; close align doc
SD /      ROT_ANGLE      XSHIFT        YSHIFT
[doc_align_solution]
SD E
[doc_align_solution]

EN D

; Modified 2020-07-04
;    2020-07-04 (trs) -- Can specify outer radius
;    2012-09-30 (trs) -- Added options to align in real space
;    2012-09-26 (trs) -- Replaced obsolete OR 2 call with OR R
