head	1.17;
access;
symbols
	Pre_gold:1.3;
locks;
comment	@# @;


1.17
date	2020.06.25.14.42.28;	author leith;	state Exp;
branches;
next	1.16;

1.16
date	2016.07.07.14.42.56;	author leith;	state Exp;
branches;
next	1.15;

1.15
date	2016.07.05.18.52.48;	author leith;	state Exp;
branches;
next	1.14;

1.14
date	2016.07.05.14.46.28;	author leith;	state Exp;
branches;
next	1.13;

1.13
date	2016.07.05.14.42.51;	author leith;	state Exp;
branches;
next	1.12;

1.12
date	2016.06.02.15.16.23;	author leith;	state Exp;
branches;
next	1.11;

1.11
date	2016.06.02.13.56.16;	author leith;	state Exp;
branches;
next	1.10;

1.10
date	2016.05.31.18.32.41;	author leith;	state Exp;
branches;
next	1.9;

1.9
date	2016.03.25.16.17.40;	author leith;	state Exp;
branches;
next	1.8;

1.8
date	2016.03.24.15.48.42;	author leith;	state Exp;
branches;
next	1.7;

1.7
date	2016.03.21.16.27.58;	author leith;	state Exp;
branches;
next	1.6;

1.6
date	2016.03.17.14.17.41;	author leith;	state Exp;
branches;
next	1.5;

1.5
date	2016.03.08.20.03.42;	author leith;	state Exp;
branches;
next	1.4;

1.4
date	2016.03.01.20.25.21;	author leith;	state Exp;
branches;
next	1.3;

1.3
date	2013.12.13.15.32.39;	author leith;	state Exp;
branches;
next	1.2;

1.2
date	2013.11.08.19.25.56;	author leith;	state Exp;
branches;
next	1.1;

1.1
date	2012.05.23.02.53.31;	author tapu;	state Exp;
branches;
next	;


desc
@new file -- parallel, toplevel alignment batch file
@


1.17
log
@Removed PubSub support
@
text
@  ; <html><head><title>Controls parallel alignment </title></head><body><pre>
 ;
 ; SOURCE: spider/docs/techs/recon1/Procs/pub-align.spi   
 ;
 ; PURPOSE: Multi-reference alignment of an image series. 
 ;          Experimental images are aligned with reference projections via
 ;          shifts (translations) and rotations.  
 ;          FOR PROJECTS WITH MORE THAN ONE GROUP 
 ;
 ; USAGE:   clean ; ./spider spi/dat @@pub-align 0
 ;
 ; I/O Registers & files are set in: <a href="recon-settings.spi">recon-settings.spi</a>
 ;
 ; INPUT FILES: ([win_dir] denotes input directory, '***' denotes group,  '%' denotes subset)
 ;   [sel_group]           [win_dir]/sel_group        Group selection file           (one)
 ;   [sel_parts]           [win_dir]/sel_part_***     Group particle selection files (one/group)
 ;   [unaligned_images]    [win_dir]/data_***         Unaligned image stacks         (one/group)
 ;   [ref_projs]           [rec_dir]/projs_00         Reference projections          (one)
 ;
 ; OUTPUT FILES: ('[rec_dir] denotes reconstruction output directory)
 ;   [next_group_align_s]  [rec_dir]/align_01_***_s%  Alignment parameter doc files         (two/group)
 ;   [aligned_images]      [rec_dir]/dala_***@@        Rotationally aligned particle stacks  (two/group)
 ;   [finished_file]       jnk_sync_$$$$_***          Created when this parallel task is finished (one)
 ;
 ; PROCEDURES CALLED:
 ;   recon-settings        <a href="recon-settings.spi"> recon-settings.spi</a>
 ;   memforqsub (optional) <a href="memforqsub.spi">     memforqsub.spi</a>
 ;   pub_submit            <a href="pub_submit.spi">     pub_submit.spi</a>
 ;   .. qsub               <a href="qsub.pbs">           qsub.pbs</a>
 ;   .... align-loop       <a href="pub-align-loop.spi"> align-loop</a>          
 ;   ...... recon-settings <a href="recon-settings.spi"> recon-settings.spi</a>            
 ;
 ; -------------------------------- END BATCH HEADER ----------------------------

 MD
   TR OFF              ; Loop info turned off
 MD
   VB OFF              ; File info turned off
 MD
   SET MP              ; Use only a few processors on master node!!
   1 
 SYS
   echo

 ; Get reconstruction parameters & file names
 [steptype] = 0        ; Alignment step
 @@recon-settings([steptype],[num-grps],[pixsiz],[ang-step],[r2],[alignsh],[prj-radius],[winsiz],[incore-yn],[bp-type],[qsub])
 [iter] = 0

 ; Create directories for output and scratch files
 SYS                          
   mkdir -p  [rec_dir] [work_dir]
 
 ; Processes experimental images in parallel by groups of images.
 ; Find alignment parameters ('AP SHC') which best align experimental images with 
 ; projection images. 
 ; Rotate ('RT SF') original particle images using these rotational alignment parameters.

 [task]   = 4           ; Starts: spider @@align-loop for each group
 [script] = './spider $PRJEXT/$DATEXT @@align-loop '

 @@pub-submit([iter],[num-grps],[task],[qsub])
    [script]            ; Script that runs alignment parallel job

 SYS
   echo -en '  Alignment completed' ; date '+ TIME: %x  %X' ; echo

 EN

; </pre></body></html>

 

@


1.16
log
@steptype
@
text
@d29 1
a29 1
 ;   .. qsub/publish       <a href="qsub.pbs">           qsub.pbs</a>
@


1.15
log
@mkdir -p  [rec_dir]
@
text
@d46 2
a47 2
 @@recon-settings([num-grps],[pixsiz],[ang-step],[r2],[alignsh],[prj-radius],[winsiz],[incore-yn],[bp-type],[qsub])

@


1.14
log
@comments
@
text
@d52 1
a52 1
   mkdir -p  [out_dir] [work_dir]
@


1.13
log
@comments
@
text
@d15 1
@


1.12
log
@task = 4
@
text
@d14 4
a17 3
 ; INPUT FILES: ([win] denotes input directory, '***' denotes group,  '%' denotes subset)
 ;   [sel_parts]           [win]/sel_part_***     Group particle selection files (one/group)
 ;   [unaligned_images]    [win]/data_***         Unaligned image stacks         (one/group)
d19 4
a22 4
 ; OUTPUT FILES: ('[rec] denotes reconstruction output directory)
 ;   [next_group_align_s]  [rec]/align_01_***_s%  Alignment parameter doc files         (two/group)
 ;   [aligned_images]      [rec]/dala_***@@        Rotationally aligned particle stacks  (two/group)
 ;   [finished_file]       jnk_sync_$$$$_***      Created when this parallel task is finished (one)
@


1.11
log
@pub memforqsub in pub-submit
@
text
@d57 1
a57 1
 [task]   = 9          ; Starts: spider @@align-loop for each group
d61 1
a61 1
   [loopMem] [script]            ; Script that runs alignment parallel job
a67 11
; ----------------------------   UNUSED BELOW HERE ----------------------------

@@check-exist([exists1])
   [ref_images]             ; Image file  (input)
 ; If any file is missing, product of flags will be zero
 [iqfi-product] = [exists1]*[exists3]
 IF ( [iqfi-product] == 0) THEN
    SYS
       echo ; echo "Exiting" ; echo
    EN 
 ENDIF
@


1.10
log
@@@memforqsub use
@
text
@a45 7
 IF ( [qsub] > 1 ) THEN
   @@memforqsub([grp],[num-angs])
 ELSE
   GLO [prjMem] = ' ' 
   GLO [loopMem] = ' ' 
 ENDIF

@


1.9
log
@[rec]
@
text
@d25 1
d46 7
d68 1
a68 1
   [script]            ; Script that runs alignment parallel job
@


1.8
log
@header
@
text
@d18 3
a20 4
 ; OUTPUT FILES: ('[out] denotes output directory)
 ; OUTPUT FILES:
 ;   [next_group_align_s]  [out]/align_01_***_s%  Alignment parameter doc files         (two/group)
 ;   [aligned_images]      [out]/dala_***@@        Rotationally aligned particle stacks  (two/group)
@


1.7
log
@comments
@
text
@d14 3
a16 4
 ; INPUT FILES: (Where: '***' denotes group,  '%' denotes subset)
 ;   [params]              ../params                Parameter file                 (one)
 ;   [sel_parts]           ../input/sel_part_***    Group particle selection files (one/group)
 ;   [unaligned_images]    ../input/data_***        Unaligned image stacks         (one/group)
d18 1
d20 3
a22 3
 ;   [next_group_align_s]  ../out_1/align_01_***_s% Alignment parameter doc files        (two/group)
 ;   [aligned_images]      ../out_1/dala_***@@       Rotationally aligned particle stacks (two/group)
 ;   [finished_file]       jnk_sync_$$$$_***        Created when this parallel job is finished (one)
@


1.6
log
@comments, mkdir dir, task
@
text
@a31 1
 ; /usr14/spider/manjuli/data/ctfd/reference_volume
d54 1
a54 1
 ; optimal projection image. 
@


1.5
log
@generalized
@
text
@a13 5
 ; VARIABLE REGISTERS:
 ;   [r2]                  Alignment radius of object 
 ;   [alignsh]             Translation shift allowed is +-[alignsh]
 ;   [incore-yn]           Incore images used
 ;
d15 3
a17 3
 ;   [params]              ../params               Parameter file                 (one)
 ;   [sel_parts]           input/sel_part_***      Group particle selection files (one/group)
 ;   [unaligned_images]    input/data_ctfd_***     Unaligned image stacks         (one/group)
d20 3
a22 3
 ;   [next_group_align_s]  output/align_01_***_s%  Alignment parameter doc files        (two/group)
 ;   [aligned_images]      output/dala_***@@        Rotationally aligned particle stacks (two/group)
 ;   [finished_file]       jnk_sync_$$$$_***       Created when this parallel job is finished (one)
d25 5
a29 5
 ;   recon-settings        <a href="recon-settings.spi">     recon-settings.spi</a>
 ;   pub_submit            <a href="pub_submit.spi">         pub_submit.spi</a>
 ;   .. qsub/publish       <a href="qsub.pbs">               qsub.pbs</a>
 ;   .... align-loop       <a href="pub-align-loop.spi">     align-loop</a>          
 ;   ...... recon-settings <a href="recon-settings.spi">     recon-settings.spi</a>            
d32 1
d41 2
d46 1
d49 4
d58 1
a58 1
 [task]   = 0          ; Starts: spider @@align-loop for each group
@


1.4
log
@rewrite for gold
@
text
@d17 1
a20 1
 ;   [sel_group]           input/sel_group         Group selection file           (one)
d27 1
d30 5
a34 6
 ;    recon-settings            <a href="recon-settings.spi">     recon-settings.spi</a>
 ;    pub_submit                <a href="pub_submit.spi">         pub_submit.spi</a>
 ;    .. qsub/publish           <a href="qsub.pbs">               qsub.pbs</a>
 ;    .... pub-align-loop       <a href="pub-align-loop.spi">     pub-align-loop</a>          
 ;    ...... recon-settings     <a href="recon-settings.spi">     recon-settings.spi</a>            
 ;    ...... pub-ref-loop-clone <a href="pub-ref-loop-clone.spi"> pub-ref-loop-clone.spi</a>            
d39 1
a39 1
   TR OFF                  ; Loop info turned off
d41 1
a41 1
   VB OFF                  ; File info turned off
d43 1
a43 1
   SET MP                  ; Use only a few processors if using master node!!
d55 2
a56 2
 [task]   = 0              ; Starts: pub-align-loop for each group
 [script] = './spider $PRJEXT/$DATEXT @@pub-align-loop '
d59 1
a59 1
   [script]                ; Script that runs alignment parallel job
@


1.3
log
@Tapu's changes cosmetic
@
text
@d1 1
a1 1
 ; <html><head><title>Determine alignment parameters</title></head><body><pre>
d3 1
a3 1
 ; SOURCE: spider/docs/techs/recon1/Procs/align-pubsub.spi   
d6 1
a6 1
 ;          Sample images are aligned with reference projections via
d8 1
a8 1
 ;          FOR PROJECTS WITH ONE OR MORE GROUPS - WITH PUBSUB
d10 27
a36 4
 ; USAGE:   Start on PubSub master:
 ;          clean ; ./spider spi/dat @@align-pubsub 0
 
 ; --------------------- END BATCH HEADER ---------------------
a37 3
; Set parameter and file names
 @@align-settings([apply-yn],[shrange],[step],[r1],[r2],[apply-yn],[local-yn],[incore-yn],[max-wait])
 
d39 3
a41 1
   TR OFF                        ; Decrease results file output
d43 2
a44 1
   VB OFF                        ; Decrease results file output
d46 32
a77 2
 SYS                             ; Create output directory 
   mkdir -p [out_dir]
d79 1
a79 60
 ; Initialize counters
 [total-parts] = 0               ; Initialize # of particles
 [num-grps]    = 0               ; Initialize # of groups

 DO                              ; Loop through groups -----------------------------

   UD NEXT [key], [grp]          ; Get group number
     [sel_group]                 ; Group selection file     (input)
   IF ( [key] <= 0) EXIT

   [num-grps] = [num-grps] + 1   ; Increment # of groups

   ; For first group, check whether input files exist
   IF ( [num-grps] == 1 ) THEN

      @@check-exist([exists1])
        [ref_images]             ; Image file  (input)
      @@check-exist([exists2])
        [ref_image_angles]       ; Doc file  (input)
      @@check-exist([exists3])
        [unaligned_images][grp]  ; Image file  (input)

      ; If any file is missing, product of flags will be zero
      [iqfi-product] = [exists1]*[exists2]*[exists3]

      IF ( [iqfi-product] == 0) THEN
         SYS
            echo ; echo "Exiting" ; echo
         EN 
      ENDIF
   ENDIF

   ; Get # of particles
   UD N [grp-parts]
     [sel_particles][grp]         ; Doc file  (input)
    
   ; Increment total particle counter
    [total-parts] = [total-parts] + [grp-parts]

   SYS
      publish './spider spi/$DATEXT @@align-main {***[grp]} grp={***[grp]}'
   SYS

   IF ( [max-wait] > 0 ) THEN
     ; Wait for compute node copy to local disk to minimize competition
     IQ SYNC DEL  [wait-time]     ; Check file existance then delete it
       [wait_file][grp]           ; Flag file  (input)
       10 [max-wait]              ; Wait time
     SYS
        echo " Group: {%I3%[grp]}  Wait time: {%I5%[wait-time]} seconds"
   ENDIF

   MY FL                          ; Flush results file
 ENDDO                            ; End group-loop

 ; Wait for compute node completion
 [one] = 1
 [end] = [num-grps]
 @@wait-pub([one],[end])           ; Wait for compute node competition  
   [finished_file]                ; File created when finished (one/group)
a80 2
 EN 
 ; </pre></body></html>
@


1.2
log
@rewrite_syntax_filenames
@
text
@d13 3
a15 1
 ; Set parameter and file names
@


1.1
log
@Initial revision
@
text
@d1 44
a44 1
@@apsh-settings([doalign],[shrange],[step],[diam],[r1],[r2],[max-wait])
d46 2
a47 2
fr l
[temp_combined_apsh_incore]tmpcombinedapsh_incore
d49 2
a50 32
; initialize particle-counter
[total-parts] = 0

; get #groups
ud n [num-grps]
[group_list]

; loop through groups
do lb7 [grp-key]=1,[num-grps]
    ; get group#
    ud ic [grp-key], [grpnum]
    [group_list]

    ; for first group, check whether files exist
    if([grp-key].eq.1) then
        @@apsh-check([exists1])
        [params]

        @@apsh-check([exists2])
        [ref_images]

        @@apsh-check([exists3])
        [ref_images_angles]

        @@apsh-check([exists4])
        [unaligned_images]

        ; if any file is missing, product of flags will be zero
        [iqfi-product] = [exists1]*[exists2]*[exists3]*[exists4]

        if([iqfi-product].eq.0) then
            vm
d52 7
a58 12

            en d
        else
            vm
            echo "Input files OK"; echo

        endif
    endif

    ; get #particles
    ud n [grp-parts]
    [group_particle_list][grpnum]
d60 1
a60 1
    ; increment counter
d63 21
a83 2
    VM
    publish './spider spi/$DATEXT @@apsh-distribute {***[grpnum]} grpnum={***[grpnum]}'
d85 2
a86 76
    my fl
lb7
; end group-loop


; WAIT FOR ALL DEFOCUS GROUPS TO FINISH

my fl  ; flush results file

; initialize in-core doc file
sd ic new
[temp_combined_apsh_incore]
(15,[total-parts])

; loop through defocus-groups
DO LB2 [grp-rank]=1,[num-grps]
    ; get defocus-group#
    ud ic [grp-rank], [grp-num]
    [group_list]

   IQ SYNC
   [finished_flag]
   (10 3600000)

   MY FL

   VM
   echo "Group #{***[grp-num]} ({***[grp-rank]}th out of {***[num-grps]}) synced"
   DE
   [finished_flag]
   
   ; get #particles
    ud n [grp-parts]
    [group_particle_list][grp-num]
    
    ; loop through particles
    do lb5 [part-key] = 1,[grp-parts]

        ; read alignment doc
        ud ic [part-key], [psi],[theta],[phi],[prj],[grp-slice],[cum-psi],[cum-x],[cum-y],[numproj],[delta],[ccrot],[curr-psi],[curr-x],[curr-y],[mir]
        [align_parameters][grp-num]
        
        ; get global particle#
        ud ic [part-key], [mic-slice],[grp],[mic-num],[global-num]
        [group_particle_list][grp-num]
        
        ; write to combined alignment doc
        sd ic [global-num], [psi],[theta],[phi],[prj],[global-num],[cum-psi],[cum-x],[cum-y],[numproj],[delta],[ccrot],[curr-psi],[curr-x],[curr-y],[mir]
        [temp_combined_apsh_incore]   
    lb5
    
    ; close docs
    ud ice
    [align_parameters][grp-num]
    ud ice
    [group_particle_list][grp-num]
    sd ic copy
    [temp_combined_apsh_incore]
    [align_params_all]
    sd ic e
    [temp_combined_apsh_incore]
LB2
; end group-loop

ud ice  ; close
[group_list]

vm
echo ; echo "All groups done"; date

en 

; Modified 2012-04-10
;    2011-08-23 (trs) -- adapted from realign-pubsub.spi
;    2009-05-21 (trs) -- exits if selected input files not found
;    2008-04-11 (trs) -- adapted from JSL's pubsub_recon_start.bat
@
