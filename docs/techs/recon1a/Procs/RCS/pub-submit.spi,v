head	1.12;
access;
symbols;
locks; strict;
comment	@# @;


1.12
date	2020.06.25.14.45.05;	author leith;	state Exp;
branches;
next	1.11;

1.11
date	2016.06.02.16.49.04;	author leith;	state Exp;
branches;
next	1.10;

1.10
date	2016.05.31.18.32.09;	author leith;	state Exp;
branches;
next	1.9;

1.9
date	2016.03.25.14.02.24;	author leith;	state Exp;
branches;
next	1.8;

1.8
date	2016.03.24.15.48.00;	author leith;	state Exp;
branches;
next	1.7;

1.7
date	2016.02.24.17.12.17;	author leith;	state Exp;
branches;
next	1.6;

1.6
date	2016.02.19.15.46.24;	author leith;	state Exp;
branches;
next	1.5;

1.5
date	2016.02.19.15.37.58;	author leith;	state Exp;
branches;
next	1.4;

1.4
date	2016.02.19.15.36.00;	author leith;	state Exp;
branches;
next	1.3;

1.3
date	2016.02.19.15.23.50;	author leith;	state Exp;
branches;
next	1.2;

1.2
date	2016.02.19.14.59.39;	author leith;	state Exp;
branches;
next	1.1;

1.1
date	2016.02.09.20.31.23;	author leith;	state Exp;
branches;
next	;


desc
@@


1.12
log
@Removed PubSub support
@
text
@ ([iter],[num-grps],[task],[qsub])

 ; <html><head><title>Runs jobs on parallel cluster</title></head><body><pre>
 ;
 ; SOURCE: spider/docs/techs/recon1/Procs/pub-submit.spi    New   Jan 2016
 ;         
 ; PURPOSE: Procedure for starting job scripts on parallel cluster. 
 ;          Returns when all the jobs have successfully finished.
 ;
 ; INPUT REGISTERS:
 ;   [iter]                Current iteration
 ;   [num-grps]            Number of parallel groups 
 ;   [task]                Specifies task started by:  pub-refine-start
 ;   [qsub]                Specifies queing use (1 == PBS, 2 == PBS with memory limit)
 ;
 ; INPUT STRINGS:
 ;   ? Execution script ? [run1]  ; Script to be run by PBS
 ;
 ; OUTPUT FILES:  ('????' denotes sync number, and '***' denotes group)
 ;   [finished_file]       jnk_sync_????_***      Signals when subscriber job finishes  (one/group) Deleted
 ;   [wait_file]           jnk_wait_????_***      Signals when subscriber finishes copy (one/group) Deleted
 ;
 ; PROCEDURES CALLED:
 ;    qsub                  <a href="qsub.pbs">            qsub.pbs</a>
 ;    .. pub-refine-start   <a href="pub-refine-start.spi">pub-refine-start</a>          
 ;    ..... refine-settings <a href="refine-settings.spi"> refine-settings.spi</a>            
 ;    ..... refine-loop OR  <a href="refine-loop.spi">     refine-loop.spi</a>   OR          
 ;    ..... refine-smangloop<a href="refine-smangloop.spi">refine-smangloop.spi</a>            
 ;
 ; -------------------------------- END BATCH HEADER ----------------------------

 ; Temporary output file name for synchronization
 [finished_file] = 'jnk_sync_{****[rn]}_{***[grp]}'  ; Created when parallel segment finished (one/group)

 ; Set SPIDER command line  parameters
 [run2] = ' {%I0%[grp]} task={%I0%[task]} iter={%I0%[iter]} grp={%I0%[grp]} rn={****[rn]} pubsub=1'

 FR                        ; Read PBS script 
   ? PBS script ? [run1]

 ; Generate 4 digit random number for semi-unique SYNC file numbering
 [rn]   = int(ran(0.0)*9999)

 DO [grp] = 1,[num-grps]    ; Loop over all  groups  -----------------
   ; Publish task for each group. Usually will start: pub-refine-start
   ; pub-refine-start runs: run1 which depends on task

   IF ( [qsub] == 1 ) THEN 
     SYS                    ; Call qsub for PBS queing
       qsub -v run="[run1] [run2]" qsub.pbs 

   ELSE IF ( [qsub] == 2 ) THEN 
     ; Need memory estimate for PBS queing
     @@memforqsub([task],[grp],[num-angs],[incore-yn],[local-yn],[memMb])

     SYS                    ; Call qsub for PBS queing
       qsub -l mem={%i0%[memMb]}mb -v run="[run1] [run2]" qsub.pbs 
    
   ENDIF


   [max-wait] = 0           ; Copy to compute node delay time ZERO

   IF ( [max-wait] > 0 ) THEN
     ; Wait for compute node copy to local disk to minimize competition
     IQ SYNC DEL  [waited]  ; Check file existance then delete it
       [wait_file]          ; Flag file  (input)
       10 [max-wait]        ; Wait time
     SYS
        echo '  For local copy of group: {%I3%[grp]}  Waited: {%I5%[waited]} seconds'
   ENDIF

 ENDDO                      ; End of: Loop over all groups -----------


 ; Wait for all subscribers to finish this task (Previously in: pub-refine-wait)
 SYS
   echo -n "  Waiting for: [run1] Iteration: {%I0%[iter]}  Task={%I0%[task]} " ; date '+ TIME: %x %X' ; echo
 MY FL                      ; Flush results file

 DO [grp] = 1,[num-grps]    ; Loop for waiting for all  groups -------

   !SYS
     !echo "  Waiting for group {%I0%[grp]}  ([finished_file])"

   IQ SYNC DEL              ; Wait for file existence then delete it
     [finished_file]        ; Completion file             (deleted)
     10 3600000             ; Re-Check time, max time

   SYS
     echo -n "  Finished group: {%I0%[grp]} --- "; date '+ TIME: %x %X'
   MY FL                   ; Flush results file

 ENDDO                     ; End wait loop for all groups -------------

 RE
 ; </pre></body></html>


@


1.11
log
@@@memforqsub added
@
text
@d14 1
a14 1
 ;   [qsub]                Specifies queing use (1 == PBS, 0 == PubSub)
d17 1
a17 1
 ;   ? Execution script ? [run1]  ; Script to be run by PubSub or PBS
d24 1
a24 1
 ;    qsub/publish          <a href="qsub.pbs">            qsub.pbs</a>
d38 2
a39 2
 FR                        ; Read PBS/PubSub script 
   ? PubSub script ? [run1]
d48 1
a48 5
   IF ( [qsub] ==  0 ) THEN 
     SYS                    ; Call publish for PubSub queing
       publish [run1] [run2]
     
   ELSE IF ( [qsub] == 1 ) THEN 
d53 1
a53 1
     ; Need memory estimate for qsub 
@


1.10
log
@header comments only
@
text
@d55 8
a62 1
     
d64 1
@


1.9
log
@removed Waiting for msg
@
text
@d24 5
a28 5
 ;    qsub                   <a href="qsub.pbs">               qsub.pbs</a>    OR  
 ;    publish                <a href="publish.perl">           publish.perl</a>
 ;    .. pub-refine-start    <a href="pub-refine-start.spi">   pub-refine-start</a>          
 ;    ..... refine-settings  <a href="refine-settings.spi">    refine-settings.spi</a>            
 ;    ..... refine-???       <a href="refine-loop.spi">        refine-???.spi</a>            
@


1.8
log
@header
@
text
@d58 1
a58 1
   [max-wait] = 0            ; Copy to compute node delay time ZERO
d62 3
a64 3
     IQ SYNC DEL  [waited]   ; Check file existance then delete it
       [wait_file]           ; Flag file  (input)
       10 [max-wait]         ; Wait time
d69 1
a69 1
 ENDDO                       ; End of: Loop over all groups -----------
d79 2
a80 2
   SYS
     echo "  Waiting for group {%I0%[grp]}  ([finished_file])"
a87 1

@


1.7
log
@for recon gold
@
text
@d19 1
a19 3
 ; INPUT FILES: 
 ;
 ; OUTPUT FILES:  ('????' denotes tracking number, and '***' denotes group)
@


1.6
log
@cosmetic
@
text
@d7 2
a8 2
 ; PURPOSE: Procedure for starting job scripts on parallel cluster. Returns when all
 ;          the jobs have successfully finished.
d14 1
a14 1
 ;   [qsub]                Specifies que (1 == use PBS, 0 == use PubSub)
d22 2
a23 1
 ;   [finished_file]       jnk_sync_????_***      Temp file signals when subscriber job finishes (one/group) Deleted
d35 1
a35 1
 GLO [finished_file] = 'jnk_sync_{****[rn]}_{***[grp]}'  ; Created when parallel segment finished (one/group)
d37 1
a37 1
 ; SPIDER execution  parameters
d40 1
a40 1
 FR                         ; Read PBS/PubSub script 
d46 3
a48 3
DO [grp] = 1,[num-grps]    ; Loop over all  groups  -----------------
   ; Publish task for each group. Usually will start: 
   ;    pub-refine-start which runs: refine-???  depending on task
d59 14
a72 1
 ENDDO                      ; End of: Loop over all groups -----------
d76 2
a77 2
   echo -n "  Waiting for: [run1] Iteration: {%I0%[iter]}  Task={%I0%[task]} " ; date '+ TIME: %x  %X' ; echo
 MY FL                      ; Flush results
d85 1
a85 1
     [finished_file]        ; Sync file               (deleted)
d89 1
a89 1
     echo -n "  Finished group: {%I0%[grp]} --- "; date '+ TIME: %x  %X'
d92 1
@


1.5
log
@cosmetic & echo msg change
@
text
@d25 1
a38 3
 ; Temporary output file name for synchronization
 GLO [finished_file] = 'jnk_sync_{****[rn]}_{***[grp]}'  ; Created when parallel segment finished (one/group)

d45 3
a47 2
DO [grp] = 1,[num-grps]    ; Loop over all  groups  ---------------
   ; Publish task for each group. Will start: pub-refine-start which runs: refine-???  depending on task
d50 1
a50 2
     ; Use PubSub
     SYS
d54 1
a54 2
     ; Use qsub for PBS
     SYS
d58 1
a58 2

 ENDDO                      ; End of: Loop over all groups ---------
d65 1
a65 1
 DO [grp] = 1,[num-grps]    ; Loop over all  groups -----------------
d78 1
a78 1
 ENDDO                     ; End wait loop over groups -------------
@


1.4
log
@*** empty log message ***
@
text
@a56 3
     !WORKS:       qsub -v run="./spider spi/dat @@pub-refine-start 10 task=2 iter=1 grp=10 rn=8658 pubsub=1" qsub.pbs 
     !SYS echo qsub -v run="[run1] [run2]" qsub.pbs 

d66 1
a66 1
   echo -n "  Waiting for iteration: {%I0%[iter]}  task={%I0%[task]} " ; date '+ TIME: %x  %X' ; echo
@


1.3
log
@PBS support , msgs altered
@
text
@a51 1

@


1.2
log
@wait msg changed
@
text
@d1 1
a1 1
 ([iter],[num-grps],[task])
d3 1
a3 1
 ; <html><head><title>Runs jobs on PubSub parallel cluster</title></head><body><pre>
d5 1
a5 1
 ; SOURCE: spider/docs/techs/recon1/Procs/gold/pub-submit.spi    New   Jan 2016
d14 1
d17 1
a17 1
 ;   ? PubSub script ? [pubstr]    ; Script to be run by PubSub or PBS
d35 8
a42 2
 FR                         ; Read PubSub script 
   ? PubSub script ? [pubstr]
d47 1
a47 1
 DO [grp] = 1,[num-grps]    ; Loop over all  groups  ---------------
d49 16
a64 2
   SYS
     [pubstr] {%I0%[grp]} task={%I0%[task]} iter={%I0%[iter]} grp={%I0%[grp]} rn={****[rn]} pubsub=1  
a67 1

d76 1
a76 1
     echo "  Waiting for: [finished_file]     For group: {%I0%[grp]}"
d83 1
a83 1
     echo -n "  Synced group: {%I0%[grp]} --- "; date '+ TIME: %x  %X'
@


1.1
log
@Gold_standard
@
text
@d56 1
a56 1
     echo "  Waiting for group {%I0%[grp]}  ([finished_file])"
d63 1
a63 1
     echo -n "  Finished group: {%I0%[grp]} --- "; date '+ TIME: %x  %X'
@
