head	1.13;
access;
symbols
	pre_mrcs:1.12
	healthdept_2018:1.12
	pre_getangas:1.11
	GPL2010:1.11
	pre_GPL2010:1.10
	pre_var_equation:1.10
	pre_fftwrings:1.9
	pre_opfiles:1.9
	src:1.9
	best-code:1.7
	named-reg:1.7
	x-named-regs:1.6
	x:1.6
	v13-00:1.6
	pre_GPL:1.4
	prec_CA:1.4
	noindx:1.4
	Bproc:1.4
	oct21:1.1
	last77:1.1;
locks; strict;
comment	@c @;


1.13
date	2020.02.06.15.19.41;	author leith;	state Exp;
branches;
next	1.12;

1.12
date	2018.10.03.14.33.55;	author leith;	state Exp;
branches;
next	1.11;

1.11
date	2010.06.24.13.25.05;	author leith;	state Exp;
branches;
next	1.10;

1.10
date	2009.03.03.18.34.21;	author leith;	state Exp;
branches;
next	1.9;

1.9
date	2006.07.20.18.23.55;	author leith;	state Exp;
branches;
next	1.8;

1.8
date	2006.07.20.18.18.01;	author leith;	state Exp;
branches;
next	1.7;

1.7
date	2005.12.12.15.26.12;	author leith;	state Exp;
branches;
next	1.6;

1.6
date	2005.10.17.20.28.55;	author leith;	state Exp;
branches;
next	1.5;

1.5
date	2005.10.17.18.20.18;	author leith;	state Exp;
branches;
next	1.4;

1.4
date	2000.08.17.15.59.21;	author leith;	state Exp;
branches;
next	1.3;

1.3
date	2000.08.10.14.57.30;	author leith;	state Exp;
branches;
next	1.2;

1.2
date	99.11.10.23.09.07;	author yuchen;	state Exp;
branches;
next	1.1;

1.1
date	98.06.01.13.11.48;	author leith;	state Exp;
branches;
next	;


desc
@arithmetic if
@


1.13
log
@== EXTRACTED PART FROM UTIL2
@
text
@C++*********************************************************************
C
C ARITHL.F   MODIFIED FOR LOGICAL OPERATIONS    MAY   98  ArDean Leith
C            POLISH PARAMETERS                  DEC 2005  ArDean Leith
C            I REG BUG                          JUL 2006  ArDean Leith
C            EXTRACTED PART FROM UTIL2          JAN 2020  ArDean Leith
C
C **********************************************************************
C=*                                                                    *
C=* This file is part of:   SPIDER - Modular Image Processing System.  *
C=* SPIDER System Authors:  Joachim Frank & ArDean Leith               *
C=* Copyright 1985-2020  Health Research Inc.,                         *
C=* Riverview Center, 150 Broadway, Suite 560, Menands, NY 12204.      *
C=* Email: spider@@health.ny.gov                                        *
C=*                                                                    *
C=* SPIDER is free software; you can redistribute it and/or            *
C=* modify it under the terms of the GNU General Public License as     *
C=* published by the Free Software Foundation; either version 2 of the *
C=* License, or (at your option) any later version.                    *
C=*                                                                    *
C=* SPIDER is distributed in the hope that it will be useful,          *
C=* but WITHOUT ANY WARRANTY; without even the implied warranty of     *
C=* merchantability or fitness for a particular purpose.  See the GNU  *
C=* General Public License for more details.                           *
C=* You should have received a copy of the GNU General Public License  *
C=* along with this program. If not, see <http://www.gnu.org/licenses> *
C=*                                                                    *
C **********************************************************************
C
C   ARITHL()
C
C   PURPOSE:  CARRIES OUT ARITHMATIC OPERATION ON IMAGE PIXEL BY PIXEL
C             LOGICAL EXPRESSIONS SUPPORTED
C
C--********************************************************************

      SUBROUTINE ARITHL()

      IMPLICIT NONE

      INCLUDE 'CMBLOCK.INC'
      INCLUDE 'CMLIMIT.INC'
 
      REAL        :: BUF
      COMMON /IOBUF/ BUF(NBUFSIZ)         ! NBUFSIZ FROM CMLIMITS.INC
      INTEGER             :: ILIST(NIMAX) ! NIMAX   FROM CMLIMITS.INC

      INTEGER, PARAMETER  :: IVALEN  = 40
      INTEGER, PARAMETER  :: IRPNLEN = 80

      INTEGER  :: IRPNIF1(IRPNLEN),IRPNIF2(IRPNLEN),IRPNIF3(IRPNLEN),
     &            IRPNEI1(IRPNLEN),IRPNEI2(IRPNLEN),IRPNEI3(IRPNLEN),
     &            IRPNEL1(IRPNLEN)

      REAL     :: VALIF1(IVALEN),  VALIF2(IVALEN),  VALIF3(IVALEN),
     &            VALEI1(IVALEN),  VALEI2(IVALEN),  VALEI3(IVALEN),
     &            VALEL1(IVALEN) 

      CHARACTER(LEN=MAXNAM) :: EXPR1,EXPR2,EXPR3
      CHARACTER(LEN=MAXNAM) :: FILNAM1,FILNAM2
      CHARACTER(LEN=1)      :: NULL = CHAR(0)

      INTEGER               :: NX,NY,NZ,NDUM,ICOMPIF,ICOMPEI
      INTEGER               :: NRPNIF1,NRPNIF2,NRPNIF3
      INTEGER               :: NRPNEI1,NRPNEI2,NRPNEI3
      INTEGER               :: NRPNEL1,NRPNEL2,NRPNEL3
      INTEGER               :: IRTFLG,ITYPE,MAXIM1,MAXIM2
      INTEGER               :: NLET1,NLET2,NLET3,IROW,IGO
      INTEGER               :: ISL,I,K,NVALEL,IOFF
        
      INTEGER, PARAMETER    :: LUN1 = 21
      INTEGER, PARAMETER    :: LUN2 = 22

      REAL                  :: A,B,C

   
C     OPEN INPUT FILE,  BARE STACK NOT OK 
14    CALL OPFILEC(0,.TRUE.,FILNAM1,LUN1,'O',ITYPE,
     &               NX,NY,NZ,
     &               MAXIM1,'INPUT',.TRUE.,IRTFLG)
      IF (IRTFLG .NE. 0) RETURN

C     OPEN OUTPUT FILE
      CALL OPFILEC(LUN1,.TRUE.,FILNAM2,LUN2,'U',ITYPE,
     &             NX,NY,NZ,
     &             MAXIM2,'OUTPUT',.TRUE.,IRTFLG)
      IF (IRTFLG .NE. 0) GOTO 9000

10    CALL RDPRMC(EXPR1,NLET1,.TRUE.,
     &    'IF (...) THEN P2=f(P1)',NULL,IRTFLG)
      IF (IRTFLG .NE. 0) RETURN
      IF (NLET1 <= 0 .OR. INDEX(EXPR1,'THEN') <= 0) THEN
          CALL ERRT(101,'NO -IF THEN- CLAUSE ENTERED',NDUM)
          RETURN
      ENDIF

C     CONVERT IF-THEN EXPRESSION FORMULAS TO RPN NOTATION 
      IF (NLET1 > 0) THEN      
         CALL IFTORPN(EXPR1,ICOMPIF,
     &      IRPNIF1,NRPNIF1,VALIF1,
     &      IRPNIF2,NRPNIF2,VALIF2, 
     &      IRPNIF3,NRPNIF3,VALIF3,
     &      IRTFLG)
         IF (IRTFLG .NE. 0) RETURN
      ENDIF

20    CALL RDPRMC(EXPR2,NLET2,.TRUE.,
     &    'ELSE IF (...) THEN P2=f(P1)',NULL,IRTFLG)
      IF (IRTFLG  ==  -1) GOTO 10
      IF (IRTFLG .NE. 0) RETURN
      IF (NLET2 > 0 .AND. INDEX(EXPR1,'THEN') <= 0) THEN
          CALL ERRT(101,'ILLEGAL -ELSE IF THEN- CLAUSE ENTERED',NDUM)
          RETURN
      ENDIF

C     CONVERT ELSE-IF-THEN EXPRESSION FORMULAS TO RPN NOTATION 
      IF (NLET2 > 0) THEN      
         CALL IFTORPN(EXPR2,ICOMPEI,
     &      IRPNEI1,NRPNEI1,VALEI1,
     &      IRPNEI2,NRPNEI2,VALEI2, 
     &      IRPNEI3,NRPNEI3,VALEI3,
     &      IRTFLG)
         IF (IRTFLG .NE. 0) RETURN
      ENDIF

30    CALL RDPRMC(EXPR3,NLET3,.TRUE., 'ELSE FORMULA',NULL,IRTFLG)
      IF (IRTFLG  ==  -1) GOTO 20
      IF (IRTFLG .NE. 0) RETURN

C     CONVERT ELSE EXPRESSION FORMULA TO RPN NOTATION 
      IGO = INDEX(EXPR3,'=') + 1
      CALL POLISH(0,EXPR3(IGO:),NLET3-IGO+1,IRPNEL1,NRPNEL1,VALEL1,
     &            NVALEL,IRTFLG)
      IF (IRTFLG .NE. 0) RETURN

      DO  ISL=1,NZ
        IOFF = (ISL-1) * NY

        DO  I = 1,NY
           IROW = IOFF + I
           CALL REDLIN(LUN1,BUF,NX,IROW)

           DO  K = 1,NX
              CALL REG_SET_NSEL(1,3,FLOAT(K),FLOAT(I),FLOAT(ISL),
     &                          0.0,0.0,IRTFLG)
              IF (NLET1 > 0) THEN
	         CALL CALC(IRPNIF1,NRPNIF1,VALIF1,BUF(K),A,IRTFLG)
	         CALL CALC(IRPNIF2,NRPNIF2,VALIF2,BUF(K),B,IRTFLG)

                 IF (A < B) THEN
                    IF (ICOMPIF == 3 .OR. ICOMPIF == 4 .OR. 
     &                  ICOMPIF == 6) THEN
                       CALL CALC(IRPNIF3,NRPNIF3,VALIF3,BUF(K),C,IRTFLG)                    
                       BUF(K) = C
                       CYCLE
                    ENDIF
                 ELSEIF (A  ==  B) THEN
                    IF (ICOMPIF == 1 .OR. ICOMPIF == 2) THEN
                       CALL CALC(IRPNIF3,NRPNIF3,VALIF3,BUF(K),C,IRTFLG)                    
                       BUF(K) = C
                       CYCLE
                    ENDIF
                 ELSE
                    IF (ICOMPIF == 5) THEN
                       CALL CALC(IRPNIF3,NRPNIF3,VALIF3,BUF(K),C,IRTFLG)                    
                       BUF(K) = C
                       CYCLE
                    ENDIF
                 ENDIF
              ENDIF

              IF (NLET2 > 0) THEN
	         CALL CALC(IRPNEI1,NRPNEI1,VALEI1,BUF(K),A,IRTFLG)
	         CALL CALC(IRPNEI2,NRPNEI2,VALEI2,BUF(K),B,IRTFLG)

                 IF (A < B) THEN
                    IF (ICOMPEI == 3 .OR. 
     &                  ICOMPEI == 4 .OR. 
     &                  ICOMPEI == 6) THEN
                       CALL CALC(IRPNEI3,NRPNEI3,VALEI3,BUF(K),C,IRTFLG)                    
                       BUF(K) = C
                       CYCLE
                    ENDIF
                 ELSEIF (A  ==  B) THEN
                    IF (ICOMPEI == 1 .OR. ICOMPEI == 2) THEN
                       CALL CALC(IRPNEI3,NRPNEI3,VALEI3,BUF(K),C,IRTFLG)                    
                       BUF(K) = C
                       CYCLE
                    ENDIF
                 ELSE
                    IF (ICOMPEI == 5) THEN
                       CALL CALC(IRPNEI3,NRPNEI3,VALEI3,BUF(K),C,IRTFLG)                    
                       BUF(K) = C
                       CYCLE
                    ENDIF
                 ENDIF
              ENDIF

              IF (NLET3 > 0) THEN
	         CALL CALC(IRPNEL1,NRPNEL1,VALEL1,BUF(K),C,IRTFLG)
                 BUF(K) = C
                 CYCLE
              ENDIF
	   ENDDO

           CALL WRTLIN(LUN2,BUF,NX,IROW)
        ENDDO
      ENDDO

9000  CLOSE(LUN1)
      CLOSE(LUN2)

      END



@


1.12
log
@email_health_dept
@
text
@d3 4
a6 3
C   ARITHL.F   MODIFIED FOR LOGICAL OPERATIONS         MAY   98 al
C              POLISH PARAMETERS                       DEC 2005 AL
C              I REG BUG                               JUL 2006 AL
d12 1
a12 1
C=* Copyright 1985-2010  Health Research Inc.,                         *
d30 1
a30 1
C   ARITHL(LUN1,LUN2,NSAM,NROW,NSLICE)
d35 3
a37 7
C   PARAMETERS:
C        LUN1         LOGICAL UNIT NUMBER OF FILE 1
C        LUN2         LOGICAL UNIT NUMBER OF FILE 2
C        NSAM,NROW    X & Y DIMENSIONS OF FILES
C        NSLICE       Z DIMENSION2 OF FILES
C
C--*******************************************************************
d39 1
a39 1
      SUBROUTINE ARITHL(LUN1,LUN2,NSAM,NROW,NSLICE)
d42 1
d44 38
d83 5
a87 5
      PARAMETER      (IVALEN = 40)
      PARAMETER      (IRPNLEN = 80)

      CHARACTER *80  EXPR1,EXPR2,EXPR3
      CHARACTER*1    NULL
a88 11
      COMMON         IRPNIF1(IRPNLEN),IRPNIF2(IRPNLEN),IRPNIF3(IRPNLEN),
     &               IRPNEI1(IRPNLEN),IRPNEI2(IRPNLEN),IRPNEI3(IRPNLEN),
     &               IRPNEL1(IRPNLEN),
     &               VALIF1(IVALEN),  VALIF2(IVALEN),  VALIF3(IVALEN),
     &               VALEI1(IVALEN),  VALEI2(IVALEN),  VALEI3(IVALEN),
     &               VALEL1(IVALEN),  BUF(1) 

      COMMON /COMMUN/ ILIST(200)

      NULL = CHAR(0)
      
d92 2
a93 2
      IF (NLET1 .LE. 0 .OR. INDEX(EXPR1,'THEN') .LE. 0) THEN
          CALL ERRT(101,'NO -IF THEN- CLAUSE ENTERED',NE)
d98 1
a98 1
      IF (NLET1 .GT. 0) THEN      
d109 1
a109 1
      IF (IRTFLG .EQ. -1) GOTO 10
d111 2
a112 2
      IF (NLET2 .GT. 0 .AND. INDEX(EXPR1,'THEN') .LE. 0) THEN
          CALL ERRT(101,'ILLEGAL -ELSE IF THEN- CLAUSE ENTERED',NE)
d117 1
a117 1
      IF (NLET2 .GT. 0) THEN      
d127 1
a127 1
      IF (IRTFLG .EQ. -1) GOTO 20
d136 2
a137 2
      DO  ISL=1,NSLICE
        IOFF = (ISL-1) * NROW
d139 1
a139 1
        DO  I = 1,NROW
d141 1
a141 1
           CALL REDLIN(LUN1,BUF,NSAM,IROW)
d143 1
a143 1
           DO  K = 1,NSAM
d146 1
a146 1
              IF (NLET1 .GT. 0) THEN
d150 3
a152 3
                 IF (A .LT. B) THEN
                    IF (ICOMPIF.EQ.3 .OR. ICOMPIF.EQ.4 .OR. 
     &                  ICOMPIF.EQ.6) THEN
d157 2
a158 2
                 ELSEIF (A .EQ. B) THEN
                    IF (ICOMPIF.EQ.1 .OR. ICOMPIF.EQ.2) THEN
d164 1
a164 1
                    IF (ICOMPIF.EQ.5) THEN
d172 1
a172 1
              IF (NLET2 .GT. 0) THEN
d176 4
a179 3
                 IF (A .LT. B) THEN
                    IF (ICOMPEI.EQ.3 .OR. ICOMPEI.EQ.4 .OR. 
     &                  ICOMPEI.EQ.6) THEN
d184 2
a185 2
                 ELSEIF (A .EQ. B) THEN
                    IF (ICOMPEI.EQ.1 .OR. ICOMPEI.EQ.2) THEN
d191 1
a191 1
                    IF (ICOMPEI.EQ.5) THEN
d199 1
a199 1
              IF (NLET3 .GT. 0) THEN
d206 1
a206 1
           CALL WRTLIN(LUN2,BUF,NSAM,IROW)
d210 3
a212 1
      RETURN
@


1.11
log
@GPL_2010
@
text
@d13 1
a13 1
C=* Email: spider@@wadsworth.org                                        *
@


1.10
log
@calc(.... buf(k),buf(k)) --> C
@
text
@a7 2
C=* FROM: SPIDER - MODULAR IMAGE PROCESSING SYSTEM.   AUTHOR: J.FRANK  *
C=* Copyright (C) 1985-2005  Health Research Inc.                      *
d9 5
a13 2
C=* HEALTH RESEARCH INCORPORATED (HRI),                                *   
C=* ONE UNIVERSITY PLACE, RENSSELAER, NY 12144-3455.                   *
d15 1
a15 3
C=* Email:  spider@@wadsworth.org                                       *
C=*                                                                    *
C=* This program is free software; you can redistribute it and/or      *
d20 1
a20 1
C=* This program is distributed in the hope that it will be useful,    *
d22 1
a22 1
C=* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU  *
a23 1
C=*                                                                    *
d25 1
a25 3
C=* along with this program; if not, write to the                      *
C=* Free Software Foundation, Inc.,                                    *
C=* 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.      *
@


1.9
log
@x & y inverted bug
@
text
@d134 1
a134 1
                       GOTO 100
d140 1
a140 1
                       GOTO 100
d146 1
a146 1
                       GOTO 100
d160 1
a160 1
                       GOTO 100
d166 1
a166 1
                       GOTO 100
d172 1
a172 1
                       GOTO 100
d178 3
a180 2
	         CALL CALC(IRPNEL1,NRPNEL1,VALEL1,BUF(K),BUF(K),IRTFLG)
                 GOTO 100
a181 2

100           CONTINUE
@


1.8
log
@I x11 reg bug
@
text
@a116 1
C       IF (NSEL(3) .GE. 11) PARAM(NSEL(3)) = ISL
a118 1
C          IF (NSEL(2) .GE. 11) PARAM(NSEL(2)) = I
d123 1
a123 2
C             IF (NSEL(1) .GE. 11) PARAM(NSEL(1)) = K
              CALL REG_SET_NSEL(1,3,FLOAT(I),FLOAT(K),FLOAT(ISL),
@


1.7
log
@native named registers
@
text
@d5 1
d126 1
a126 1
              CALL REG_SET_NSEL(1,3,FLOAT(ISL),FLOAT(K),FLOAT(ISL),
@


1.6
log
@GPL License fixed
@
text
@d3 2
a4 1
C   ARITHL.F                   MODIFIED FOR LOGICAL OPERATIONS MAY 98 al
d110 1
a110 1
      CALL POLISH(EXPR3(IGO:),NLET3-IGO+1,IRPNEL1,NRPNEL1,VALEL1,
@


1.5
log
@HRI GPL License used
@
text
@a1 1
C++*************************************************************************
a5 2
C * SPIDER - MODULAR IMAGE PROCESSING SYSTEM.    AUTHOR: J.FRANK      **
C *  SPIDER - MODULAR IMAGE PROCESSING SYSTEM.    AUTHOR: J.FRANK      *
d9 1
a9 1
C=* HEALTH RESEARCH INCORPORATED (HRI),                                *  
a28 6

C *  COPYRIGHT (C)1985, 1996 HEALTH RESEARCH INCORPORATED, ALBANY, NY. *
C * THE CONTENTS OF THIS DOCUMENT ARE PROPRIETARY TO HEALTH            *
C * RESEARCH INC. AND ARE NOT TO BE DISCLOSED TO OTHERS OR USED        *
C * FOR PURPOSES OTHER THAN INTENDED WITHOUT WRITTEN APPROVAL OF       *
C * HEALTH RESEARCH INC.                                               *
@


1.4
log
@reg_set_nsel params changed
@
text
@d1 1
d7 1
d9 24
@


1.3
log
@used reg_set
@
text
@d107 1
a107 1
              CALL REG_SET_NSEL(1,FLOAT(ISL),FLOAT(K),FLOAT(ISL),
@


1.2
log
@a
@
text
@d30 1
a31 1

d45 2
d98 2
a99 1
        IF (NSEL(3) .GE. 11) PARAM(NSEL(3)) = ISL
d101 1
a101 1
           IF (NSEL(2) .GE. 11) PARAM(NSEL(2)) = I
d106 3
a108 1
              IF (NSEL(1) .GE. 11) PARAM(NSEL(1)) = K
@


1.1
log
@Initial revision
@
text
@d30 1
a30 1
CNO_SAVE
@
