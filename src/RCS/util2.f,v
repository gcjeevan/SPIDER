head	1.183;
access;
symbols
	pre_mrcs:1.178
	healthdept_2018:1.178
	pre_getangas:1.157
	GPL2010:1.152
	pre_GPL2010:1.151
	pre_var_equation:1.151
	pre_fftwrings:1.150
	pre_opfiles:1.149
	src:1.149
	best-code:1.145
	x-named-regs:1.145
	x:1.145
	v13-00:1.144
	pre_GPL:1.142
	prec_CA:1.130
	noindx:1.116
	Bproc:1.69
	oct21:1.60
	last77:1.53;
locks; strict;
comment	@c @;


1.183
date	2020.02.24.17.00.49;	author leith;	state Exp;
branches;
next	1.182;

1.182
date	2020.02.06.15.21.44;	author leith;	state Exp;
branches;
next	1.181;

1.181
date	2019.11.20.16.54.36;	author leith;	state Exp;
branches;
next	1.180;

1.180
date	2019.11.14.20.13.13;	author leith;	state Exp;
branches;
next	1.179;

1.179
date	2019.11.04.17.35.09;	author leith;	state Exp;
branches;
next	1.178;

1.178
date	2018.10.03.14.51.08;	author leith;	state Exp;
branches;
next	1.177;

1.177
date	2018.06.13.16.17.54;	author leith;	state Exp;
branches;
next	1.176;

1.176
date	2015.01.05.19.23.56;	author leith;	state Exp;
branches;
next	1.175;

1.175
date	2014.12.05.14.15.05;	author leith;	state Exp;
branches;
next	1.174;

1.174
date	2014.02.11.15.49.02;	author leith;	state Exp;
branches;
next	1.173;

1.173
date	2014.01.12.19.02.47;	author leith;	state Exp;
branches;
next	1.172;

1.172
date	2014.01.09.15.54.28;	author leith;	state Exp;
branches;
next	1.171;

1.171
date	2013.05.01.15.27.25;	author leith;	state Exp;
branches;
next	1.170;

1.170
date	2013.04.25.16.27.21;	author leith;	state Exp;
branches;
next	1.169;

1.169
date	2012.11.05.16.23.42;	author leith;	state Exp;
branches;
next	1.168;

1.168
date	2012.11.01.19.22.38;	author leith;	state Exp;
branches;
next	1.167;

1.167
date	2012.11.01.18.56.02;	author leith;	state Exp;
branches;
next	1.166;

1.166
date	2012.10.10.14.50.25;	author leith;	state Exp;
branches;
next	1.165;

1.165
date	2012.09.28.13.32.11;	author leith;	state Exp;
branches;
next	1.164;

1.164
date	2012.03.14.14.53.59;	author leith;	state Exp;
branches;
next	1.163;

1.163
date	2011.11.03.14.58.04;	author leith;	state Exp;
branches;
next	1.162;

1.162
date	2011.09.28.16.35.26;	author leith;	state Exp;
branches;
next	1.161;

1.161
date	2011.07.29.18.22.58;	author leith;	state Exp;
branches;
next	1.160;

1.160
date	2011.07.27.16.06.31;	author leith;	state Exp;
branches;
next	1.159;

1.159
date	2011.06.17.18.38.12;	author leith;	state Exp;
branches;
next	1.158;

1.158
date	2011.05.24.17.29.53;	author leith;	state Exp;
branches;
next	1.157;

1.157
date	2011.01.03.16.57.53;	author leith;	state Exp;
branches;
next	1.156;

1.156
date	2010.11.24.17.31.16;	author leith;	state Exp;
branches;
next	1.155;

1.155
date	2010.11.24.16.23.23;	author leith;	state Exp;
branches;
next	1.154;

1.154
date	2010.11.24.16.17.41;	author leith;	state Exp;
branches;
next	1.153;

1.153
date	2010.11.24.15.10.31;	author leith;	state Exp;
branches;
next	1.152;

1.152
date	2010.06.24.13.27.12;	author leith;	state Exp;
branches;
next	1.151;

1.151
date	2009.05.22.10.56.32;	author leith;	state Exp;
branches;
next	1.150;

1.150
date	2007.03.07.16.35.00;	author leith;	state Exp;
branches;
next	1.149;

1.149
date	2006.11.22.16.43.28;	author leith;	state Exp;
branches;
next	1.148;

1.148
date	2006.10.19.15.41.40;	author leith;	state Exp;
branches;
next	1.147;

1.147
date	2006.04.06.17.22.14;	author leith;	state Exp;
branches;
next	1.146;

1.146
date	2006.03.30.16.30.13;	author leith;	state Exp;
branches;
next	1.145;

1.145
date	2005.12.07.21.24.02;	author leith;	state Exp;
branches;
next	1.144;

1.144
date	2005.10.17.20.50.43;	author leith;	state Exp;
branches;
next	1.143;

1.143
date	2005.10.17.18.41.08;	author leith;	state Exp;
branches;
next	1.142;

1.142
date	2005.06.23.19.50.17;	author leith;	state Exp;
branches;
next	1.141;

1.141
date	2005.04.06.20.12.41;	author leith;	state Exp;
branches;
next	1.140;

1.140
date	2004.11.19.22.26.13;	author cyang;	state Exp;
branches;
next	1.139;

1.139
date	2004.11.19.18.39.47;	author leith;	state Exp;
branches;
next	1.138;

1.138
date	2004.09.30.16.29.11;	author leith;	state Exp;
branches;
next	1.137;

1.137
date	2004.08.09.13.02.20;	author leith;	state Exp;
branches;
next	1.136;

1.136
date	2004.07.13.15.31.45;	author leith;	state Exp;
branches;
next	1.135;

1.135
date	2004.05.13.16.32.46;	author leith;	state Exp;
branches;
next	1.134;

1.134
date	2004.03.26.14.55.11;	author leith;	state Exp;
branches;
next	1.133;

1.133
date	2003.11.21.18.42.44;	author leith;	state Exp;
branches;
next	1.132;

1.132
date	2003.10.31.16.04.06;	author leith;	state Exp;
branches;
next	1.131;

1.131
date	2003.10.24.19.47.58;	author leith;	state Exp;
branches;
next	1.130;

1.130
date	2003.09.18.17.56.29;	author leith;	state Exp;
branches;
next	1.129;

1.129
date	2003.09.08.15.40.28;	author leith;	state Exp;
branches;
next	1.128;

1.128
date	2003.09.05.18.49.51;	author leith;	state Exp;
branches;
next	1.127;

1.127
date	2003.08.04.18.36.58;	author leith;	state Exp;
branches;
next	1.126;

1.126
date	2003.08.04.18.25.11;	author leith;	state Exp;
branches;
next	1.125;

1.125
date	2003.05.30.19.19.45;	author leith;	state Exp;
branches;
next	1.124;

1.124
date	2003.05.08.20.33.50;	author leith;	state Exp;
branches;
next	1.123;

1.123
date	2003.05.08.15.19.18;	author leith;	state Exp;
branches;
next	1.122;

1.122
date	2003.04.24.16.27.24;	author leith;	state Exp;
branches;
next	1.121;

1.121
date	2003.04.21.13.32.58;	author leith;	state Exp;
branches;
next	1.120;

1.120
date	2003.03.26.15.39.48;	author leith;	state Exp;
branches;
next	1.119;

1.119
date	2003.03.24.21.27.10;	author leith;	state Exp;
branches;
next	1.118;

1.118
date	2003.03.17.18.33.51;	author bimal;	state Exp;
branches;
next	1.117;

1.117
date	2003.02.18.19.02.04;	author leith;	state Exp;
branches;
next	1.116;

1.116
date	2003.01.17.17.29.32;	author leith;	state Exp;
branches;
next	1.115;

1.115
date	2003.01.17.17.26.17;	author leith;	state Exp;
branches;
next	1.114;

1.114
date	2003.01.17.17.22.13;	author leith;	state Exp;
branches;
next	1.113;

1.113
date	2003.01.02.14.25.32;	author leith;	state Exp;
branches;
next	1.112;

1.112
date	2002.11.22.18.40.00;	author leith;	state Exp;
branches;
next	1.111;

1.111
date	2002.11.19.16.16.04;	author leith;	state Exp;
branches;
next	1.110;

1.110
date	2002.11.19.15.33.40;	author leith;	state Exp;
branches;
next	1.109;

1.109
date	2002.11.19.15.13.27;	author leith;	state Exp;
branches;
next	1.108;

1.108
date	2002.10.18.15.14.05;	author leith;	state Exp;
branches;
next	1.107;

1.107
date	2002.10.15.19.49.02;	author leith;	state Exp;
branches;
next	1.106;

1.106
date	2002.10.04.14.13.43;	author leith;	state Exp;
branches;
next	1.105;

1.105
date	2002.10.04.13.27.55;	author leith;	state Exp;
branches;
next	1.104;

1.104
date	2002.09.13.12.59.52;	author leith;	state Exp;
branches;
next	1.103;

1.103
date	2002.09.12.20.05.44;	author leith;	state Exp;
branches;
next	1.102;

1.102
date	2002.09.10.19.03.12;	author leith;	state Exp;
branches;
next	1.101;

1.101
date	2002.09.09.14.20.37;	author leith;	state Exp;
branches;
next	1.100;

1.100
date	2002.09.09.13.56.03;	author leith;	state Exp;
branches;
next	1.99;

1.99
date	2002.09.09.13.45.03;	author leith;	state Exp;
branches;
next	1.98;

1.98
date	2002.09.04.17.50.42;	author leith;	state Exp;
branches;
next	1.97;

1.97
date	2002.08.21.20.17.49;	author leith;	state Exp;
branches;
next	1.96;

1.96
date	2002.08.07.15.44.32;	author leith;	state Exp;
branches;
next	1.95;

1.95
date	2002.04.18.20.24.35;	author leith;	state Exp;
branches;
next	1.94;

1.94
date	2002.04.09.15.01.13;	author leith;	state Exp;
branches;
next	1.93;

1.93
date	2002.04.08.17.51.30;	author leith;	state Exp;
branches;
next	1.92;

1.92
date	2002.04.08.17.32.54;	author leith;	state Exp;
branches;
next	1.91;

1.91
date	2002.04.02.20.39.57;	author leith;	state Exp;
branches;
next	1.90;

1.90
date	2002.04.01.16.45.48;	author leith;	state Exp;
branches;
next	1.89;

1.89
date	2002.03.11.14.08.44;	author leith;	state Exp;
branches;
next	1.88;

1.88
date	2002.03.08.21.14.22;	author leith;	state Exp;
branches;
next	1.87;

1.87
date	2001.08.01.12.28.56;	author leith;	state Exp;
branches;
next	1.86;

1.86
date	2001.07.09.19.03.04;	author leith;	state Exp;
branches;
next	1.85;

1.85
date	2001.06.11.15.31.26;	author leith;	state Exp;
branches;
next	1.84;

1.84
date	2001.05.23.20.07.11;	author leith;	state Exp;
branches;
next	1.83;

1.83
date	2001.05.16.14.51.12;	author leith;	state Exp;
branches;
next	1.82;

1.82
date	2001.05.14.19.55.24;	author leith;	state Exp;
branches;
next	1.81;

1.81
date	2001.05.09.14.24.25;	author leith;	state Exp;
branches;
next	1.80;

1.80
date	2001.05.08.14.00.53;	author leith;	state Exp;
branches;
next	1.79;

1.79
date	2001.05.04.19.25.07;	author leith;	state Exp;
branches;
next	1.78;

1.78
date	2001.05.03.19.25.21;	author leith;	state Exp;
branches;
next	1.77;

1.77
date	2001.05.03.19.11.41;	author leith;	state Exp;
branches;
next	1.76;

1.76
date	2001.05.03.14.53.30;	author leith;	state Exp;
branches;
next	1.75;

1.75
date	2001.05.02.17.53.57;	author leith;	state Exp;
branches;
next	1.74;

1.74
date	2001.04.30.19.28.20;	author leith;	state Exp;
branches;
next	1.73;

1.73
date	2001.03.01.19.26.43;	author leith;	state Exp;
branches;
next	1.72;

1.72
date	2001.01.04.17.29.42;	author leith;	state Exp;
branches;
next	1.71;

1.71
date	2000.10.25.13.00.27;	author leith;	state Exp;
branches;
next	1.70;

1.70
date	2000.10.23.18.19.23;	author leith;	state Exp;
branches;
next	1.69;

1.69
date	2000.08.17.15.51.18;	author leith;	state Exp;
branches;
next	1.68;

1.68
date	2000.08.15.16.20.17;	author leith;	state Exp;
branches;
next	1.67;

1.67
date	2000.08.08.20.40.54;	author leith;	state Exp;
branches;
next	1.66;

1.66
date	2000.06.28.15.27.59;	author leith;	state Exp;
branches;
next	1.65;

1.65
date	2000.05.22.18.26.43;	author leith;	state Exp;
branches;
next	1.64;

1.64
date	2000.04.24.19.10.52;	author leith;	state Exp;
branches;
next	1.63;

1.63
date	99.12.27.17.13.39;	author bimal;	state Exp;
branches;
next	1.62;

1.62
date	99.12.27.16.21.48;	author bimal;	state Exp;
branches;
next	1.61;

1.61
date	99.12.23.19.32.54;	author bimal;	state Exp;
branches;
next	1.60;

1.60
date	99.08.05.14.37.42;	author leith;	state Exp;
branches;
next	1.59;

1.59
date	99.07.30.14.55.42;	author leith;	state Exp;
branches;
next	1.58;

1.58
date	99.07.27.13.10.38;	author pawel;	state Exp;
branches;
next	1.57;

1.57
date	99.07.27.13.01.35;	author pawel;	state Exp;
branches;
next	1.56;

1.56
date	99.07.22.12.57.45;	author leith;	state Exp;
branches;
next	1.55;

1.55
date	99.07.20.20.09.45;	author leith;	state Exp;
branches;
next	1.54;

1.54
date	99.04.08.19.47.00;	author leith;	state Exp;
branches;
next	1.53;

1.53
date	99.03.25.19.36.55;	author leith;	state Exp;
branches;
next	1.52;

1.52
date	99.03.08.13.27.46;	author leith;	state Exp;
branches;
next	1.51;

1.51
date	99.03.03.16.34.24;	author leith;	state Exp;
branches;
next	1.50;

1.50
date	99.02.19.16.59.20;	author leith;	state Exp;
branches;
next	1.49;

1.49
date	99.02.17.19.36.00;	author leith;	state Exp;
branches;
next	1.48;

1.48
date	99.01.12.17.15.21;	author leith;	state Exp;
branches;
next	1.47;

1.47
date	98.09.14.13.53.23;	author leith;	state Exp;
branches;
next	1.46;

1.46
date	98.08.17.14.41.00;	author leith;	state Exp;
branches;
next	1.45;

1.45
date	98.07.24.15.11.17;	author leith;	state Exp;
branches;
next	1.44;

1.44
date	98.07.22.17.44.12;	author leith;	state Exp;
branches;
next	1.43;

1.43
date	98.07.15.19.00.10;	author pawel;	state Exp;
branches;
next	1.42;

1.42
date	98.06.23.13.05.47;	author pawel;	state Exp;
branches;
next	1.41;

1.41
date	98.06.23.12.54.56;	author pawel;	state Exp;
branches;
next	1.40;

1.40
date	98.06.01.13.10.51;	author leith;	state Exp;
branches;
next	1.39;

1.39
date	98.05.22.15.02.45;	author leith;	state Exp;
branches;
next	1.38;

1.38
date	98.05.18.20.01.10;	author leith;	state Exp;
branches;
next	1.37;

1.37
date	98.05.08.20.09.45;	author pawel;	state Exp;
branches;
next	1.36;

1.36
date	98.05.08.19.33.32;	author pawel;	state Exp;
branches;
next	1.35;

1.35
date	98.04.10.13.47.17;	author pawel;	state Exp;
branches;
next	1.34;

1.34
date	98.04.09.15.53.35;	author leith;	state Exp;
branches;
next	1.33;

1.33
date	98.04.06.19.43.20;	author pawel;	state Exp;
branches;
next	1.32;

1.32
date	98.03.16.20.42.09;	author leith;	state Exp;
branches;
next	1.31;

1.31
date	98.01.26.22.08.37;	author pawel;	state Exp;
branches;
next	1.30;

1.30
date	98.01.21.17.59.37;	author leith;	state Exp;
branches;
next	1.29;

1.29
date	98.01.05.19.52.38;	author leith;	state Exp;
branches;
next	1.28;

1.28
date	98.01.05.19.09.02;	author leith;	state Exp;
branches;
next	1.27;

1.27
date	97.11.06.17.40.20;	author leith;	state Exp;
branches;
next	1.26;

1.26
date	97.11.06.17.02.51;	author pawel;	state Exp;
branches;
next	1.25;

1.25
date	97.11.06.16.45.07;	author pawel;	state Exp;
branches;
next	1.24;

1.24
date	97.11.06.15.13.26;	author pawel;	state Exp;
branches;
next	1.23;

1.23
date	97.07.30.13.35.51;	author leith;	state Exp;
branches;
next	1.22;

1.22
date	97.07.09.18.55.32;	author pawel;	state Exp;
branches;
next	1.21;

1.21
date	97.07.07.17.44.17;	author leith;	state Exp;
branches;
next	1.20;

1.20
date	97.02.12.15.26.06;	author leith;	state Exp;
branches;
next	1.19;

1.19
date	97.01.16.13.24.10;	author pawel;	state Exp;
branches;
next	1.18;

1.18
date	97.01.16.13.15.08;	author pawel;	state Exp;
branches;
next	1.17;

1.17
date	97.01.14.16.22.56;	author leith;	state Exp;
branches;
next	1.16;

1.16
date	96.10.01.15.05.09;	author leith;	state Exp;
branches;
next	1.15;

1.15
date	96.09.27.20.43.22;	author liy;	state Exp;
branches;
next	1.14;

1.14
date	96.09.27.15.04.29;	author mladjadj;	state Exp;
branches
	1.14.1.1;
next	1.13;

1.13
date	96.09.24.17.10.28;	author leith;	state Exp;
branches;
next	1.12;

1.12
date	96.09.03.19.59.24;	author pawel;	state Exp;
branches;
next	1.11;

1.11
date	96.08.30.17.01.55;	author leith;	state Exp;
branches;
next	1.10;

1.10
date	96.08.23.15.15.03;	author leith;	state Exp;
branches;
next	1.9;

1.9
date	96.08.21.14.00.51;	author leith;	state Exp;
branches;
next	1.8;

1.8
date	96.08.16.14.49.12;	author leith;	state Exp;
branches;
next	1.7;

1.7
date	96.08.13.18.55.18;	author leith;	state Exp;
branches;
next	1.6;

1.6
date	96.07.26.19.25.46;	author pawel;	state Exp;
branches;
next	1.5;

1.5
date	96.07.26.15.28.14;	author pawel;	state Exp;
branches;
next	1.4;

1.4
date	96.07.26.15.27.04;	author pawel;	state Exp;
branches;
next	1.3;

1.3
date	96.07.25.21.00.09;	author pawel;	state Exp;
branches;
next	1.2;

1.2
date	96.07.25.17.17.26;	author pawel;	state Exp;
branches;
next	1.1;

1.1
date	96.07.18.16.11.07;	author leith;	state Exp;
branches;
next	;

1.14.1.1
date	96.10.03.19.30.37;	author liy;	state Exp;
branches;
next	;


desc
@unix specific source code with preprocessor lines
@


1.183
log
@changes when removed getstack... ops
@
text
@C++*********************************************************************
C
C UTIL2.F                   NEW
C                           CHANGED:         Mahieddine Ladjadj 4/23/93
C                           MODIFIED              Jing Su       8/24/93
C                           REWRITTEN             ArDean Leith  8/30/96
C                           ADDED "PP S"          ArDean Leith  4/08/98
C                           STACKS IN "AD"        ArDean Leith 01/11/99
C                           REWROTE "AD"..        ArDean Leith 04/03/99
C                           USED RDPRM3S          ArDean Leith 08/05/99
C                           USED ALLOCATE         ArDean Leith 01/04/01
C                           'PA' & 'IN' 3D        ArDean Leith 03/01/01
C                           'CE VAR'              ArDean Leith 05/01/01
C                           'CE RAN'              ArDean Leith 05/02/01
C                           'CE MAX'              ArDean Leith 05/03/01
C                           'CE MIN'              ArDean Leith 05/03/01
C                           'CE LAP'              ArDean Leith 05/03/01
C                           'CE SOB'              ArDean Leith 05/03/01
C                           'CE PRE'              ArDean Leith 05/03/01
C                           'CE TOP'              ArDean Leith 05/04/01
C                           'CE RIDGE'            ArDean Leith 05/08/01
C                           'CE HURST'            ArDean Leith 05/08/01
C                           'CE HARALICK'         ArDean Leith 05/16/01
C                           NORM3 IN CE           ArDean Leith 04/02/02
C                           'CE LAHE'             ArDean Leith 04/10/02
C                           'CE AD'               ArDean Leith 04/18/02
C                           'CE OR'               ArDean Leith 04/18/02
C                           'AR SCA'              ArDean Leith 09/11/02
C                           'AR SCA' NORM3        ArDean Leith 10/04/02
C                           STACKS SUPPORT        ArDean Leith 10/04/02 
C                           'CE L' REMOVED        ArDean Leith 11/19/02 
C                           'WI' x,Y,Z            ArDean Leith 12/02/02  
C                           OPFILEC               ArDean Leith  3/18/03  
C                           'AD F'                ArDean Leith  3/24/03    
C                           'AD S'                ArDean Leith  4/21/03    
C                           'DIV'                 ArDean Leith  5/30/03    
C                           'SQRT'                ArDean Leith  5/30/03   
C                           RDPRM3S BUG           ArDean Leith  9/05/03   
C                           GPRP                  ArDean Leith  9/08/03
C                           MPI                   Chao Yang    10/31/03
C                           USEBORDER             ArDean Leith 11/21/03
C                           'PD' LOCATION         ArDean Leith  5/14/04
C                           MPI REMOVED           Chao Yang    11/19/04
C                           'CE WA'               ArDean Leith 11/19/04
C                           'CE ME'               ArDean Leith 06/22/05
C                           'BL' AV BUG           ArDean Leith 03/30/06
C                           'WI' 1 SLICE BUG      ArDean Leith 10/19/06
C                           NSLICEW = -999999999  ArDean Leith 03/05/07
C                           SETPRMB PARAMETERS    ArDean Leith 05/19/09
C                           'IP' SETPRMS          ArDean Leith 11/23/10
C                           REMOVED 'NK'          ArDean Leith 11/24/10
C                           'IP' CUTOUT           ArDean Leith 11/23/10
C                           'IP FT'               ArDean Leith  5/23/11
C                           'IP FP'               ArDean Leith  5/23/11
C                           'MM' FOURIER OK       ArDean Leith  7/23/11
C                           'PD' PROMPT           ArDean Leith 11/03/11
C                           'AS AV' PROMPT        ArDean Leith 03/13/12
C                           'AD L', 'MU L'...     ArDean Leith 11/01/12
C                           'MA SOFT'             ArDean Leith 04/25/13
C                           'IN S' BUG            ArDean Leith 01/10/14
C                           'CE' UNCOCUMENTED     ArDean Leith 02/10/14
C                           'MA' FMIN             ArDean Leith 12/10/14
C                           'DIS' ADDED           ArDean Leith  1/05/15
C                           PUTLIN PARAMETERS     ArDean Leith  6/13/18
C                           COSMETIC              ArDean Leith 10/10/19
C                           'MD MRC'              ArDean Leith 11/20/19
C                           EXTRACTED 'AR'        ArDean Leith  1/27/20
C                           ANISO MOVED OUT       ArDean Leith  2/07/20
C    
C **********************************************************************
C=*                                                                    *
C=* This file is part of:   SPIDER - Modular Image Processing System.  *
C=* SPIDER System Authors:  Joachim Frank & ArDean Leith               *
C=* Copyright 1985-2020  Health Research Inc.,                         *
C=* Riverview Center, 150 Broadway, Suite 560, Menands, NY 12204.      *
C=* Email: spider@@health.ny.gov                                        *
C=*                                                                    *
C=* SPIDER is free software; you can redistribute it and/or            *
C=* modify it under the terms of the GNU General Public License as     *
C=* published by the Free Software Foundation; either version 2 of the *
C=* License, or (at your option) any later version.                    *
C=*                                                                    *
C=* SPIDER is distributed in the hope that it will be useful,          *
C=* but WITHOUT ANY WARRANTY; without even the implied warranty of     *
C=* merchantability or fitness for a particular purpose.  See the GNU  *
C=* General Public License for more details.                           *
C=* You should have received a copy of the GNU General Public License  *
C=* along with this program. If not, see <http://www.gnu.org/licenses> *
C=*                                                                    *
C **********************************************************************
C
C  UTIL2(MAXDIM)
C
C  PARAMETERS:  MAXDIM         MAX LENGTH FOR UNLABELED COMMON
C
C  NOTE:        'AR' NOW IN: UTIL1001 Jan 2020
C
C23456789012345678901234567890123456789012345678901234567890123456789012
C--*********************************************************************

        SUBROUTINE UTIL2(MAXDIM)

        INCLUDE 'CMBLOCK.INC'
        INCLUDE 'CMLIMIT.INC'

        INTEGER                    :: MAXDIM

        COMMON BUF(1)  ! LEGACY SIZE SHOULD BE UPDATED!! al

        CHARACTER(LEN=MAXNAM)      :: FILNAM1,FILNAM2,FILNAM3,FILNAM

        INTEGER, PARAMETER         :: NFUNC=33
        CHARACTER(LEN=2)           :: FUNC(NFUNC)

        REAL                       :: FWA(3)
        REAL, ALLOCATABLE          :: Q(:)
        INTEGER                    :: IORDER(3),ISIZE(3)
        INTEGER                    :: IRTFLG
        CHARACTER(LEN=MAXNAM)      :: EXPR
        CHARACTER(LEN=1)           :: NULL = CHAR(0)
        CHARACTER(LEN=1)           :: MODE
        CHARACTER(LEN=2)           :: ANS
        LOGICAL                    :: USEBORDER

        INTEGER, PARAMETER         :: LUN1  = 21
        INTEGER, PARAMETER         :: LUN2  = 22
        INTEGER, PARAMETER         :: LUN3  = 23
        INTEGER, PARAMETER         :: LUN4  = 70


        DATA FUNC/'AD', 'BL', 'CP', 'IN', 'IP',
     &            'MU', 'PA', 'PD', 'SH', 'SQ',
     &            'SU', 'WI', 'CE', 'AR', 'MR',
     &            'DF', 'MA', 'WV', 'PP', 'SZ', 
     &            'WU', 'MM', 'CM', 'PV', 'NK', 
     &            'AS', 'MN', 'TH', 'GP', 'RP',
     &            'MX', '30', '31'/ 

        MAXIM  = 0
        MAXIM2 = 0
        IRTFLG = 0

        IF (FCHAR(1:4) == 'SQRT') GOTO 21 ! SQRT
        IF (FCHAR(1:2) == '12')   GOTO 6  ! DIV
        IF (FCHAR(1:2) == '30')   GOTO 66 ! DISP
        IF (FCHAR(1:2) == '31')   GOTO 67 ! MRC

        DO  IFUNC = 1, NFUNC
          IF (FCHAR(1:2) == FUNC(IFUNC)) THEN
            GOTO ( 1,  2,  3,  4,  5,  6,  7,  8,  9, 10,
     &            11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
     &            21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31 ) IFUNC
          ENDIF
        ENDDO
C       FUNCTION NOT FOUND IN UTIL2
        RETURN 


C       OPERATION ----------- DISP = 30 ------------------------ 'DISP' 
66      CALL DISP()              
        GOTO 9000

C       OPERATION ----------- DISP = 31 ------------------------- 'MRC' 
67      IF (FCHAR(4:4) == 'H')  THEN
C          INQUIRE MRC HEADER CONTENTS
           CALL LISTHEDMRC(LUN1,IRTFLG)

        ELSE IF (FCHAR(4:4) == 'M') THEN
C          HANDLE 'MRC MD'
           CALL SETMODE_MRC()
        ENDIF
        GOTO 9000

C       OPERATION  ADD ------------------------------------------- 'AD' 
C       AD         ADD IMAGES           

1       IF (FCHAR(4:4) == 'S') THEN
C          ADD SERIES OF IMAGES, FASTER WITH LESS MEMORY ALLOCATED
           CALL ADS(LUN1,LUN2,LUN3)
           
        ELSE
           SIGN = +1.0
           IF ( INDEX(FCHAR(4:) ,'F') > 0) SIGN = 1000.0
           IF ( INDEX(FCHAR(4:) ,'R') > 0) SIGN = 2000.0

           IF ( INDEX(FCHAR(4:) ,'2') > 0) THEN
C             IMAGE LIST SUPPORTED  'AD 2', 'AD 2F', 'AD 2R'
              CALL UTIL2SUPL('FIRST  INPUT FILE NAME OR TEMPLATE~',
     &                       'SECOND INPUT FILE NAME OR TEMPLATE~',
     &                       'OUTPUT FILE NAME OR TEMPLATE~',
     &                        SIGN)
           ELSE
              CALL UTIL2SUP('FIRST INPUT',
     &                      'NEXT INPUT','SUMMED OUTPUT', SIGN)
           ENDIF
        ENDIF
        GOTO 9000

C       OPERATION ------   BLANK --------------------------------- 'BL' 

2       IFORM   = 3
        NSAM2   = 0
        NSLICE2 = -9999
        CALL OPFILEC(0,.TRUE.,FILNAM,LUN2,'U',IFORM,
     &               NSAM2,NROW2,NSLICE2,
     &               MAXIM,'BLANK OUTPUT',.FALSE.,IRTFLG)
        IF (IRTFLG .NE. 0) GOTO 9000

        CALL RDPRMC(ANS,NA,.TRUE.,'AVERAGE? (Y/N)',NULL,IRTFLG)
        IF (ANS(:1) == 'Y') THEN
           CALL OPFILEC(0,.TRUE.,FILNAM2,LUN1,'O',IDUM,
     &                  NSAMR,NROWR,NDUM,
     &                 MAXIM2,'REFERENCE',.FALSE.,IRTFLG)
           IF (IRTFLG .NE. 0) GOTO 9000
           IF (IMAMI .NE. 1) THEN
              CALL NORM3(LUN1,NSAMR,NROWR,NDUM,FMAXR,FMINR,AVR)
              B = AVR
           ELSE
              B = AV
           ENDIF
           CLOSE(LUN1)
        ELSE
C           INPUT BACKGROUND VALUE
            CALL RDPRM(B,NOT_USED,'BACKGROUND')
        ENDIF
        CALL BLANK(LUN2,NSAM2,NROW2,NSLICE2,B)
        GOTO 9000

C       OPERATION ----------- COPY  ------------------------------ 'CP' 
3       CALL COPY1(MAXDIM)              
        GOTO 9000

C       OPERATION -------- INSERT -------------------------------- 'IN' 
C               IN      : INSERT
C               IN S    : INSERT  AND CONTRAST STRETCH

4       CALL OPFILEC(0,.TRUE.,FILNAM,LUN1,'O',IFORM,
     &               NSAM1,NROW1,NSLICE1,
     &               MAXIM,'SMALL INPUT',.FALSE.,IRTFLG)
        IF (IRTFLG .NE. 0) GOTO 9000
        AV1    = AV
        IF (FCHAR(4:4) == 'S' .AND. IMAMI .NE. 1) THEN
           CALL NORM3(LUN1,NSAM1,NROW1,NSLICE1,FMAX1,FMIN1,AV1)
        ELSE
           FMIN1 = FMIN
           FMAX1 = FMAX
        ENDIF

        CALL OPFILEC(0,.TRUE.,FILNAM,LUN2,'O',IFORM,
     &               NSAM2,NROW2,NSLICE2,
     &               MAXIM2,'LARGE INPUT (OVERWRITTEN!)',
     &              .TRUE.,IRTFLG)
        IF (IRTFLG .NE. 0) GOTO 9000

        IF (FCHAR(4:4) == 'S' .AND. IMAMI .NE. 1) THEN
           CALL NORM3(LUN2,NSAM2,NROW2,NSLICE2,FMAX2,FMIN2,AV2)
        ENDIF

        !write(6,*) ' fmin, fmin1: ', fmin,fmin1
        !write(6,*) ' fmax, fmax1: ', fmax,fmax1

        IF (IFORM < 0) THEN
C          WRONG LARGE INPUT FORMAT
           IER = 2
           GOTO 9900
        ENDIF

        NSAMS   = 1
        NROWS   = 1
        NSLICES = 1
        CALL RDPRI3S(NSAMS,NROWS,NSLICES,NOT_USED,
     &     'TOP LEFT COORDINATES',IRTFLG)
        IF (IRTFLG .NE. 0) GOTO 9000

        IN = 1
        CALL PATCH(LUN1,LUN2,NSAM1,NROW1,NSLICE1,
     &             NSAM2,NROW2,NSLICE2,
     &             NSAMS,NROWS,NSLICES, 
     &             IN,AV1,FCHAR(4:4),FMIN1,FMAX1,
     &             .FALSE.)

C       SET UNDETERMINED SATATISTICS FLAG
        CALL SETPRMB(LUN2, 0.0,0.0, 0.0,0.0)
        GOTO 9000


C       OPERATION  INTERPOLATE  ---------------------------------- 'IP'
C       IP         BILINEAR INTERPOLATION 
C       IP T       TRIANGULAR INTERPOLATION
C       IP FT      FOURIER INTERPOLATION
C       IP FP      FOURIER BASED POLYNOMIAL INTERPOLATION

5       CALL INTERPS(MAXDIM)
        GOTO 9000


C       OPERATION  MULTIPLY -------------------------------------- 'MU' 
C       MU            MULTIPLY REAL OR COMPLEX FILES 
C       MU D OR DIV   DIVIDE REAL FILES
C       MU M          MULTIPLY FIRST COMPLEX FILE BY THE SECOND CONJUGATED.
C       MU O          MULTIPLY WITH ARITHMETIC OR

6       SIGN = +2.0
        IF ( INDEX(FCHAR(4:) ,'D') > 0 .OR. 
     &             FCHAR(1:2) == '12')   THEN
C          'MU D' OR 'DIV'   DIVIDE REAL FILES
           IF ( INDEX(FCHAR(4:) ,'2') > 0) THEN
C             IMAGE LIST SUPPORTED
              CALL UTIL2SUPL('INPUT FILE NAME OR TEMPLATE~',
     &                       'DIVISOR FILE NAME OR TEMPLATE~',
     &                       'OUTPUT FILE NAME OR TEMPLATE~',
     &                       SIGN)
           ELSE
              CALL UTIL2SUP('INPUT','DIVISOR','OUTPUT', SIGN)
           ENDIF

        ELSEIF (INDEX (FCHAR(4:),'O') > 0) THEN
C          'MU O', 'MU 2O'          ARITHMETIC OR
           IF ( INDEX(FCHAR(4:) ,'2') > 0) THEN
              CALL UTIL2SUPL('INPUT FILE NAME OR TEMPLATE~',
     &                      'SECOND INPUT FILE NAME OR TEMPLATE~',
     &                      'OUTPUT FILE NAME OR TEMPLATE~',
     &                      SIGN)
           ELSE
              CALL UTIL2SUP('INPUT','SECOND INPUT','OUTPUT', SIGN)
           ENDIF
        ELSE
C          MULTIPLICATION
           IF ( INDEX(FCHAR(4:) ,'2') > 0) THEN
C             IMAGE LIST SUPPORTED
              CALL UTIL2SUPL('INPUT FILE NAME OR TEMPLATE~',
     &                      'MULTIPLIER FILE NAME OR TEMPLATE~',
     &                      'OUTPUT FILE NAME OR TEMPLATE~',
     &                       SIGN)
           ELSE
              CALL UTIL2SUP('INPUT','MULTIPLIER','OUTPUT', SIGN)
           ENDIF
        ENDIF
        RETURN

C       OPERATION PATCH (ADDS INPUT TO ORIG) --------------------- 'PA' 

C       OPEN FIRST INPUT FILE
7       CALL OPFILEC(0,.TRUE.,FILNAM,LUN1,'O',IFORM1,
     &               NSAM1,NROW1,NSLICE1,
     &               MAXIM,'SMALL INPUT',.FALSE.,IRTFLG)
        IF (IRTFLG .NE. 0) GOTO 9000
        FMIN1 = FMIN
        FMAX1 = FMAX

C       OPEN SECOND INPUT FILE
        CALL OPFILEC(0,.TRUE.,FILNAM,LUN2,'O',IFORM2,
     &             NSAM2,NROW2,NSLICE2,
     &             MAXIM2,'LARGE INPUT (OVERWRITTEN!)',.TRUE.,IRTFLG)
        IF (IRTFLG == -1) GOTO 7
        IF (IRTFLG .NE. 0) GOTO 9000

        IF (IFORM <= 0) THEN
           IER = 2
           GOTO 9900
        ENDIF 
   
        NSAMS   = 1
        NROWS   = 1
        NSLICES = 1
        CALL RDPRI3S(NSAMS,NROWS,NSLICES,NOT_USED,
     &              'TOP LEFT COORDINATES',IRTFLG)

        CALL PATCH(LUN1,LUN2,NSAM1,NROW1,NSLICE1, NSAM2,NROW2,
     &             NSLICE2, NSAMS,NROWS,NSLICES, 0,0,FCHAR(4:4),
     &             FMIN1,FMAX1,.FALSE.)

C       SET UNDETERMINED STATISTICS FLAG
        CALL SETPRMB(LUN2, 0.0,0.0, 0.0,0.0)
        GOTO 9000                            


C       OPERATION   PAD  ----------------------------------------- 'PD' 

C       EMBED AN IMAGE OR VOLUME IN A LARGER EMPTY ARRAY.

C       OPEN INPUT FILE
8       CALL OPFILEC(0,.TRUE.,FILNAM,LUN1,'O',ITYPE,
     &               NSAM1,NROW1,NSLICE1,
     &              MAXIM,'INPUT',.FALSE.,IRTFLG)
        IF (IRTFLG .NE. 0) GOTO 9000

        AV1    = AV
        IMAMI1 = IMAMI
        FMIN1  = FMIN
        FMAX1  = FMAX

C       OPEN THE OUTPUT FILE
        NSAM2   = 0
        NSLICE2 = 0
        CALL OPFILEC(LUN1,.TRUE.,FILNAM,LUN2,'U',ITYPE,
     &               NSAM2,NROW2,NSLICE2,
     &               MAXIM2,'OUTPUT',.FALSE.,IRTFLG)
        IF (IRTFLG .NE. 0) GOTO 9900

        IN = 2
        CALL RDPRMC(ANS,NC,.TRUE.,
     &  'PAD TYPE= AVERAGE, SET, BORDER, MIN, OR CIRCULAR (A/S/B/M/C)',
     &       NULL,IRTFLG)
       !&   'AVERAGE? (Y/N), (B)ORDER,(M)INIMUM,(C)IRCULAR'

        IF (ANS(1:1) == 'A') THEN  ! OBSOLETE INPUT RESPONSES
           ANS(1:1) = 'Y'
        ELSEIF (ANS(1:1) == 'S') THEN
           ANS(1:1) = 'N'
        ENDIF

        IF (NC >= 2 .AND. ANS(2:2) ==  'C') IN = 3
        IF (ANS(:1) == 'Y' .OR. ANS(:1) == 'M') THEN
           IF (IMAMI1 .NE. 1) THEN
              CALL NORM3(LUN1,NSAM1,NROW1,NSLICE1,FMAX1,FMIN1,AV1)
           ENDIF

           IF (ANS(:1) == 'M') THEN
             B = FMIN1
           ELSE
             B = AV1
           ENDIF
        ELSE
           IF (ANS(:1) .NE. 'B') THEN
              CALL RDPRM(B,NOT_USED,'BACKGROUND')
           ENDIF
        ENDIF

        NSAMS  = 1
        NROWS  = 1
        IF (NSLICE2 <= 1) THEN
C          PAD INTO A INTO AN IMAGE
           NSLICS = 1
           CALL RDPRIS(NSAMS,NROWS,NOT_USED,
     &              'TOP LEFT COORDINATES',IRTFLG)
        ELSE
C          PAD INTO A VOLUME
           NSLICS = -1000000
           CALL RDPRI3S(NSAMS,NROWS,NSLICS,NOT_USED,
     &              'TOP LEFT COORDINATES',IRTFLG)
           IF (IRTFLG .NE. 0) GOTO 9000

           IF (NSLICS <= -1000000) THEN
C             NEED TO INQUIRE AS TO NSLICS
              NSLICS = 1
              CALL RDPRI1S(NSLICS,NOT_USED,
     &                    'TOP Z COORDINATE',IRTFLG)
           ENDIF
        ENDIF
        IF (IRTFLG .NE. 0) GOTO 9000

C       A 'B' IS A SIGNAL FOR BORDERING PATCH
        USEBORDER = (ANS(:1) == 'B')

        CALL PATCH(LUN1,LUN2,NSAM1,NROW1,NSLICE1,
     &             NSAM2,NROW2,NSLICE2,
     &             NSAMS,NROWS,NSLICS, IN,B,FCHAR(4:4),
     &             FMIN1,FMAX1,USEBORDER)

C       SET UNDETERMINED STATISTICS FLAG
        CALL SETPRMB(LUN2, 0.0,0.0, 0.0,0.0)
        GOTO 9000

C       OPERATION  ------------------------------------------------ 'SH' 
C               SH       SHIFT
C               SH F     SHIFT USING FOURIER INTERPOLATION

C       OPEN FIRST INPUT FILE
9       CALL OPFILEC(0,.TRUE.,FILNAM,LUN1,'O',ITYPE,
     &               NSAM1,NROW1,NSLICE1,MAXIM,
     &               'INPUT',.FALSE.,IRTFLG)
        IF (IRTFLG .NE. 0) GOTO 9000

C       OPEN OUTPUT FILE
        CALL OPFILEC(LUN1,.TRUE.,FILNAM,LUN2,'U',ITYPE,
     &               NSAM1,NROW1,NSLICE1,MAXIM2,
     &               'OUTPUT',.FALSE.,IRTFLG)
        IF (IRTFLG .NE. 0) GOTO 9000

        SAMS  = 0
        ROWS  = 0
        SLICS = HUGE(SLICS)

        IF (IFORM == 3) THEN
C          SHIFT IN 3-D
           CALL RDPRM3S(SAMS,ROWS,SLICS,NOT_USED,
     &              'SHIFT COMPONENTS IN X, Y, & Z',IRTFLG)
           IF (IRTFLG .NE. 0) GOTO 9000
           TVAL = HUGE(SLICS)
           IF (SLICS == TVAL) THEN
              CALL RDPRM1S(SLICS,NOT_USED,
     &                    'SHIFT COMPONENT IN Z',IRTFLG)
              IF (IRTFLG .NE. 0) GOTO 9000
           ENDIF

           IF (SAMS  == FLOAT(IFIX(SAMS)) .AND.
     &         ROWS  == FLOAT(IFIX(ROWS)) .AND.
     &         SLICS == FLOAT(IFIX(SLICS)))  THEN

C              INTEGER SHIFT
               NSAMS  = SAMS
               NROWS  = ROWS
               NSLICS = SLICS
               IF (2*NSAM1 > MAXDIM) THEN
                  IER = 6
                  GOTO 9900
               ENDIF

               CALL SHIFT3(LUN1,LUN2,NSAM1,NROW1,NSLICE1,
     &                     NSAMS,NROWS,NSLICS)
          ELSE
            IF (FCHAR(4:5) == 'F')  THEN
               NNNN    = NSAM1+2-MOD(NSAM1,2)
               MEMWANT = NNNN*NROW1*NSLICE1

               ALLOCATE(Q(MEMWANT),STAT=IRTFLG)
               IF (IRTFLG .NE. 0)  THEN
                  IER = 6
                  GOTO 9900
               ENDIF

               DO J = 1, NROW1*NSLICE1
                  CALL REDLIN(LUN1,Q(1 + (J-1)*NNNN),NSAM1,J)
               ENDDO
               INS = +1
               CALL  FMRS_3(Q(1),NSAM1,NROW1,NSLICE1,INS)
               IF (INS == 0)  THEN
                  IER = 38
                  GOTO 9900
               ENDIF
               CALL SHIFT_PF(Q(1),NNNN/2,NSAM1,NROW1,NSLICE1,
     &                       SAMS,ROWS,SLICS)
               INS = -1
               CALL FMRS_3(Q(1),NSAM1,NROW1,NSLICE1,INS)
               DO J = 1, NROW1*NSLICE1
                  CALL WRTLIN(LUN2,Q(1 + (J-1)*NNNN),NSAM1,J)
               ENDDO

               IF (ALLOCATED(Q)) DEALLOCATE(Q)
            ELSE
                IF (5*NSAM1 > MAXDIM) THEN
                IER = 6
                GOTO 9900
             ENDIF
            CALL  SHIFT_3D(LUN1,LUN2,BUF(1),BUF(4*NSAM1+1),
     &                  NSAM1,NROW1,NSLICE1,SAMS,ROWS,SLICS)
            ENDIF
          ENDIF

        ELSEIF (IFORM == 1)  THEN
           CALL RDPRM2S(SAMS,ROWS,NOT_USED,
     &                 'SHIFT COMPONENTS IN X & Y',IRTFLG)
           IF (IRTFLG .NE. 0) GOTO 9000

         IF (REAL(IFIX(SAMS)) == SAMS .AND.
     &       REAL(IFIX(ROWS)) == ROWS) THEN
C          INTEGER SHIFT
           NSAMS = SAMS
           NROWS = ROWS
           IF (2*NSAM1 > MAXDIM) THEN
              IER = 6
              GOTO 9900
           ENDIF
           CALL  SHIFT2(LUN1,LUN2,NSAM1,NROW1,NSAMS,NROWS)

         ELSE
            IF (FCHAR(4:5) == 'F')  THEN
               NNNN    = NSAM1+2-MOD(NSAM1,2)
               MEMWANT = NNNN*NROW1
               ALLOCATE(Q(MEMWANT),STAT=IRTFLG)

               IF (IRTFLG .NE. 0)  THEN
                  IER = 6
                  GOTO 9900
               ENDIF

               DO  J = 1, NROW1
                  CALL REDLIN(LUN1,Q(1 + (J-1)*NNNN),NSAM1,J)
               ENDDO
               INS = +1
               CALL  FMRS_2(Q(1),NSAM1,NROW1,INS)
               IF (INS == 0)  THEN
                  IER = 38
                  GOTO 9900
               ENDIF
               NSLICE1 = 1
               SLICS   = 0.0
               CALL SHIFT_PF(Q(1),NNNN/2,NSAM1,NROW1,NSLICE1,
     &                        SAMS,ROWS,SLICS)
               INS=-1
               CALL FMRS_2(Q(1),NSAM1,NROW1,INS)
               DO J = 1, NROW1
                   CALL WRTLIN(LUN2,Q(1 + (J-1)*NNNN),NSAM1,J)
               ENDDO

               IF (ALLOCATED(Q)) DEALLOCATE(Q)

            ELSE
C              BILINEAR INTERPOLATION
               IF (6*NSAM1 > MAXDIM) THEN
                  IER = 6
                  GOTO 9900
               ENDIF
               NNROWS = 1
               NNROWE = NROW1
               NNROWK = 1
               CALL SHIFTR(LUN1,LUN2,NSAM1,NROW1,NNROWS,NNROWE,
     &                  NNROWK,SAMS,ROWS)
            ENDIF
          ENDIF
        ELSE
           CALL ERRT(2,'SH',NE)
        ENDIF   
        GOTO 9000

C       OPERATION  ----------------------------------------------- 'SQ'
C       SQUARES INPUT POINT BY POINT 

10      CALL OPFILEC(0,.TRUE.,FILNAM,LUN1,'O',ITYPE,
     &               NSAM1,NROW1,NSLICE1,
     &               MAXIM,'INPUT',.TRUE.,IRTFLG)
        IF (IRTFLG .NE. 0) GOTO 9000

C       OPEN OUTPUT FILE (SAME SIZE AS INPUT)
        CALL OPFILEC(LUN1,.TRUE.,FILNAM,LUN3,'U',ITYPE,
     &               NSAM1,NROW1,NSLICE1,
     &               MAXIM2,'OUTPUT',.TRUE.,IRTFLG)
        IF (IRTFLG .NE. 0) GOTO 9000

        CALL IMSQ(.FALSE.,LUN1,LUN3,ITYPE,
     &             NSAM1,NROW1,NSLICE1,IRTFLG)
        GOTO 9000

C       OPERATION ------------------------------------------------- 'SU' 
C       SUBTRACTS ONE OR MORE IMAGE FROM THE FIRST IMAGE

11      SIGN = -1.0
        IF ( INDEX(FCHAR(4:) ,'2') > 0) THEN
C          IMAGE LIST SUPPORTED
           CALL UTIL2SUPL(
     &            'INPUT FILE NAME OR TEMPLATE (E.G. STK@@****)~',
     &            'SUBTRACTED FILE NAME OR TEMPLATE~',
     &            'OUTPUT FILE NAME OR TEMPLATE~',
     &            SIGN)
        ELSE
           CALL UTIL2SUP('INPUT','SUBTRACTED','OUTPUT', SIGN)
        ENDIF
        RETURN


C       OPERATION  ------------------------------------------------ 'WI' 
C       WI        WINDOW 
C       WI B      WINDOW USING SPECIFIED BACKGROUND 

C       OPEN INPUT FILE
12      CALL OPFILEC(0,.TRUE.,FILNAM,LUN1,'O',ITYPE,
     &               NSAM1,NROW1,NSLICE1,
     &              MAXIM,'INPUT',.FALSE.,IRTFLG)
        IF (IRTFLG .NE. 0) GOTO 9000

C       OPEN OUTPUT FILE
        NSAM2   = 0
        NSLICE2 = 0
        CALL OPFILEC(LUN1,.TRUE.,FILNAM,LUN2,'U',ITYPE,
     &              NSAM2,NROW2,NSLICE2,
     &              MAXIM2,'OUTPUT',.FALSE.,IRTFLG)

        NSAMW   = 1
        NROWW   = 1
        NSLICEW = -999999999    ! SOMEDAY THIS WILL CAUSE A PROBLEM,
C                               ! BUT IT WILL BE AFTER I'M DEAD
        CALL RDPRI3S(NSAMW,NROWW,NSLICEW,NOT_USED,
     &              'TOP LEFT COORDINATES',IRTFLG)
        IF (IRTFLG .NE. 0) GOTO 9000

        IF (NSLICE1 > 1 .AND. NSLICEW == -999999999) THEN
C          FOR LEGACY INPUT OF X, Y ONLY, THEN Z ON NEXT LINE 
           NSLICEW = 1
           CALL RDPRI1S(NSLICEW,NOT_USED,'TOP SLICE',IRTFLG)
           IF (IRTFLG .NE. 0) GOTO 9000
        ELSEIF (NSLICE1 <= 1) THEN
           NSLICEW = 1
        ENDIF

        IF ((NSAMW               > NSAM1)   .OR.
     &      (NROWW               > NROW1)   .OR.
     &      (NSLICEW             > NSLICE1) .OR.
     &      ((NSAMW + NSAM2)     <= 1) .OR. 
     &      ((NROWW + NROW2)     <= 1) .OR. 
     &      ((NSLICEW + NSLICE2) <= 1)) THEN
            WRITE(NOUT,*)' WARNING: NO INPUT PIXELS WITHIN OUTPUT IMAGE'
        ENDIF

        BACK = 0.0
        IF (FCHAR(4:4) == 'B')
     &     CALL RDPRM(BACK,NOT_USED,'BACKGROUND')

        CALL WINDOW(LUN1,LUN2, NSAM1,NROW1,NSLICE1,
     &                         NSAMW,NROWW,NSLICEW, 
     &                         NSAM2,NROW2,NSLICE2,BACK)
        GOTO 9000


C       OPERATION ------------------------------------------------ 'CE' 
C       CE        CONTRAST ENHANCEMENT 
C       CE FIT       FIT HISTOGRAM
C       CE OD        FIT HISTOGRAM FOR OD MICROGRAPHS.
C       CE GNC       USING GRADUATED NON-CONVEX RESTORATION 
C       CE MED       USING MEDIAN FILTERING 
C       CE VAR       USING VARIANCE FILTERING 
C       CE VS        USING VARIANCE SMOOTHING FILTERING 
C       CE G?        USING GRADIENT FILTER 
C       CE RAN       USING RANGE FILTER 
C       CE MAX       USING MAX FILTER 
C       CE MIN       USING MIN FILTER 
C       CE LAP       USING LAPLACIAN FILTER 
C       CE SOBEL     USING SOBEL FILTER 
C       CE PREWITT   USING PREWITT FILTER 
C       CE RIDGE     RIDGE FOLLOWER 
C       CE HURST     USING HURST FILTER 
C       CE HARALICK  USING HARALICK FILTER 
C       CE LAHE      USING LOCAL AREA HISTOGRAM FILTER 
C       CE AD        USING ANISOTROPIC DIFFUSION FILTER 
C       CE OR        USING LOCAL ORIENTATION 
C       CE ME        USING MAXIMUM ENTROPY THRESHOLD 
 
13      IF (FCHAR(4:6) == 'FIT')  THEN
C          FITS HISTOGRAM OF IMAGE FILE TO THE HISTOGRAM OF REF. FILE.
           CALL  HISTE(MAXDIM)
           GOTO  9911

        ELSEIF (FCHAR(4:5) == 'OD')  THEN
C          ADJUST OPTICAL DENSITIES
           CALL  HISTOD
           GOTO  9911

        ELSEIF (FCHAR(4:5) == 'AD')  THEN
C          ANISOTROPIC DIFFUSION
           CALL  UTIL_11()
           GOTO  9911

        ENDIF

C       OPEN INPUT FILE, SOME OPERATIONS CAN TAKE WHOLE STACKS
        IF (FCHAR(4:5) == 'AD') MAXIM = -1
        CALL OPFILEC(0,.TRUE.,FILNAM,LUN1,'O',ITYPE,
     &               NSAM1,NROW1,NSLICE1,
     &               MAXIM,'INPUT',.FALSE.,IRTFLG)
        IF (IRTFLG .NE. 0) GOTO 9000

        IF (IMAMI.NE.1) 
     &      CALL NORM3(LUN1,NSAM1,NROW1,NSLICE1,FMAX,FMIN,AV)
        FMIN1 = FMIN
        FMAX1 = FMAX
        SIG1  = SIG

C       OPEN OUTPUT FILE
        IF (MAXIM > 0) MAXIM2 = MAXIM
        CALL OPFILEC(LUN1,.TRUE.,FILNAM,LUN2,'U',ITYPE,
     &              NSAM1,NROW1,NSLICE1,
     &               MAXIM2,'OUTPUT',.TRUE.,IRTFLG)
        IF (IRTFLG .NE. 0) GOTO 9000

        IF (FCHAR(4:6) == 'GNC') THEN
C          GRADUATED NON CONVEX RESTORATION
           CALL GNC(LUN1,LUN2,NSAM1,NROW1)

        ELSEIF (FCHAR(4:5) == 'OR')  THEN

C          OPEN SECOND OUTPUT FILE
           CALL OPFILEC(LUN1,.TRUE.,FILNAM,LUN3,'U',ITYPE,
     &             NSAM1,NROW1,NSLICE1,
     &             MAXIM2,'CONFIDENCE OUTPUT',.TRUE.,IRTFLG)
           IF (IRTFLG .NE. 0) GOTO 9000

           CALL ORIENT(LUN1,LUN2,LUN3,NSAM1,NROW1,NSLICE1,IRTFLG)

        ELSEIF (FCHAR(4:6) == 'MED') THEN
C          MEDIAN FILTER
           CALL MEDIAN(LUN1,LUN2,NSAM1,NROW1,NSLICE1)

        ELSEIF (FCHAR(4:5) == 'HA') THEN
C          HARALICK TEXTURE FILTER
           CALL FILTER_HAR(LUN1,LUN2,NSAM1,NROW1,NSLICE1,
     &                     FMIN1,FMAX1)

        ELSEIF (FCHAR(4:6) == 'LAH' ) THEN
C          LAHE --> 'LH'
           CALL FILTER(LUN1,LUN2,NSAM1,NROW1,NSLICE1,
     &                 MAXIM,'LH',FMIN1,FMAX1,SIG1)

        ELSEIF (FCHAR(4:5) == 'ST') THEN
C          CONTRAST STRETCHING
           CALL ENHANC(FILNAM2,LUN1,LUN2,NSAM1,NROW1,NSLICE1)

        ELSEIF (FCHAR(4:5) == 'WA')  THEN
C          WATERSHED 
           CALL WATERSHED(LUN1,LUN2,NSAM1,NROW1,NSLICE1,FMIN1)

        ELSEIF (FCHAR(4:5) == 'HI') THEN
C          HISTOGRAM EQUALIZATION
           CALL EHIST(FILNAM,LUN1,LUN2,NSAM1,NROW1,NSLICE1)

        ELSEIF (FCHAR(4:6) == 'MET') THEN
C          MAX. ENTROPY THRESHOLDING
           CALL MEHIST(LUN1,LUN2,NSAM1,NROW1,NSLICE1,FMIN1,FMAX1)

        ELSEIF (FCHAR(4:4) == 'V' .OR. FCHAR(4:4) == 'G' .OR.
     &          FCHAR(4:4) == 'R' .OR. FCHAR(4:4) == 'M' .OR.
     &          FCHAR(4:4) == 'L' .OR. FCHAR(4:4) == 'S' .OR.
     &          FCHAR(4:4) == 'P' .OR. FCHAR(4:4) == 'T' .OR.
     &          FCHAR(4:4) == 'F' .OR. FCHAR(4:5) == 'HU') THEN
C          VARIANCE, GRADIENT, RANGE, MAX, MIN, LAPLACIAN, SOBEL, 
C          PREWITT, TOP-HAT, FREI-CHEN, RIDGE, HURST
           CALL FILTER(LUN1,LUN2,NSAM1,NROW1,NSLICE1,
     &                 MAXIM,FCHAR(4:5),
     &                 FMIN1,FMAX1,SIG1)

        ELSE
C          HANDLE OLD PLAIN 'CE' (SHOULD NOT BE USED NOW)
           CALL RDPRMC(MODE,NC,.TRUE.,
     &        'STRETCH, HISTOGRAM EQUALIZE, OR LOCAL? (S/H/L)', 
     &        NULL,IRTFLG)
           IF (IRTFLG .NE. 0) GOTO 9000

           IF (MODE == 'H') THEN
C             SAME AS 'CE HI'  HISTOGRAM EQUALIZATION
              WRITE(NOUT,*) ' OBSOLETE OPERATION, USE: <CE HI> INSTEAD'
              CALL EHIST(FILNAM,LUN1,LUN2,NSAM1,NROW1,NSLICE1)

           ELSEIF (MODE == 'L') THEN
C             A TILED LOCAL HISTOGRAM (A POOR ENHANCEMENT IDEA!!)
              CALL LOCAL(LUN1,LUN2,NSAM1,NROW1,NSLICE1)

           ELSE
C             SAME AS 'CE ST' CONTRAST STRETCH
              WRITE(NOUT,*) ' OBSOLETE OPERATION, USE: <CE ST> INSTEAD'
              CALL ENHANC(FILNAM2,LUN1,LUN2,NSAM1,NROW1,NSLICE1)
           ENDIF
        ENDIF
        GOTO 9000

C       ----------- ARITHMETIC OPERATION --------------------- 'AR IF' 
C       MOVED TO UTIL_1001 AND ARITHL
14      CALL ERRT(101,'SHOULD NEVER CALL AR HERE',NDUM)
        GOTO 9000

C       ------------------- MIRROR SYMMETRY ---------------------  'MR'

C       OPEN INPUT FILE
15      CALL OPFILEC(0,.TRUE.,FILNAM,LUN1,'O',ITYPE,
     &               NSAM1,NROW1,NSLICE1,
     &              MAXIM,'INPUT',.FALSE.,IRTFLG)
        IF (IRTFLG .NE. 0) GOTO 9000

C       OPEN THE OUTPUT FILE
        CALL OPFILEC(LUN1,.TRUE.,FILNAM,LUN2,'U',ITYPE,
     &               NSAM1,NROW1,NSLICE1,
     &               MAXIM2,'OUTPUT',.TRUE.,IRTFLG)
        IF (IRTFLG .NE. 0) GOTO 9000

        CALL MIRROR(LUN1,LUN2,NSAM1,NROW1,NSLICE1)
        GOTO 9000

C       DENSITY FOLDOVER ----------------------------------------- 'DF' 

16      CALL OPFILEC(0,.TRUE.,FILNAM,LUN1,'O',ITYPE,
     &               NSAM1,NROW1,NSLICE1,
     &               MAXIM,'INPUT',.FALSE.,IRTFLG)
        IF (IRTFLG .NE. 0) GOTO 9000

C       OPEN OUTPUT FILE
        CALL OPFILEC(LUN1,.TRUE.,FILNAM,LUN2,'U',ITYPE,
     &               NSAM1,NROW1,NSLICE1,
     &               MAXIM2,'OUTPUT',.TRUE.,IRTFLG)
        IF (IRTFLG .NE. 0) GOTO 9000

        CALL DENOV(LUN1,LUN2,NSAM1,NROW1,NSLICE1)
        GOTO 9000

C       OPERATION  ----------------------------------------------- 'MA' 
C       MA       MASK
C       MA X     LATERAL MASKING IN SAMPLE DIRECTION
C       MA       MASK
C       MA SOFT  RADIAL SOFT MASKING 

17      CONTINUE
        IF (FCHAR(4:4) == 'S') THEN
           CALL SOFTMASK()
           GOTO 9000
        ENDIF


C       OPEN INPUT FILE
        CALL OPFILEC(0,.TRUE.,FILNAM,LUN1,'O',ITYPE,
     &               NSAM1,NROW1,NSLICE1,
     &               MAXIM,'INPUT',.FALSE.,IRTFLG)
        IF (IRTFLG .NE. 0) GOTO 9000
        AV1   = AV
        FMIN1 = FMIN
        IF (IMAMI .NE. 1) 
     &      CALL NORM3(LUN1,NSAM1,NROW1,NSLICE1,FMAX1,FMIN1,AV1)

C       OPEN THE OUTPUT FILE
        CALL OPFILEC(LUN1,.TRUE.,FILNAM,LUN2,'U',ITYPE,
     &               NSAM1,NROW1,NSLICE1,
     &               MAXIM2,'OUTPUT',.TRUE.,IRTFLG)
        IF (IRTFLG .NE. 0) GOTO 9000

        CALL MASK(LUN1,LUN2,NSAM1,NROW1,NSLICE1,AV1,FMIN1)
        GOTO 9000


C       OPERATION ------------------------------------------------ 'WV' 
C       WV        WINDOW AVERAGING
C       WV S      WINDOW AVERAGING -- SEQUENTIAL DOCUMENT SEARCH
C       WV P      WINDOW AVERAGING OVER PATCHES       

C       TRAP FOR WINDOW AVERAGING WITH PATCH OPTION
18      IF ( FCHAR(4:4) == 'P') THEN
          CALL WINAVE2(LUN1,LUN2,LUN3)
          GOTO 9000
        END IF

C       OPEN INPUT FILE
        CALL OPFILEC(0,.TRUE.,FILNAM,LUN1,'O',ITYPE,
     &               NSAM1,NROW1,NSLICE1,
     &               MAXIM,'INPUT',.FALSE.,IRTFLG)
        IF (IRTFLG .NE. 0) GOTO 9000

C       OPEN THE OUTPUT FILE
        NSAM2   = 0
        NSLICE2 = 0
        CALL OPFILEC(LUN1,.TRUE.,FILNAM,LUN2,'U',ITYPE,
     &               NSAM2,NROW2,NSLICE2,
     &               MAXIM2,'OUTPUT',.FALSE.,IRTFLG)
        IF (IRTFLG .NE. 0) THEN
           IER = 4
           GOTO 9900
        ENDIF

        CALL WINAVE(LUN1,LUN2,LUN3,NSAM1,NROW1,NSAM2,NROW2)
        GOTO 9000

C       OPERATION  ----------------------------------------------- 'PP' 
C       PP P    PUT POINT 
C       PP L    PUT POINT SPECIFIED INTENSITY
C       PP LL   PUT LINE

19      CONTINUE
        IF (FCHAR(4:5) == 'LL') THEN
C          PUT CONTINUOUS LINE IN IMAGE FILE
           CALL PUTLIN(LUN1,LUN2)


        ELSEIF (FCHAR(4:4) == 'S') THEN
C          CONVERT FUNCTION TO A SURFACE IN A VOLUME

6400       ISIZE(1) = 32
           ISIZE(2) = 32
           ISIZE(3) = 32
           CALL RDPRI3S(ISIZE(1),ISIZE(2),ISIZE(3),NOT_USED,
     &                  'X, Y, & Z SIZES',IRTFLG)
           IF (IRTFLG == -1) GOTO 9000
          
6401       FWA(1)   = 1.0
           FWA(2)   = 1.0
           FWA(3)   = 1.0
           CALL RDPRM3S(FWA(1),FWA(2),FWA(3),NOT_USED,
     &           'NUMBER OF REPEATS IN X, Y, & Z',IRTFLG)
           IF (IRTFLG == -1) GOTO 6400

6402       IORDER(1) = 1
           IORDER(2) = 2
           IORDER(3) = 3
           CALL RDPRI3S(IORDER(1),IORDER(2),IORDER(3),
     &         NOT_USED,'ORDER FOR X, Y, & Z',IRTFLG)
           IF (IRTFLG == -1) GOTO 6401
           IF ((IORDER(1) < 1 .OR. IORDER(1) > 3) .OR.
     &         (IORDER(2) < 1 .OR. IORDER(2) > 3) .OR.
     &         (IORDER(3) < 1 .OR. IORDER(3) > 3)) THEN
              CALL ERRT(101,'IMPROPER ORDER (MUST BE 1...3)',NDUM)
              GOTO 6402
           ENDIF

6403       CALL RDPRMC(ANS,NCHAR,.TRUE.,
     &         'SURFACE (G,D,D2)',NULL,IRTFLG)
           IF (IRTFLG == -1) GOTO 6402

           IFORM  = 3
           NSAM   = ISIZE(IORDER(1))
           NROW   = ISIZE(IORDER(2))
           NSLICE = ISIZE(IORDER(3))
           CALL OPFILEC(0,.TRUE.,FILNAM,LUN1,'U',ITYPE,
     &                  NSAM,NROW,NSLICE,
     &                  MAXIM,'OUTPUT',.FALSE.,IRTFLG)
           IF (IRTFLG == -1) GOTO 6401

           TINY = 1.0E-2
           CALL SURFTOVOL(LUN1,ISIZE,FWA,IORDER,ANS,TINY)
    
        ELSE
           CALL OPFILEC(0,.TRUE.,FILNAM,LUN1,'O',ITYPE,
     &                  NSAM1,NROW1,NSLICE1,
     &                  MAXIM,'INPUT',.FALSE.,IRTFLG)
           IF (IRTFLG .NE. 0) GOTO 9000
           IF (NSAM1 > MAXDIM) THEN
C             TOO LONG LINE LENGTH
              IER = 9
              GOTO 9900
           ENDIF

           IF (FCHAR(4:4) == 'P') THEN
              CALL PUTPT(LUN1,LUN2,NSAM1,NROW1,NSLICE1)

           ELSEIF (FCHAR(4:4) == 'L') THEN
              CALL PUTPT2(LUN1,LUN2,NSAM1,NROW1,NSLICE1)

           ELSEIF (FCHAR(4:4) == 'V') THEN
C             CONVERT HEIGHT FIELD TO A BINARY VOLUME

C             NORMALIZE FILE IF NECESSARY
              FMIN1 = FMIN
              FMAX1 = FMAX
              IF (IMAMI .NE. 1) 
     &            CALL NORM3(LUN1,NSAM1,NROW1,NSLICE1,
     &                       FMAX1,FMIN1,AV)

              WRITE(NOUT,90) FMIN,FMAX
90            FORMAT(' IMAGE DEPTH RANGE: ',G11.3,' ... ',G11.3)

6511            CALL RDPRI1S(NSLICE2,NOT_USED,
     &          'NUMBER OF SLICES IN OUTPUT VOLUME',IRTFLG)
              IF (IRTFLG == -1) GOTO 19

              IFORM = 3
              CALL OPFILEC(LUN1,.TRUE.,FILNAM,LUN2,'U',ITYPE,
     &                     NSAM1,NROW1,NSLICE2, 
     &                     MAXIM2,'OUTPUT',.FALSE.,IRTFLG)
              IF (IRTFLG == -1) GOTO 6511

              CALL IMTOVOL(LUN1,NSAM1,NROW1,NSLICE2,
     &                     LUN2,FMIN1,FMAX1, MAXDIM)
 
           ELSE
C             INPUT FROM TERMINAL
              CALL PUTPT1(LUN1,NSAM1,NROW1,NSLICE1)

           ENDIF
        ENDIF
        GOTO 9000

C       OPERATION ------------------------------------------------ 'SZ' 
C       SZ      SHEARS AN IMAGE BY OFSETTING EACH ROW   

C       OPEN FIRST INPUT FILE
20      CALL OPFILEC(0,.TRUE.,FILNAM,LUN1,'O',ITYPE,
     &               NSAM1,NROW1,NSLICE1,
     &               MAXIM,'INPUT',.FALSE.,IRTFLG)
        IF (IRTFLG .NE. 0) GOTO 9000

        CALL SQUEEZ(LUN1,LUN2,NSAM1,NROW1,NSLICE1,IERR)
        GOTO 9000

C       OPERATION   SQUARE ROOT (WURZEL) ------------------------- 'WU' 
C       TAKES THE SQUARE ROOT OF AN IMAGE.

C       OPEN INPUT FILE
21      CALL OPFILEC(0,.TRUE.,FILNAM1,LUN1,'O',ITYPE,
     &               NSAM1,NROW1,NSLICE1,
     &               MAXIM,'INPUT',.FALSE.,IRTFLG)
        IF (IRTFLG .NE. 0) GOTO 9000
        IF (FMIN < 0) THEN
           CALL ERRT(101,'*** SQ. ROOT OF NEGATIVE NUMBER AVOIDED',IE)
           GOTO 9000
        ENDIF

C       OPEN OUTPUT FILE
        CALL OPFILEC(LUN1,.TRUE.,FILNAM3,LUN3,'U',ITYPE,
     &               NSAM1,NROW1,NSLICE1,
     &               MAXIM,'OUTPUT',.TRUE.,IRTFLG)
        IF (IRTFLG .NE. 0) GOTO 9000

        CALL IMSQ(.TRUE.,LUN1,LUN3,ITYPE,
     &             NSAM1,NROW1,NSLICE1,IRTFLG)
        GOTO 9000

C       OPERATION    MASK MULTIPLICATION ------------------------- 'MM' 
C       MM           MASK MULT.
C       MM C         MULT. CONTINUOUS
C       CAN HANDLE FOURIER x REAL

22      CALL OPFILEC(0,.TRUE.,FILNAM,LUN1,'O',IFORM1,
     &               NSAM1,NROW1,NSLICE1,
     &               MAXIM,'MASK REFERENCE',.FALSE.,IRTFLG)
        IF (IRTFLG .NE. 0) GOTO 9000
        FILNAM2 = FILNAM

C       OPEN IMAGE INPUT FILE
        CALL OPFILEC(0,.TRUE.,FILNAM,LUN2,'O',IFORM2,
     &               NSAM2,NROW2,NSLICE2,
     &               MAXIM2,'IMAGE (OVERWRITTEN!)',.TRUE.,IRTFLG)
        IF (IRTFLG == -1) GOTO 22
        IF (IRTFLG .NE. 0) GOTO 9000

C       MASKMU EXTENDED TO 3-D (JMC)
        CALL MASKMU(LUN1,LUN2,NSAM1,NROW1,NSLICE1)

C       SET UNDETERMINED SATATISTICS FLAG 
        CALL SETPRMB(LUN2, 0.0,0.0, 0.0,0.0)
        GOTO 9000

C       OPERATION ------------------------------------------------ 'CM'

C       OPEN OUTPUT FILE
23      CALL OPFILEC(0,.TRUE.,FILNAM,LUN2,'U',ITYPE,256,256,1,
     &             MAXIM,'OUTPUT',.TRUE.,IRTFLG)
        IF (IRTFLG .NE. 0) GOTO 9000
    
C       NO MANUAL CHAPTER EITHER!!
C       CALL CLUMAP(LUN1,LUN2,256) !!!! commented out??????
        GOTO 9000

C       OPERATION  ----------------------------------------------- 'PV' 
24      CALL ERRT(100,'PV OPERATION NO LONGER SUPPORTED',NE)
CCC     CALL PDPVAX(LUN1,LUN2,FCHAR(4:4))
        GOTO 9000

C       OPERATION  ----------------------------------------------- 'NK' 
C       NK   SHRINK
                
C       POORLY IMPLEMENTED SHRINK OPERATION REMOVED NOV 2010 al
25      CALL ERRT(101,
     &   'OPERATION FAILS ON CONVEX SURFACES, USE <SE> INSTEAD',NE)  
C       CALL SHR(LUN1,LUN2,NSAM1,NSAM2)
        GOTO 9000

C       OPERATION ------------------------------------------------ 'AS'
C       AS F      AVG. AND COMPUTE STATISTICS AND Q FACTOR MAP 
C       AS DC     AVG. WITH VAR.  (NOW "AS R")        
C       AS        AVG. WITH VAR.  
C       AS R      AVG. WITH VAR.  BETTER       
C       AS A      AVG. WITH OPTIONAL VAR. & SUBSETS  (NEW 2012)

C       ADDS 2 OR MORE (UP TO 500) PICTURES TOGETHER, COMPUTING
C          SEVERAL MEASURES OF VARIANCE (PER POINT, TOTAL, ETC.)
                
26      IF (FCHAR(4:4) == 'F') THEN
C          AVG AND COMPUTE STATISTICS AND Q FACTOR MAP 
           CALL QFACT(LUN1,LUN2,LUN3)

        ELSE IF (FCHAR(4:5) == 'DC') THEN
           WRITE(NOUT,*) ' OBSOLETE OPERATION, RENAMED: <AS R>'
           FCHAR(4:5) = 'R '
           CALL ADDS(LUN1,LUN2,LUN3,LUN4,MAXDIM)

        ELSE IF (FCHAR(4:5) == 'AD') THEN
C          ADD IMAGE TO PRECOMPUTED AVERAGE WITH OFF IN INPUT REGISTER  
           WRITE(NOUT,*) ' OBSOLETE OPERATION'
C          AVG WITH OPTIONAL VARIANCE & SUBSETS  
           CALL ADDS(LUN1,LUN2,LUN3,LUN4,MAXDIM)

        ELSE IF (FCHAR(4:4) == 'S') THEN
C          AVG WITH OPTIONAL VARIANCE & SUBSETS  
           CALL ADDS_N()

        ELSE IF (FCHAR(4:4) == 'R') THEN
C          AVG WITH VARIANCE COMPUTED BETTER       
           CALL ADDS(LUN1,LUN2,LUN3,LUN4,MAXDIM)

        ELSE
C          AVG WITH VARIANCE COMPUTED POOR = OBSOLETE
           WRITE(NOUT,*)
     &         ' GIVES POOR VARIANCES, USE <AS AV> or <AS R> INSEEAD'
           CALL ADDS(LUN1,LUN2,LUN3,LUN4,MAXDIM)
        ENDIF
        GOTO 9000

C       OPERATION  ----------------------------------------------- 'MN' 
C       MN        MONTAGE   
C       MN S      MONTAGE WITH INDIVIDUAL SCALING  

27      CALL MONT(MAXDIM)
        GOTO 9000


C       OPERATION ------------------------------------------------ 'TH'
 
C       TH        THRESHOLD    
C       TH F      THRESHOLD--FIXUP CONSTANT 
C       TH M      THRESHOLD AND CREATE MASK 
C       TH C      THRESHOLD--CHANGE A VALUE 
   
C       REPLACES ALL VALUES WITHIN AN IMAGE OR VOLUME BEYOND A
C       SPECIFIED THRESHOLD BY THE THRESHOLD VALUE.

C       OPEN INPUT FILE
28      CALL OPFILEC(0,.TRUE.,FILNAM,LUN1,'O',ITYPE,
     &               NSAM1,NROW1,NSLICE1,
     &               MAXIM,'INPUT',.FALSE.,IRTFLG)
        IF (IRTFLG .NE. 0) GOTO 9000
        IF (NSAM1 > MAXDIM) THEN
          IER = 9
          GOTO 9900
        END IF

        CALL OPFILEC(LUN1,.TRUE.,FILNAM,LUN2,'U',ITYPE,
     &               NSAM1,NROW1,NSLICE1,
     &               MAXIM2,'OUTPUT',.TRUE.,IRTFLG)
        IF (IRTFLG .NE. 0) GOTO 9000

        IF (FCHAR(4:4) == 'C') THEN
           CALL CHANGEVAL(LUN1,LUN2,NSAM1,NROW1,NSLICE1)
        ELSE
           CALL THRESH(LUN1,LUN2,NSAM1,NROW1,NSLICE1)
        ENDIF
        GOTO 9000

C       OPERATION  GP -- (GET PIXEL VALUE)----------------------- 'GP' 
29      CALL OPFILEC(0,.TRUE.,FILNAM,LUN1,'O',ITYPE,
     &               NSAM1,NROW1,NSLICE1,
     &               MAXIM,'INPUT',.TRUE.,IRTFLG)
        IF (IRTFLG .NE. 0) GOTO 9000

        CALL GPRP(LUN1,NSAM1,NROW1,NSLICE1,FCHAR)
        GOTO 9000

C       OPERATION  RP -- (REPLACE PIXEL) ------------------------ 'RP' 
C       RP        REPLACE PIXEL         
30      CALL OPFILEC(0,.TRUE.,FILNAM,LUN1,'O',ITYPE,
     &               NSAM1,NROW1,NSLICE1,
     &               MAXIM,'INPUT',.TRUE.,IRTFLG)
        IF (IRTFLG .NE. 0) GOTO 9000

        CALL GPRP(LUN1,NSAM1,NROW1,NSLICE1,FCHAR)
        GOTO 9000

C       OPERATION    MAXIMUM ------------------------------------ 'MX' 
C       COMPARES CORRESPONDING PIXELS OF 2 REAL IMAGES AND WRITES
C       THE MAXIMUM PIXEL VALUE AT THE CORRESPONDING POSITION OF THE
C       OUTPUT FILE

31      CALL OPFILEC(0,.TRUE.,FILNAM1,LUN1,'O',ITYPE,
     &               NSAM1,NROW1,NSLICE1,
     &               MAXIM,'FIRST INPUT',.FALSE.,IRTFLG)
        IF (IRTFLG .NE. 0) GOTO 9000
        IF (ITYPE < 0) THEN
           IER = 2
           GOTO 9900
        ENDIF     

C       OPEN IMAGE INPUT FILE
        CALL OPFILEC(0,.TRUE.,FILNAM2,LUN2,'O',ITYPE,
     &               NSAM2,NROW2,NSLICE2,
     &               MAXIM2,'SECOND INPUT',.FALSE.,IRTFLG)
        IF (IRTFLG .NE. 0) GOTO 9000
        IF (ITYPE < 0) THEN
           IER = 2
           GOTO 9900
        ENDIF
        
        IF ((NSAM1   .NE. NSAM2) .OR.
     &      (NROW1   .NE. NROW2) .OR. 
     &      (NSLICE1 .NE. NSLICE2) ) THEN 
           IER = 1
           GOTO 9900     
        ENDIF

        IF ((MAXIM .NE. -2) .AND. (MAXIM2 .NE. -2) ) THEN
           IER = 2
           GOTO 9900             
        ENDIF
                        
        NSAM3   = NSAM1
        NROW3   = NROW1
        NSLICE3 = NSLICE1
        MAXIM   = 0
        CALL OPFILEC(0,.TRUE.,FILNAM3,LUN3,'U',ITYPE,
     &               NSAM3,NROW3,NSLICE3,
     &               MAXIM,'OUTPUT',.FALSE.,IRTFLG)
        IF (IRTFLG .NE. 0) GOTO 9000

        CALL MX(LUN1,LUN2,LUN3,NSAM1,NROW1,NSLICE1)
        GOTO 9000



9900    CALL ERRT(IER,'UTIL2 ',NE)


9000    CLOSE(LUN1)
        CLOSE(LUN2)
        CLOSE(LUN3)

9911    END



@


1.182
log
@'AR'  extracted to util2_11.f
@
text
@d68 2
a69 1
C
d123 1
a123 1
        LOGICAL                    :: NORMIT,USEBORDER
d194 1
a194 2
     &                      'NEXT INPUT','SUMMED OUTPUT',
     &                      LUN1,LUN2,LUN3, SIGN)
d305 1
a305 1
     &            FCHAR(1:2) == '12')   THEN
d314 1
a314 2
              CALL UTIL2SUP('INPUT','DIVISOR','OUTPUT',
     &                       LUN1,LUN2,LUN3, SIGN)
d325 1
a325 2
              CALL UTIL2SUP('INPUT','SECOND INPUT','OUTPUT',
     &               LUN1,LUN2,LUN3, SIGN)
d336 1
a336 2
              CALL UTIL2SUP('INPUT','MULTIPLIER','OUTPUT',
     &                       LUN1,LUN2,LUN3, SIGN)
d413 1
a413 1
        IF (NC >= 2 .AND. ANS(2:2).EQ. 'C') IN = 3
d534 1
a534 1
               INS=-1
d556 2
a557 2
         IF (REAL(IFIX(SAMS)).EQ.SAMS .AND.
     &       REAL(IFIX(ROWS)).EQ.ROWS) THEN
d568 1
a568 1
            IF (FCHAR(4:5).EQ.'F')  THEN
d647 1
a647 2
           CALL UTIL2SUP('INPUT','SUBTRACTED','OUTPUT',
     &                   LUN1,LUN2,LUN3, SIGN)
d738 5
a767 4

        ELSEIF (FCHAR(4:5) == 'AD')  THEN
C          ANISO DIFFUSION (CAN HANDLE WHOLE STACKS) 
           CALL ANISO(LUN1,LUN2,NSAM1,NROW1,NSLICE1,MAXIM,IRTFLG)
@


1.181
log
@CALL SETMODE_MRC() added  (duplicate of 'ST MRC' shud be removed??
@
text
@d67 2
a68 1
C 
d73 1
a73 1
C=* Copyright 1985-2019  Health Research Inc.,                         *
d93 3
a95 1
C  PARAMETERS:      MAXDIM         MAX LENGTH FOR UNLABELED COMMON
d162 1
a162 1
C       OPERATION ----------- DISP = 31 ------------------------ 'MRC' 
d235 1
a235 1
C               IN S    : INSERT AND CONTRAST STRETCH
d370 1
a370 1
     &     'TOP LEFT COORDINATES',IRTFLG)
d383 1
a383 1
C       EMBED A PICT. OR VOL. IN A LARGER EMPTY ARRAY.
d847 3
a849 59

C       OPERATION  ----------------------------------------------  'AR' 
C       AR        ARITHMETIC OPERATION

14      CONTINUE

C       OPEN INPUT FILE,  STACK OK FOR PLAIN 'AR'
        IF (FCHAR(4:5) .NE. 'IF') MAXIM = -1
        CALL OPFILEC(0,.TRUE.,FILNAM,LUN1,'O',ITYPE,
     &               NSAM1,NROW1,NSLICE1,
     &               MAXIM,'INPUT',.TRUE.,IRTFLG)
        IF (IRTFLG .NE. 0) GOTO 9000

C       OPEN OUTPUT FILE
        IF (MAXIM > 0) MAXIM2 = MAXIM
        CALL OPFILEC(LUN1,.TRUE.,FILNAM,LUN2,'U',ITYPE,
     &               NSAM1,NROW1,NSLICE1,
     &               MAXIM2,'OUTPUT',.TRUE.,IRTFLG)
        IF (IRTFLG .NE. 0) GOTO 9000

        IF (FCHAR(4:5) == 'IF') THEN
           CALL ARITHL(LUN1,LUN2,NSAM1,NROW1,NSLICE1)
           GOTO 9000

        ELSE IF (FCHAR(4:5) == 'SC') THEN
C          'AR SCA'
           CALL RDPRM2S(FLOW,FHI,NOT_USED,
     &                  'NEW IMAGE MIN. & MAX.',IRTFLG)
        ELSE
C          PLAIN 'AR' 
           IRTFLG = -999     ! NO UPPERCASE
           CALL RDPRMC(EXPR,NLET,.TRUE.,
     &                 'FORMULA: P2=',NULL,IRTFLG)
        ENDIF
        IF (IRTFLG .NE. 0) GOTO 9000

        NORMIT = (FCHAR(4:5) == 'SC')
        IMGNUM = -3   

        !write(6,*)' In util2 -imgnum,nslice,maxim:',imgnum,nslice1,maxim

        DO WHILE (IMGNUM < MAXIM) 
           !write(6,*) ' In util2 - imgnum,maxim 2:',imgnum,maxim
           CALL GETSTACK(LUN1,LUN2,IMGNUM,MAXIM,
     &                   VERBOSE,.FALSE.,FDUM,NORMIT,IRTFLG)
           !write(6,*) ' In util2 - irtflg:',irtflg
           IF (IRTFLG .NE. 0) GOTO 9000

           IF (FCHAR(4:5) == 'SC') THEN
              CALL ARITHSCA(LUN1,LUN2,NSAM1,NROW1,NSLICE1,
     &                      FMIN,FMAX,FLOW,FHI)
           ELSE
              CALL ARITH(LUN1,LUN2,
     &                   NSAM1,NROW1,NSLICE1,EXPR(1:NLET))
           ENDIF
           !write(6,*) ' In util2 -:',imgnum,nslice1,maxim

        ENDDO

d1299 1
a1299 2
9911    RETURN
        END
@


1.180
log
@Added 'MRC HED'
@
text
@d3 3
a5 2
C UTIL2.F         CHANGED:  MAHIEDDINE LADJADJ                  4/23/93
C                           JING SU                             8/24/93
d66 1
d163 4
@


1.179
log
@mrc_support
@
text
@d100 3
a102 1
        COMMON BUF(1)
d106 1
a106 1
        INTEGER, PARAMETER         :: NFUNC=32
d110 1
d112 1
a112 1
        REAL, ALLOCATABLE          :: Q(:)
d114 2
a115 1
        CHARACTER(LEN=1)           :: MODE,NULL
d131 1
a131 1
     &            'MX', '30'/ 
a132 1
        NULL   = CHAR(0)
d137 4
a140 3
        IF (FCHAR(1:4) == 'SQRT') GOTO 21 
        IF (FCHAR(1:2) == '12')   GOTO 6 
        IF (FCHAR(1:2) == '30')   GOTO 66 
d157 7
d165 1
a165 1
C       AD        ADD IMAGES           
@


1.178
log
@email_health_dept
@
text
@d5 60
a64 59
C                           REWRITTEN             ARDEAN LEITH  8/30/96
C                           ADDED "PP S"          ARDEAN LEITH  4/08/98
C                           STACKS IN "AD"        ARDEAN LEITH 01/11/99
C                           REWROTE "AD"..        ARDEAN LEITH 04/03/99
C                           USED RDPRM3S          ARDEAN LEITH 08/05/99
C                           USED ALLOCATE         ARDEAN LEITH 01/04/01
C                           'PA' & 'IN' 3D        ARDEAN LEITH 03/01/01
C                           'CE VAR'              ARDEAN LEITH 05/01/01
C                           'CE RAN'              ARDEAN LEITH 05/02/01
C                           'CE MAX'              ARDEAN LEITH 05/03/01
C                           'CE MIN'              ARDEAN LEITH 05/03/01
C                           'CE LAP'              ARDEAN LEITH 05/03/01
C                           'CE SOB'              ARDEAN LEITH 05/03/01
C                           'CE PRE'              ARDEAN LEITH 05/03/01
C                           'CE TOP'              ARDEAN LEITH 05/04/01
C                           'CE RIDGE'            ARDEAN LEITH 05/08/01
C                           'CE HURST'            ARDEAN LEITH 05/08/01
C                           'CE HARALICK'         ARDEAN LEITH 05/16/01
C                           NORM3 IN CE           ARDEAN LEITH 04/02/02
C                           'CE LAHE'             ARDEAN LEITH 04/10/02
C                           'CE AD'               ARDEAN LEITH 04/18/02
C                           'CE OR'               ARDEAN LEITH 04/18/02
C                           'AR SCA'              ARDEAN LEITH 09/11/02
C                           'AR SCA' NORM3        ARDEAN LEITH 10/04/02
C                           STACKS SUPPORT        ARDEAN LEITH 10/04/02 
C                           'CE L' REMOVED        ARDEAN LEITH 11/19/02 
C                           'WI' x,Y,Z            ARDEAN LEITH 12/02/02  
C                           OPFILEC               ARDEAN LEITH  3/18/03  
C                           'AD F'                ARDEAN LEITH  3/24/03    
C                           'AD S'                ARDEAN LEITH  4/21/03    
C                           'DIV'                 ARDEAN LEITH  5/30/03    
C                           'SQRT'                ARDEAN LEITH  5/30/03   
C                           RDPRM3S BUG           ARDEAN LEITH  9/05/03   
C                           GPRP                  ARDEAN LEITH  9/08/03
C                           MPI                   CHAO YANG    10/31/03
C                           USEBORDER             ARDEAN LEITH 11/21/03
C                           'PD' LOCATION         ARDEAN LEITH  5/14/04
C                           MPI REMOVED           CHAO YANG    11/19/04
C                           'CE WA'               ARDEAN LEITH 11/19/04
C                           'CE ME'               ARDEAN LEITH 06/22/05
C                           'BL' AV BUG           ARDEAN LEITH 03/30/06
C                           'WI' 1 SLICE BUG      ARDEAN LEITH 10/19/06
C                           NSLICEW = -999999999  ARDEAN LEITH 03/05/07
C                           SETPRMB PARAMETERS    ARDEAN LEITH 05/19/09
C                           'IP' SETPRMS          ARDEAN LEITH 11/23/10
C                           REMOVED 'NK'          ARDEAN LEITH 11/24/10
C                           'IP' CUTOUT           ARDEAN LEITH 11/23/10
C                           'IP FT'               ARDEAN LEITH  5/23/11
C                           'IP FP'               ARDEAN LEITH  5/23/11
C                           'MM' FOURIER OK       ARDEAN LEITH  7/23/11
C                           'PD' PROMPT           ARDEAN LEITH 11/03/11
C                           'AS AV' PROMPT        ARDEAN LEITH 03/13/12
C                           'AD L', 'MU L'...     ARDEAN LEITH 11/01/12
C                           'MA SOFT'             ARDEAN LEITH 04/25/13
C                           'IN S' BUG            ARDEAN LEITH 01/10/14
C                           'CE' UNCOCUMENTED     ARDEAN LEITH 02/10/14
C                           'MA' FMIN             ARDEAN LEITH 12/10/14
C                           'DIS' ADDED           ARDEAN LEITH  1/05/15
C                           PUTLIN PARAMETES      ARDEAN LEITH  6/13/18
d70 1
a70 1
C=* Copyright 1985-2018  Health Research Inc.,                         *
d341 1
a341 1
        IF (IFORM .LE. 0) THEN
d396 1
a396 1
        IF (NC .GE. 2 .AND. ANS(2:2).EQ. 'C') IN = 3
d415 1
a415 1
        IF (NSLICE2 .LE. 1) THEN
d427 1
a427 1
           IF (NSLICS .LE. -1000000) THEN
d666 1
a666 1
        ELSEIF (NSLICE1 .LE. 1) THEN
d673 3
a675 3
     &      ((NSAMW + NSAM2)     .LE. 1) .OR. 
     &      ((NROWW + NROW2)     .LE. 1) .OR. 
     &      ((NSLICEW + NSLICE2) .LE. 1)) THEN
a832 1

d864 4
a867 1
        IMGNUM = -3
d869 1
d872 1
d882 2
@


1.177
log
@no common buf now
@
text
@d71 1
a71 1
C=* Email: spider@@wadsworth.org                                        *
@


1.176
log
@FCHAR(1:2) == '30')   GOTO 66
@
text
@d63 1
d69 1
a69 1
C=* Copyright 1985-2014  Health Research Inc.,                         *
d986 1
a986 1
           CALL PUTLIN(LUN1,LUN2,MAXDIM)
@


1.175
log
@mask call fmin1 parameter added
@
text
@d62 1
d100 1
a100 1
        CHARACTER(LEN=MAXNAM) ::  FILNAM1,FILNAM2,FILNAM3,FILNAM
d102 1
a102 1
        INTEGER, PARAMETER         :: NFUNC=31
d105 2
a106 2
        REAL ,DIMENSION(3)         :: FWA
        INTEGER ,DIMENSION(3)      :: IORDER,ISIZE
d125 1
a125 1
     &            'MX'/ 
d133 2
a134 1
        IF (FCHAR(1:2) == '12')  GOTO 6 
d146 4
@


1.174
log
@'CE' obsolete msg
@
text
@d61 1
d925 2
a926 1
        AV1    = AV
d936 1
a936 1
        CALL MASK(LUN1,LUN2,NSAM1,NROW1,NSLICE1,AV1)
d938 1
@


1.173
log
@enter
@
text
@d60 1
d797 1
a797 1
     &        '(S)TRETCH, (H)ISTOGRAM EQUALIZE, OR LOCAL? (S/H/L)', 
d802 2
a803 1
C             HISTOGRAM EQUALIZATION
d807 1
d811 2
@


1.172
log
@'IN S' BUG on fmin undefined
@
text
@d981 1
a981 1
     &                  'ENTER X, Y, & Z SIZES',IRTFLG)
d988 1
a988 1
     &           'ENTER NUMBER OF REPEATS IN X, Y, & Z',IRTFLG)
d1051 1
a1051 1
     &          'ENTER NUMBER OF SLICES IN OUTPUT VOLUME',IRTFLG)
@


1.171
log
@detab
@
text
@d59 1
d65 1
a65 1
C=* Copyright 1985-2013  Health Research Inc.,                         *
d214 3
d224 7
@


1.170
log
@CALL SOFTMASK added
@
text
@d91 2
a92 2
	INCLUDE 'CMBLOCK.INC'
	INCLUDE 'CMLIMIT.INC'
d94 1
a94 1
	COMMON BUF(1)
d98 1
a98 1
	INTEGER, PARAMETER         :: NFUNC=31
d109 4
a112 4
	INTEGER, PARAMETER         :: LUN1  = 21
	INTEGER, PARAMETER         :: LUN2  = 22
	INTEGER, PARAMETER         :: LUN3  = 23
	INTEGER, PARAMETER         :: LUN4  = 70
d115 2
a116 2
	DATA FUNC/'AD', 'BL', 'CP', 'IN', 'IP',
     &	          'MU', 'PA', 'PD', 'SH', 'SQ',
d123 1
a123 1
	NULL   = CHAR(0)
d143 1
a143 1
C	AD        ADD IMAGES           
d166 1
a166 1
	GOTO 9000
d168 1
a168 1
C       OPERATION ------   BLANK --------------------------------- 'BL'	
d170 1
a170 1
2   	IFORM   = 3
d176 1
a176 1
	IF (IRTFLG .NE. 0) GOTO 9000
d180 1
a180 1
	   CALL OPFILEC(0,.TRUE.,FILNAM2,LUN1,'O',IDUM,
d183 1
a183 1
	   IF (IRTFLG .NE. 0) GOTO 9000
d199 1
a199 1
3	CALL COPY1(MAXDIM)		
d203 2
a204 2
C       	IN	: INSERT
C		IN S	: INSERT AND CONTRAST STRETCH
d206 1
a206 1
4	CALL OPFILEC(0,.TRUE.,FILNAM,LUN1,'O',IFORM,
d209 2
a210 2
	IF (IRTFLG .NE. 0) GOTO 9000
	AV1    = AV
d213 1
a213 1
	ENDIF
d215 1
a215 1
	CALL OPFILEC(0,.TRUE.,FILNAM,LUN2,'O',IFORM,
d219 1
a219 1
	IF (IRTFLG .NE. 0) GOTO 9000
d221 1
a221 1
	IF (IFORM < 0) THEN
d232 1
a232 1
	IF (IRTFLG .NE. 0) GOTO 9000
d247 4
a250 4
C	IP         BILINEAR INTERPOLATION 
C	IP T       TRIANGULAR INTERPOLATION
C	IP FT      FOURIER INTERPOLATION
C	IP FP      FOURIER BASED POLYNOMIAL INTERPOLATION
d252 1
a252 1
5	CALL INTERPS(MAXDIM)
d257 4
a260 4
C	MU            MULTIPLY REAL OR COMPLEX FILES 
C	MU D OR DIV   DIVIDE REAL FILES
C	MU M          MULTIPLY FIRST COMPLEX FILE BY THE SECOND CONJUGATED.
C	MU O          MULTIPLY WITH ARITHMETIC OR
d265 1
a265 1
C	   'MU D' OR 'DIV'   DIVIDE REAL FILES
d278 1
a278 1
C	   'MU O', 'MU 2O'          ARITHMETIC OR
d305 2
a306 2
C	OPEN FIRST INPUT FILE
7	CALL OPFILEC(0,.TRUE.,FILNAM,LUN1,'O',IFORM1,
d309 1
a309 1
	IF (IRTFLG .NE. 0) GOTO 9000
d314 1
a314 1
	CALL OPFILEC(0,.TRUE.,FILNAM,LUN2,'O',IFORM2,
d317 2
a318 2
	IF (IRTFLG == -1) GOTO 7
	IF (IRTFLG .NE. 0) GOTO 9000
d320 1
a320 1
	IF (IFORM .LE. 0) THEN
d342 1
a342 1
C	EMBED A PICT. OR VOL. IN A LARGER EMPTY ARRAY.
d344 2
a345 2
C	OPEN INPUT FILE
8	CALL OPFILEC(0,.TRUE.,FILNAM,LUN1,'O',ITYPE,
d348 1
a348 1
	IF (IRTFLG .NE. 0) GOTO 9000
d355 1
a355 1
C	OPEN THE OUTPUT FILE
d428 2
a429 2
C		SH       SHIFT
C		SH F     SHIFT USING FOURIER INTERPOLATION
d431 2
a432 2
C	OPEN FIRST INPUT FILE
9	CALL OPFILEC(0,.TRUE.,FILNAM,LUN1,'O',ITYPE,
d435 1
a435 1
	IF (IRTFLG .NE. 0) GOTO 9000
d437 2
a438 2
C	OPEN OUTPUT FILE
	CALL OPFILEC(LUN1,.TRUE.,FILNAM,LUN2,'U',ITYPE,
d441 1
a441 1
	IF (IRTFLG .NE. 0) GOTO 9000
d467 4
a470 4
	       IF (2*NSAM1 > MAXDIM) THEN
	          IER = 6
	          GOTO 9900
	       ENDIF
d475 1
a475 1
	    IF (FCHAR(4:5) == 'F')  THEN
d477 1
a477 1
	       MEMWANT = NNNN*NROW1*NSLICE1
d480 4
a483 4
	       IF (IRTFLG .NE. 0)  THEN
	          IER = 6
	          GOTO 9900
	       ENDIF
d488 7
a494 7
	       INS = +1
	       CALL  FMRS_3(Q(1),NSAM1,NROW1,NSLICE1,INS)
	       IF (INS == 0)  THEN
		  IER = 38
		  GOTO 9900
	       ENDIF
	       CALL SHIFT_PF(Q(1),NNNN/2,NSAM1,NROW1,NSLICE1,
d496 2
a497 2
	       INS=-1
	       CALL FMRS_3(Q(1),NSAM1,NROW1,NSLICE1,INS)
d503 5
a507 5
	    ELSE
		IF (5*NSAM1 > MAXDIM) THEN
		IER = 6
		GOTO 9900
	     ENDIF
d510 1
a510 1
	    ENDIF
d523 4
a526 4
	   IF (2*NSAM1 > MAXDIM) THEN
	      IER = 6
	      GOTO 9900
	   ENDIF
d530 1
a530 1
	    IF (FCHAR(4:5).EQ.'F')  THEN
d532 1
a532 1
	       MEMWANT = NNNN*NROW1
d535 4
a538 4
	       IF (IRTFLG .NE. 0)  THEN
	          IER = 6
	          GOTO 9900
	       ENDIF
d543 6
a548 6
	       INS = +1
	       CALL  FMRS_2(Q(1),NSAM1,NROW1,INS)
	       IF (INS == 0)  THEN
		  IER = 38
		  GOTO 9900
	       ENDIF
d551 1
a551 1
	       CALL SHIFT_PF(Q(1),NNNN/2,NSAM1,NROW1,NSLICE1,
d553 2
a554 2
	       INS=-1
	       CALL FMRS_2(Q(1),NSAM1,NROW1,INS)
d561 1
a561 1
	    ELSE
d563 4
a566 4
	       IF (6*NSAM1 > MAXDIM) THEN
	          IER = 6
	          GOTO 9900
	       ENDIF
d572 1
a572 1
	    ENDIF
d574 3
a576 3
	ELSE
	   CALL ERRT(2,'SH',NE)
	ENDIF	
d580 1
a580 1
C	SQUARES INPUT POINT BY POINT 
d585 1
a585 1
	IF (IRTFLG .NE. 0) GOTO 9000
d587 2
a588 2
C	OPEN OUTPUT FILE (SAME SIZE AS INPUT)
 	CALL OPFILEC(LUN1,.TRUE.,FILNAM,LUN3,'U',ITYPE,
d591 1
a591 1
	IF (IRTFLG .NE. 0) GOTO 9000
d598 1
a598 1
C	SUBTRACTS ONE OR MORE IMAGE FROM THE FIRST IMAGE
d600 1
a600 1
11	SIGN = -1.0
d616 2
a617 2
C	WI        WINDOW 
C	WI B      WINDOW USING SPECIFIED BACKGROUND 
d619 2
a620 2
C	OPEN INPUT FILE
12	CALL OPFILEC(0,.TRUE.,FILNAM,LUN1,'O',ITYPE,
d623 1
a623 1
	IF (IRTFLG .NE. 0) GOTO 9000
d669 21
a689 21
C	CE        CONTRAST ENHANCEMENT 
C	CE FIT       FIT HISTOGRAM
C	CE OD        FIT HISTOGRAM FOR OD MICROGRAPHS.
C	CE GNC       USING GRADUATED NON-CONVEX RESTORATION 
C	CE MED       USING MEDIAN FILTERING 
C	CE VAR       USING VARIANCE FILTERING 
C	CE VS        USING VARIANCE SMOOTHING FILTERING 
C	CE G?        USING GRADIENT FILTER 
C	CE RAN       USING RANGE FILTER 
C	CE MAX       USING MAX FILTER 
C	CE MIN       USING MIN FILTER 
C	CE LAP       USING LAPLACIAN FILTER 
C	CE SOBEL     USING SOBEL FILTER 
C	CE PREWITT   USING PREWITT FILTER 
C	CE RIDGE     RIDGE FOLLOWER 
C	CE HURST     USING HURST FILTER 
C	CE HARALICK  USING HARALICK FILTER 
C	CE LAHE      USING LOCAL AREA HISTOGRAM FILTER 
C	CE AD        USING ANISOTROPIC DIFFUSION FILTER 
C	CE OR        USING LOCAL ORIENTATION 
C	CE ME        USING MAXIMUM ENTROPY THRESHOLD 
d694 1
a694 1
 	   GOTO  9911
d698 2
a699 2
	   CALL  HISTOD
	   GOTO  9911
d701 1
a701 1
	ENDIF
d705 1
a705 1
	CALL OPFILEC(0,.TRUE.,FILNAM,LUN1,'O',ITYPE,
d708 1
a708 1
	IF (IRTFLG .NE. 0) GOTO 9000
d716 1
a716 1
C	OPEN OUTPUT FILE
d718 1
a718 1
	CALL OPFILEC(LUN1,.TRUE.,FILNAM,LUN2,'U',ITYPE,
d721 1
a721 1
	IF (IRTFLG .NE. 0) GOTO 9000
d729 1
a729 1
	   CALL ANISO(LUN1,LUN2,NSAM1,NROW1,NSLICE1,MAXIM,IRTFLG)
d733 2
a734 2
C	   OPEN SECOND OUTPUT FILE
	   CALL OPFILEC(LUN1,.TRUE.,FILNAM,LUN3,'U',ITYPE,
d737 1
a737 1
	   IF (IRTFLG .NE. 0) GOTO 9000
d804 1
a804 1
C	AR        ARITHMETIC OPERATION
d859 2
a860 2
C	OPEN INPUT FILE
15	CALL OPFILEC(0,.TRUE.,FILNAM,LUN1,'O',ITYPE,
d863 1
a863 1
	IF (IRTFLG .NE. 0) GOTO 9000
d865 2
a866 2
C	OPEN THE OUTPUT FILE
	CALL OPFILEC(LUN1,.TRUE.,FILNAM,LUN2,'U',ITYPE,
d869 1
a869 1
	IF (IRTFLG .NE. 0) GOTO 9000
d876 1
a876 1
16	CALL OPFILEC(0,.TRUE.,FILNAM,LUN1,'O',ITYPE,
d879 1
a879 1
	IF (IRTFLG .NE. 0) GOTO 9000
d881 2
a882 2
C	OPEN OUTPUT FILE
	CALL OPFILEC(LUN1,.TRUE.,FILNAM,LUN2,'U',ITYPE,
d885 1
a885 1
	IF (IRTFLG .NE. 0) GOTO 9000
d891 4
a894 4
C	MA 	 MASK
C	MA X	 LATERAL MASKING IN SAMPLE DIRECTION
C	MA 	 MASK
C	MA SOFT	 RADIAL SOFT MASKING 
d903 2
a904 2
C	OPEN INPUT FILE
 	CALL OPFILEC(0,.TRUE.,FILNAM,LUN1,'O',ITYPE,
d907 2
a908 2
	IF (IRTFLG .NE. 0) GOTO 9000
	AV1    = AV
d912 2
a913 2
C	OPEN THE OUTPUT FILE
  	CALL OPFILEC(LUN1,.TRUE.,FILNAM,LUN2,'U',ITYPE,
d916 1
a916 1
	IF (IRTFLG .NE. 0) GOTO 9000
d922 3
a924 3
C	WV        WINDOW AVERAGING
C	WV S      WINDOW AVERAGING -- SEQUENTIAL DOCUMENT SEARCH
C	WV P      WINDOW AVERAGING OVER PATCHES       
d932 2
a933 2
C	OPEN INPUT FILE
	CALL OPFILEC(0,.TRUE.,FILNAM,LUN1,'O',ITYPE,
d936 1
a936 1
	IF (IRTFLG .NE. 0) GOTO 9000
d938 1
a938 1
C	OPEN THE OUTPUT FILE
d953 3
a955 3
C	PP P	PUT POINT 
C 	PP L	PUT POINT SPECIFIED INTENSITY
C 	PP LL	PUT LINE
d1004 1
a1004 1
	   IF (IRTFLG == -1) GOTO 6401
d1013 2
a1014 2
	   IF (IRTFLG .NE. 0) GOTO 9000
	   IF (NSAM1 > MAXDIM) THEN
d1047 1
a1047 1
	      IF (IRTFLG == -1) GOTO 6511
d1061 1
a1061 1
C	SZ  	SHEARS AN IMAGE BY OFSETTING EACH ROW	
d1063 2
a1064 2
C	OPEN FIRST INPUT FILE
20	CALL OPFILEC(0,.TRUE.,FILNAM,LUN1,'O',ITYPE,
d1067 1
a1067 1
	IF (IRTFLG .NE. 0) GOTO 9000
d1073 1
a1073 1
C	TAKES THE SQUARE ROOT OF AN IMAGE.
d1075 2
a1076 2
C	OPEN INPUT FILE
21	CALL OPFILEC(0,.TRUE.,FILNAM1,LUN1,'O',ITYPE,
d1079 1
a1079 1
	IF (IRTFLG .NE. 0) GOTO 9000
d1085 2
a1086 2
C	OPEN OUTPUT FILE
	CALL OPFILEC(LUN1,.TRUE.,FILNAM3,LUN3,'U',ITYPE,
d1089 1
a1089 1
	IF (IRTFLG .NE. 0) GOTO 9000
d1096 2
a1097 2
C	MM           MASK MULT.
C	MM C	     MULT. CONTINUOUS
d1103 1
a1103 1
	IF (IRTFLG .NE. 0) GOTO 9000
d1107 1
a1107 1
	CALL OPFILEC(0,.TRUE.,FILNAM,LUN2,'O',IFORM2,
d1110 2
a1111 2
	IF (IRTFLG == -1) GOTO 22
	IF (IRTFLG .NE. 0) GOTO 9000
d1122 2
a1123 2
C	OPEN OUTPUT FILE
23  	CALL OPFILEC(0,.TRUE.,FILNAM,LUN2,'U',ITYPE,256,256,1,
d1125 1
a1125 1
	IF (IRTFLG .NE. 0) GOTO 9000
d1137 3
a1139 3
C	NK   SHRINK
		
C	POORLY IMPLEMENTED SHRINK OPERATION REMOVED NOV 2010 al
d1142 1
a1142 1
C	CALL SHR(LUN1,LUN2,NSAM1,NSAM2)
d1146 5
a1150 5
C	AS F      AVG. AND COMPUTE STATISTICS AND Q FACTOR MAP 
C	AS DC     AVG. WITH VAR.  (NOW "AS R")        
C	AS        AVG. WITH VAR.  
C	AS R      AVG. WITH VAR.  BETTER       
C	AS A      AVG. WITH OPTIONAL VAR. & SUBSETS  (NEW 2012)
d1152 1
a1152 1
C	ADDS 2 OR MORE (UP TO 500) PICTURES TOGETHER, COMPUTING
d1154 1
a1154 1
		
d1156 1
a1156 1
C	   AVG AND COMPUTE STATISTICS AND Q FACTOR MAP 
d1165 1
a1165 1
C	   ADD IMAGE TO PRECOMPUTED AVERAGE WITH OFF IN INPUT REGISTER  
d1167 1
a1167 1
C	   AVG WITH OPTIONAL VARIANCE & SUBSETS  
d1171 1
a1171 1
C	   AVG WITH OPTIONAL VARIANCE & SUBSETS  
d1175 1
a1175 1
C	   AVG WITH VARIANCE COMPUTED BETTER       
d1179 1
a1179 1
C	   AVG WITH VARIANCE COMPUTED POOR = OBSOLETE
d1187 2
a1188 2
C	MN        MONTAGE   
C	MN S      MONTAGE WITH INDIVIDUAL SCALING  
d1196 2
a1197 2
C	TH        THRESHOLD    
C	TH F      THRESHOLD--FIXUP CONSTANT 
d1204 2
a1205 2
C	OPEN INPUT FILE
28	CALL OPFILEC(0,.TRUE.,FILNAM,LUN1,'O',ITYPE,
d1208 2
a1209 2
	IF (IRTFLG .NE. 0) GOTO 9000
	IF (NSAM1 > MAXDIM) THEN
d1214 1
a1214 1
 	CALL OPFILEC(LUN1,.TRUE.,FILNAM,LUN2,'U',ITYPE,
d1217 1
a1217 1
	IF (IRTFLG .NE. 0) GOTO 9000
d1227 1
a1227 1
29	CALL OPFILEC(0,.TRUE.,FILNAM,LUN1,'O',ITYPE,
d1230 1
a1230 1
	IF (IRTFLG .NE. 0) GOTO 9000
d1236 2
a1237 2
C	RP        REPLACE PIXEL         
30	CALL OPFILEC(0,.TRUE.,FILNAM,LUN1,'O',ITYPE,
d1240 1
a1240 1
	IF (IRTFLG .NE. 0) GOTO 9000
d1253 2
a1254 2
      	IF (IRTFLG .NE. 0) GOTO 9000
	IF (ITYPE < 0) THEN
d1260 1
a1260 1
	CALL OPFILEC(0,.TRUE.,FILNAM2,LUN2,'O',ITYPE,
d1263 2
a1264 2
	IF (IRTFLG .NE. 0) GOTO 9000
	IF (ITYPE < 0) THEN
d1280 1
a1280 1
                 	
d1288 1
a1288 1
	IF (IRTFLG .NE. 0) GOTO 9000
@


1.169
log
@UTIL2SUPL call bug
@
text
@d58 1
d64 1
a64 1
C=* Copyright 1985-2012  Health Research Inc.,                         *
d891 11
a901 2
C	MA 	MASK
C	MA X	LATERAL MASKING IN SAMPLE DIRECTION
d904 1
a904 1
17	CALL OPFILEC(0,.TRUE.,FILNAM,LUN1,'O',ITYPE,
@


1.168
log
@MULTIPLIER FILE NAME OR TEMPLATE prompts
@
text
@d279 1
a279 1
              CALL UTIL2SUP('INPUT FILE NAME OR TEMPLATE~',
d291 1
a291 1
              CALL UTIL2SUP('INPUT FILE NAME OR TEMPLATE~',
d609 1
a609 1
     &                 LUN1,LUN2,LUN3, SIGN)
@


1.167
log
@for 'mu 2'... support
@
text
@d267 3
a269 1
              CALL UTIL2SUPL('INPUT','DIVISOR','OUTPUT',
d291 4
a294 2
              CALL UTIL2SUPL('INPUT','MULTIPLIER','OUTPUT',
     &                        SIGN)
@


1.166
log
@removed 'AR NORm'  now: NORM
@
text
@d57 1
d149 10
a158 3
           IF (FCHAR(4:4) == 'F' .OR. FCHAR(4:4) == 'R') THEN
              SIGN = 1000.0
              IF (FCHAR(4:4) == 'R') SIGN = 2000.0
d160 3
a162 1
              SIGN = +1.0
a163 3

           CALL UTIL2SUP('FIRST INPUT','NEXT INPUT','SUMMED OUTPUT',
     &               LUN1,LUN2,LUN3, SIGN)
d262 11
a272 3
        IF (FCHAR(4:4) == 'D' .OR. FCHAR(1:2) == '12') THEN
           CALL UTIL2SUP('INPUT','DIVISOR','OUTPUT',LUN1,LUN2,LUN3,
     &                    SIGN)
d274 9
a282 2
        ELSEIF (FCHAR(4:4) == 'O') THEN
           CALL UTIL2SUP('INPUT','SECOND INPUT','OUTPUT',
d284 1
a284 1

d286 9
a294 2
           CALL UTIL2SUP('INPUT','MULTIPLIER','OUTPUT',
     &               LUN1,LUN2,LUN3, SIGN)
a297 1

d404 2
a405 1
              CALL RDPRI1S(NSLICS,NOT_USED,'TOP Z COORDINATE',IRTFLG)
d445 1
a445 1
     &                 'SHIFT COMPONENTS IN X, Y, & Z',IRTFLG)
d504 1
a504 1
     &                     NSAM1,NROW1,NSLICE1,SAMS,ROWS,SLICS)
d575 1
a575 1
C	SQUARES POINT BY POINT FROM INPUT AND STORES IT IN OUTPUT
d596 9
a604 1
        CALL UTIL2SUP('INPUT','SUBTRACTED','OUTPUT',
d606 1
d829 2
a830 1
           CALL RDPRMC(EXPR,NLET,.TRUE.,'FORMULA: P2=',NULL,IRTFLG)
d907 1
a907 1
C       OPERATION ------------------------------------------------- 'WV' 
d938 1
a938 1
C       OPERATION  ------------------------------------------------ 'PP' 
d1019 2
a1020 1
     &            CALL NORM3(LUN1,NSAM1,NROW1,NSLICE1,FMAX1,FMIN1,AV)
d1026 1
a1026 1
     &            'ENTER NUMBER OF SLICES IN OUTPUT VOLUME',IRTFLG)
d1081 1
a1081 1
C       OPERATION    MASK MULTIPLICATION -------------------------- 'MM' 
d1106 1
a1106 1
C       OPERATION ------------------------------------------------- 'CM'
d1117 1
a1117 1
C       OPERATION  ------------------------------------------------ 'PV' 
d1122 1
a1122 1
C       OPERATION  ------------------------------------------------ 'NK' 
d1127 1
a1127 1
     &       'OPERATION FAILS ON CONVEX SURFACES, USE <SE> INSTEAD',NE)  
d1131 1
a1131 1
C       OPERATION ------------------------------------------------- 'AS'
@


1.165
log
@added 'AR NORM'
==
@
text
@a56 1
C                           'AR NORM'             ARDEAN LEITH 09/27/12
d763 1
a763 4
14      IF (FCHAR(4:5) == 'NO') THEN
            CALL UTIL_1010()
            GOTO 9000
        ENDIF
@


1.164
log
@added 'AS S'
@
text
@d57 1
d127 2
a128 2
        IF (FCHAR(1:4) .EQ. 'SQRT') GOTO 21 
        IF (FCHAR(1:2) .EQ. '12')  GOTO 6 
d131 1
a131 1
          IF (FCHAR(1:2) .EQ. FUNC(IFUNC)) THEN
d144 1
a144 1
1       IF (FCHAR(4:4) .EQ. 'S') THEN
d149 1
a149 1
           IF (FCHAR(4:4) .EQ. 'F' .OR. FCHAR(4:4) .EQ. 'R') THEN
d151 1
a151 1
              IF (FCHAR(4:4) .EQ. 'R') SIGN = 2000.0
d172 1
a172 1
        IF (ANS(:1) .EQ. 'Y') THEN
d204 1
a204 1
        IF (FCHAR(4:4) .EQ. 'S' .AND. IMAMI .NE. 1) THEN
d214 1
a214 1
	IF (IFORM .LT. 0) THEN
d256 1
a256 1
        IF (FCHAR(4:4) .EQ. 'D' .OR. FCHAR(1:2) .EQ. '12') THEN
d260 1
a260 1
        ELSEIF (FCHAR(4:4) .EQ. 'O') THEN
d285 1
a285 1
	IF (IRTFLG .EQ. -1) GOTO 7
d337 1
a337 1
        IF (ANS(1:1) .EQ. 'A') THEN  ! OBSOLETE INPUT RESPONSES
d339 1
a339 1
        ELSEIF (ANS(1:1) .EQ. 'S') THEN
d344 1
a344 1
        IF (ANS(:1) .EQ. 'Y' .OR. ANS(:1) .EQ. 'M') THEN
d349 1
a349 1
           IF (ANS(:1) .EQ. 'M') THEN
d383 1
a383 1
        USEBORDER = (ANS(:1) .EQ. 'B')
d414 1
a414 1
        IF (IFORM .EQ. 3) THEN
d420 1
a420 1
           IF (SLICS .EQ. TVAL) THEN
d426 3
a428 3
           IF (SAMS  .EQ. FLOAT(IFIX(SAMS)) .AND.
     &         ROWS  .EQ. FLOAT(IFIX(ROWS)) .AND.
     &         SLICS .EQ. FLOAT(IFIX(SLICS)))  THEN
d434 1
a434 1
	       IF (2*NSAM1 .GT. MAXDIM) THEN
d442 1
a442 1
	    IF (FCHAR(4:5) .EQ. 'F')  THEN
d457 1
a457 1
	       IF (INS .EQ. 0)  THEN
d471 1
a471 1
		IF (5*NSAM1 .GT. MAXDIM) THEN
d480 1
a480 1
        ELSEIF (IFORM .EQ. 1)  THEN
d490 1
a490 1
	   IF (2*NSAM1 .GT. MAXDIM) THEN
d512 1
a512 1
	       IF (INS .EQ. 0)  THEN
d530 1
a530 1
	       IF (6*NSAM1 .GT. MAXDIM) THEN
d598 1
a598 1
        IF (NSLICE1 .GT. 1 .AND. NSLICEW .EQ. -999999999) THEN
d607 3
a609 3
        IF ((NSAMW               .GT. NSAM1)   .OR.
     &      (NROWW               .GT. NROW1)   .OR.
     &      (NSLICEW             .GT. NSLICE1) .OR.
d617 1
a617 1
        IF (FCHAR(4:4) .EQ. 'B')
d649 1
a649 1
13      IF (FCHAR(4:6) .EQ. 'FIT')  THEN
d654 1
a654 1
        ELSEIF (FCHAR(4:5) .EQ. 'OD')  THEN
d662 1
a662 1
        IF (FCHAR(4:5) .EQ. 'AD') MAXIM = -1
d675 1
a675 1
        IF (MAXIM .GT. 0) MAXIM2 = MAXIM
d681 1
a681 1
        IF (FCHAR(4:6) .EQ. 'GNC') THEN
d685 1
a685 1
        ELSEIF (FCHAR(4:5) .EQ. 'AD')  THEN
d689 1
a689 1
        ELSEIF (FCHAR(4:5) .EQ. 'OR')  THEN
d699 1
a699 1
        ELSEIF (FCHAR(4:6) .EQ. 'MED') THEN
d703 1
a703 1
        ELSEIF (FCHAR(4:5) .EQ. 'HA') THEN
d708 1
a708 1
        ELSEIF (FCHAR(4:6) .EQ. 'LAH' ) THEN
d713 1
a713 1
        ELSEIF (FCHAR(4:5) .EQ. 'ST') THEN
d717 1
a717 1
        ELSEIF (FCHAR(4:5) .EQ. 'WA')  THEN
d721 1
a721 1
        ELSEIF (FCHAR(4:5) .EQ. 'HI') THEN
d725 1
a725 1
        ELSEIF (FCHAR(4:6) .EQ. 'MET') THEN
d729 5
a733 5
        ELSEIF (FCHAR(4:4) .EQ. 'V' .OR. FCHAR(4:4) .EQ. 'G' .OR.
     &          FCHAR(4:4) .EQ. 'R' .OR. FCHAR(4:4) .EQ. 'M' .OR.
     &          FCHAR(4:4) .EQ. 'L' .OR. FCHAR(4:4) .EQ. 'S' .OR.
     &          FCHAR(4:4) .EQ. 'P' .OR. FCHAR(4:4) .EQ. 'T' .OR.
     &          FCHAR(4:4) .EQ. 'F' .OR. FCHAR(4:5) .EQ. 'HU') THEN
d747 1
a747 1
           IF (MODE .EQ. 'H') THEN
d751 1
a751 1
           ELSEIF (MODE .EQ. 'L') THEN
d764 6
a769 1
14      IF (FCHAR(4:5) .NE. 'IF') MAXIM = -1
d771 1
a771 1

d777 2
a778 2
C       OPEN THE OUTPUT FILE
        IF (MAXIM .GT. 0) MAXIM2 = MAXIM
d784 1
a784 1
        IF (FCHAR(4:5) .EQ. 'IF') THEN
d788 1
a788 1
        ELSE IF (FCHAR(4:5) .EQ. 'SC') THEN
d799 1
a799 1
        NORMIT = (FCHAR(4:5) .EQ. 'SC')
d801 1
a801 1
        DO WHILE (IMGNUM .LT. MAXIM) 
d806 1
a806 1
           IF (FCHAR(4:5) .EQ. 'SC') THEN
d878 1
a878 1
18      IF ( FCHAR(4:4) .EQ. 'P') THEN
d909 1
a909 1
        IF (FCHAR(4:5) .EQ. 'LL') THEN
d914 1
a914 1
        ELSEIF (FCHAR(4:4) .EQ. 'S') THEN
d922 1
a922 1
           IF (IRTFLG .EQ. -1) GOTO 9000
d929 1
a929 1
           IF (IRTFLG .EQ. -1) GOTO 6400
d936 4
a939 4
           IF (IRTFLG .EQ. -1) GOTO 6401
           IF ((IORDER(1) .LT. 1 .OR. IORDER(1) .GT. 3) .OR.
     &         (IORDER(2) .LT. 1 .OR. IORDER(2) .GT. 3) .OR.
     &         (IORDER(3) .LT. 1 .OR. IORDER(3) .GT. 3)) THEN
d946 1
a946 1
           IF (IRTFLG .EQ. -1) GOTO 6402
d955 1
a955 1
	   IF (IRTFLG .EQ. -1) GOTO 6401
d965 1
a965 1
	   IF (NSAM1 .GT. MAXDIM) THEN
d971 1
a971 1
           IF (FCHAR(4:4) .EQ. 'P') THEN
d974 1
a974 1
           ELSEIF (FCHAR(4:4) .EQ. 'L') THEN
d977 1
a977 1
           ELSEIF (FCHAR(4:4) .EQ. 'V') THEN
d991 1
a991 1
              IF (IRTFLG .EQ. -1) GOTO 19
d997 1
a997 1
	      IF (IRTFLG .EQ. -1) GOTO 6511
d1030 1
a1030 1
        IF (FMIN .LT. 0) THEN
d1060 1
a1060 1
	IF (IRTFLG .EQ. -1) GOTO 22
d1159 1
a1159 1
	IF (NSAM1 .GT. MAXDIM) THEN
d1169 1
a1169 1
        IF (FCHAR(4:4) .EQ. 'C') THEN
d1204 1
a1204 1
	IF (ITYPE .LT. 0) THEN
d1214 1
a1214 1
	IF (ITYPE .LT. 0) THEN
@


1.163
log
@cosmetic, type prompt for 'pd' operation
@
text
@d56 1
d62 1
a62 1
C=* Copyright 1985-2011  Health Research Inc.,                         *
d1090 5
a1094 6
C	AS        ADD WITH VARIANCE COMPUTED 
C	AS X10	  OPTIONAL REGISTER TO HOLD AVE. OFFSET
C       AS AD     ADD TO THE EXISTING AVERAGE WITH VARIANCE COMPUTED.
C	AS DC     ADD WITH VARIANCE COMPUTED (NOW "AS R"        
C	AS F      ADD AND COMPUTE STATISTICS AND Q FACTOR MAP 
C	AS R      ADD WITH VARIANCE COMPUTED        
d1099 23
a1121 2
26      IF (FCHAR(4:4) .EQ. 'F') THEN
            CALL QFACT(LUN1,LUN2,LUN3)
d1123 3
a1125 4
          IF (FCHAR(4:5) .EQ. 'DC') THEN
              WRITE(NOUT,*) ' OPERATION RENAMED: AS R'
              FCHAR(4:5) = 'R '
           ENDIF
@


1.162
log
@interps needs maxdim
@
text
@d55 1
d164 3
a166 2
        CALL OPFILEC(0,.TRUE.,FILNAM,LUN2,'U',IFORM,NSAM2,NROW2,NSLICE2,
     &             MAXIM,'BLANK OUTPUT',.FALSE.,IRTFLG)
d171 3
a173 2
	   CALL OPFILEC(0,.TRUE.,FILNAM2,LUN1,'O',IDUM,NSAMR,NROWR,NDUM,
     &                MAXIM2,'REFERENCE',.FALSE.,IRTFLG)
d197 3
a199 2
4	CALL OPFILEC(0,.TRUE.,FILNAM,LUN1,'O',IFORM,NSAM1,NROW1,NSLICE1,
     &             MAXIM,'SMALL INPUT',.FALSE.,IRTFLG)
d206 4
a209 2
	CALL OPFILEC(0,.TRUE.,FILNAM,LUN2,'O',IFORM,NSAM2,NROW2,NSLICE2,
     &             MAXIM2,'LARGE INPUT (OVERWRITTEN!)',.TRUE.,IRTFLG)
d226 4
a229 2
        CALL PATCH(LUN1,LUN2,NSAM1,NROW1,NSLICE1,NSAM2,NROW2,NSLICE2,
     &             NSAMS,NROWS,NSLICES, IN,AV1,FCHAR(4:4),FMIN1,FMAX1,
d273 2
a274 1
     &          NSAM1,NROW1,NSLICE1,MAXIM,'SMALL INPUT',.FALSE.,IRTFLG)
d311 3
a313 2
8	CALL OPFILEC(0,.TRUE.,FILNAM,LUN1,'O',ITYPE,NSAM1,NROW1,NSLICE1,
     &             MAXIM,'INPUT',.FALSE.,IRTFLG)
d325 2
a326 1
     &             NSAM2,NROW2,NSLICE2,MAXIM2,'OUTPUT',.FALSE.,IRTFLG)
d331 10
a340 1
     &   'AVERAGE? (Y/N), (B)ORDER,(M)INIMUM,(C)IRCULAR',NULL,IRTFLG)
d383 2
a384 1
        CALL PATCH(LUN1,LUN2,NSAM1,NROW1,NSLICE1,NSAM2,NROW2,NSLICE2,
d397 3
a399 2
9	CALL OPFILEC(0,.TRUE.,FILNAM,LUN1,'O',ITYPE,NSAM1,NROW1,NSLICE1,
     &             MAXIM,'INPUT',.FALSE.,IRTFLG)
d404 2
a405 1
     &               NSAM1,NROW1,NSLICE1,MAXIM2,'OUTPUT',.FALSE.,IRTFLG)
d419 2
a420 1
              CALL RDPRM1S(SLICS,NOT_USED,'SHIFT COMPONENT IN Z',IRTFLG)
d459 2
a460 2
	       CALL SHIFT_PF(Q(1),NNNN/2,NSAM1,NROW1,NSLICE1,SAMS,ROWS,
     &                        SLICS)
d483 2
a484 1
         IF(REAL(IFIX(SAMS)).EQ.SAMS.AND.REAL(IFIX(ROWS)).EQ.ROWS) THEN
d547 3
a549 2
10      CALL OPFILEC(0,.TRUE.,FILNAM,LUN1,'O',ITYPE,NSAM1,NROW1,NSLICE1,
     &              MAXIM,'INPUT',.TRUE.,IRTFLG)
d554 2
a555 1
     &              NSAM1,NROW1,NSLICE1,MAXIM2,'OUTPUT',.TRUE.,IRTFLG)
d558 2
a559 1
        CALL IMSQ(.FALSE.,LUN1,LUN3,ITYPE,NSAM1,NROW1,NSLICE1,IRTFLG)
d566 2
a567 2
        CALL UTIL2SUP('INPUT','SUBTRACTED','OUTPUT',LUN1,LUN2,LUN3,
     &                 SIGN)
d576 3
a578 2
12	CALL OPFILEC(0,.TRUE.,FILNAM,LUN1,'O',ITYPE,NSAM1,NROW1,NSLICE1,
     &             MAXIM,'INPUT',.FALSE.,IRTFLG)
d585 2
a586 1
     &              NSAM2,NROW2,NSLICE2,MAXIM2,'OUTPUT',.FALSE.,IRTFLG)
d615 2
a616 1
        IF (FCHAR(4:4) .EQ. 'B')CALL RDPRM(BACK,NOT_USED,'BACKGROUND')
d661 3
a663 2
	CALL OPFILEC(0,.TRUE.,FILNAM,LUN1,'O',ITYPE,NSAM1,NROW1,NSLICE1,
     &             MAXIM,'INPUT',.FALSE.,IRTFLG)
d666 2
a667 1
        IF(IMAMI.NE.1) CALL NORM3(LUN1,NSAM1,NROW1,NSLICE1,FMAX,FMIN,AV)
d675 2
a676 1
     &             NSAM1,NROW1,NSLICE1,MAXIM2,'OUTPUT',.TRUE.,IRTFLG)
d734 2
a735 1
           CALL FILTER(LUN1,LUN2,NSAM1,NROW1,NSLICE1,MAXIM,FCHAR(4:5),
d765 3
a767 2
        CALL OPFILEC(0,.TRUE.,FILNAM,LUN1,'O',ITYPE,NSAM1,NROW1,NSLICE1,
     &             MAXIM,'INPUT',.TRUE.,IRTFLG)
d773 2
a774 1
     &             NSAM1,NROW1,NSLICE1,MAXIM2,'OUTPUT',.TRUE.,IRTFLG)
d803 2
a804 1
              CALL ARITH(LUN1,LUN2,NSAM1,NROW1,NSLICE1,EXPR(1:NLET))
d813 3
a815 2
15	CALL OPFILEC(0,.TRUE.,FILNAM,LUN1,'O',ITYPE,NSAM1,NROW1,NSLICE1,
     &             MAXIM,'INPUT',.FALSE.,IRTFLG)
d820 2
a821 1
     &               NSAM1,NROW1,NSLICE1,MAXIM2,'OUTPUT',.TRUE.,IRTFLG)
d830 2
a831 1
     &            NSAM1,NROW1,NSLICE1,MAXIM,'INPUT',.FALSE.,IRTFLG)
d836 2
a837 1
     &             NSAM1,NROW1,NSLICE1,MAXIM2,'OUTPUT',.TRUE.,IRTFLG)
d849 2
a850 1
     &               NSAM1,NROW1,NSLICE1,MAXIM,'INPUT',.FALSE.,IRTFLG)
d858 2
a859 1
     &            NSAM1,NROW1,NSLICE1,MAXIM2,'OUTPUT',.TRUE.,IRTFLG)
d878 2
a879 1
     &              NSAM1,NROW1,NSLICE1,MAXIM,'INPUT',.FALSE.,IRTFLG)
d886 2
a887 1
     &              NSAM2,NROW2,NSLICE2,MAXIM2,'OUTPUT',.FALSE.,IRTFLG)
d945 3
a947 2
           CALL OPFILEC(0,.TRUE.,FILNAM,LUN1,'U',ITYPE,NSAM,NROW,NSLICE,
     &             MAXIM,'OUTPUT',.FALSE.,IRTFLG)
d955 2
a956 1
     &             NSAM1,NROW1,NSLICE1,MAXIM,'INPUT',.FALSE.,IRTFLG)
d988 2
a989 1
     &             NSAM1,NROW1,NSLICE2, MAXIM2,'OUTPUT',.FALSE.,IRTFLG)
d992 2
a993 2
              CALL IMTOVOL(LUN1,NSAM1,NROW1,NSLICE2,LUN2,FMIN1,FMAX1,
     &                     MAXDIM)
d1007 3
a1009 2
20	CALL OPFILEC(0,.TRUE.,FILNAM,LUN1,'O',ITYPE,NSAM1,NROW1,NSLICE1,
     &             MAXIM,'INPUT',.FALSE.,IRTFLG)
d1020 2
a1021 1
     &               NSAM1,NROW1,NSLICE1,MAXIM,'INPUT',.FALSE.,IRTFLG)
d1030 2
a1031 1
     &             NSAM1,NROW1,NSLICE1,MAXIM,'OUTPUT',.TRUE.,IRTFLG)
d1034 2
a1035 1
        CALL IMSQ(.TRUE.,LUN1,LUN3,ITYPE,NSAM1,NROW1,NSLICE1,IRTFLG)
d1129 3
a1131 2
28	CALL OPFILEC(0,.TRUE.,FILNAM,LUN1,'O',ITYPE,NSAM1,NROW1,NSLICE1,
     &             MAXIM,'INPUT',.FALSE.,IRTFLG)
d1139 2
a1140 1
     &            NSAM1,NROW1,NSLICE1,MAXIM2,'OUTPUT',.TRUE.,IRTFLG)
d1151 3
a1153 2
29	CALL OPFILEC(0,.TRUE.,FILNAM,LUN1,'O',ITYPE,NSAM1,NROW1,NSLICE1,
     &             MAXIM,'INPUT',.TRUE.,IRTFLG)
d1161 3
a1163 2
30	CALL OPFILEC(0,.TRUE.,FILNAM,LUN1,'O',ITYPE,NSAM1,NROW1,NSLICE1,
     &             MAXIM,'INPUT',.TRUE.,IRTFLG)
d1174 3
a1176 2
31      CALL OPFILEC(0,.TRUE.,FILNAM1,LUN1,'O',ITYPE,NSAM1,NROW1,
     &            NSLICE1,MAXIM,'FIRST INPUT',.FALSE.,IRTFLG)
d1184 3
a1186 2
	CALL OPFILEC(0,.TRUE.,FILNAM2,LUN2,'O',ITYPE,NSAM2,NROW2,
     &             NSLICE2,MAXIM2,'SECOND INPUT',.FALSE.,IRTFLG)
d1209 3
a1211 2
        CALL OPFILEC(0,.TRUE.,FILNAM3,LUN3,'U',ITYPE,NSAM3,NROW3,
     &            NSLICE3,MAXIM,'OUTPUT',.FALSE.,IRTFLG)
@


1.161
log
@CAN HANDLE FOURIER x REAL comment
@
text
@d235 1
a235 1
5	CALL INTERPS()
@


1.160
log
@can mult. real * complex
@
text
@d988 1
d990 3
a992 2
22      CALL OPFILEC(0,.TRUE.,FILNAM,LUN1,'O',ITYPE,NSAM1,NROW1,NSLICE1,
     &             MAXIM,'MASK REFERENCE',.FALSE.,IRTFLG)
d997 3
a999 2
	CALL OPFILEC(0,.TRUE.,FILNAM,LUN2,'O',ITYPE,NSAM2,NROW2,NSLICE2,
     &             MAXIM2,'IMAGE (OVERWRITTEN!)',.TRUE.,IRTFLG)
@


1.159
log
@fp not fs  for new interp
@
text
@d54 1
d745 1
a745 1
C          AR SCA
d749 1
a749 1
C          PLAIN AR 
a998 4
	IF (IFORM .LT. 0 .AND. IFORM .NE. -9) THEN
           IER = 2
           GOTO 9900
        ENDIF
@


1.158
log
@fbs  'rtk'
@
text
@d53 1
a53 1
C                           'IP FS'               ARDEAN LEITH  5/23/11
d232 1
a232 1
C	IP FS      FOURIER BASED SPLINE INTERPOLATION
@


1.157
log
@extracted interps.f  for 'IP'
@
text
@d52 2
d59 1
a59 1
C=* Copyright 1985-2010  Health Research Inc.,                         *
d227 1
d229 1
a229 1
C	IP         INTERPOLATE                                      
d231 2
@


1.156
log
@REMOVED 'NK'
@
text
@d51 1
d229 2
a230 75
5	CALL OPFILEC(0,.TRUE.,FILNAM,LUN1,'O',IFORM,NSAM1,NROW1,NSLICE1,
     &             MAXIM,'INPUT',.FALSE.,IRTFLG)
	IF (IRTFLG .NE. 0) GOTO 9000

        IF (FCHAR(4:4) .EQ. 'T' .AND. NSLICE1 > 1) THEN
C          TRIANGULAR INTERPOLATION
           CALL ERRT(101,'OPERATION DOES NOT WORK ON VOLUMES',NE)
           GOTO 9000
        ENDIF

C	GET OUTPUT FILE  NAME
        CALL FILERD(FILNAM,NLETO,NULL,'OUTPUT',IRTFLG)
        IF (IRTFLG .EQ. -1) GOTO 9000

        NSAM2   = 0
        NROW2   = 0
        IF (NSLICE1 .GT. 1) THEN
           NSLICE2 = -1
           CALL RDPRI3S(NSAM2,NROW2,NSLICE2,NOT_USED,
     &                'ENTER DIMENSIONS, NSAM, NROW, & NSLICE',IRTFLG)
           IF (IRTFLG .NE. 0) GOTO 9000

           IF (NSLICE2 .LE. -1) THEN
              CALL RDPRI1S(NSLICE2,NOT_USED,'ENTER NSLICE',IRTFLG)
              IF (IRTFLG .NE. 0) GOTO 9000
           ENDIF

           IF (NSLICE2 .EQ. 0) THEN
              NSLICE2 = (FLOAT(NSAM2) / FLOAT(NSAM1)) * FLOAT(NSLICE2)
           ENDIF
        ELSE
           NSLICE2 = 1
           CALL RDPRIS(NSAM2,NROW2,NOT_USED,
     &                'ENTER DIMENSIONS, NSAM & NROW',IRTFLG)
           IF (IRTFLG .NE. 0) GOTO 9000
        ENDIF

C	FOR RECTANGULAR IMAGES, THE USER IS ALLOWED TO ENTER ONLY
C	ONE DIMENSION, THE OTHER DIM. IS COMPUTED TO KEEP THE SAME 
C	RELATION AS THE ONE BETWEEN THE DIMS. OF INPUT.

        IF (NROW2 .EQ. 0) THEN
           NROW2 = (FLOAT(NSAM2) / FLOAT(NSAM1)) * FLOAT(NROW1)
        ENDIF

C	OPEN THE OUTPUT FILE
	CALL OPFILEC(LUN1,.FALSE.,FILNAM,LUN2,'U',IFORM,
     &             NSAM2,NROW2,NSLICE2, MAXIM2,'OUTPUT',.TRUE.,IRTFLG)
	IF (IRTFLG .NE. 0) GOTO 9000

        IF (FCHAR(4:4) .EQ. 'T') THEN
C          TRIANGULAR INTERPOLATION
           CALL TRINTER(LUN1,LUN2,NSAM1,NROW1,1,NSAM2,NROW2,1)

        ELSE
           IF (NSLICE1 .EQ. 1)  THEN
              CALL INTERP(LUN1,LUN2,NSAM1,NROW1,NSAM2,NROW2,MAXDIM)
           ELSE
              CALL INTERP3(LUN1,LUN2,NSAM1,NROW1,NSLICE1,
     &                     NSAM2,NROW2,NSLICE2,MAXDIM)
           ENDIF
        ENDIF

C       FILE HEADER FOR PIXSIZ HAS CHANGED
        SCALEX = FLOAT(NSAM1)   / FLOAT(NSAM2)
        SCALEY = FLOAT(NROW1)   / FLOAT(NROW2)
        SCALEZ = FLOAT(NSLICE1) / FLOAT(NSLICE2) 

        SCALET = SCALEX
        IF (SCALEY .NE. SCALEX) SCALET = 0.0   ! X NOT SAME AS Y
        IF (NSLICE1 > 1 .AND. SCALEZ .NE. SCALEX) SCALET = 0.0

C       UPDATE THE INCORE HEADER VALUE & FILE HEADER FOR PIXSIZ
        !write(6,*) ' Scaling by: ',scalet
        CALL SETPRMS(LUN2, SCALET,IRTFLG)
a231 1
        GOTO 9000                            
@


1.155
log
@FCHAR(4:4) .EQ. 'T' .AND. NSLICE1 > 1  error message returned
@
text
@d50 2
a51 1
C
d1097 4
a1100 10
C	OPEN INPUT FILE
25	CALL OPFILEC(0,.TRUE.,FILNAM,LUN1,'O',ITYPE,NSAM1,NROW1,NSLICE1,
     &             MAXIM,'INPUT',.FALSE.,IRTFLG)
	IF (IRTFLG .NE. 0) GOTO 9000

  	CALL OPFILEC(LUN1,.TRUE.,FILNAM,LUN2,'U',ITYPE,
     &             NSAM1,NROW1,NSLICE1,MAXIM2,'OUTPUT',.TRUE.,IRTFLG)
	IF (IRTFLG .NE. 0) GOTO 9000

        CALL SHR(LUN1,LUN2,NSAM1,NSAM2)
@


1.154
log
@OPFILEC(LUN1 bug for IP
@
text
@d49 1
a49 1
C                           'IP' SETPRS           ARDEAN LEITH 11/23/10
d230 6
@


1.153
log
@'IP' SETPRS
@
text
@d267 1
a267 1
	CALL OPFILEC(LUN2,.FALSE.,FILNAM,LUN2,'U',IFORM,
d289 1
a289 1
        SCALET  = SCALEX
d292 1
d294 1
a295 1
        !write(6,*) ' Scaling 256 by: ',scalet
@


1.152
log
@GPL_2010
@
text
@d49 1
a87 1
        COMMON /COMMUN1/          FILNAM1,FILNAM2,FILNAM3
d89 15
a103 2
	PARAMETER       (NFUNC=31)
        CHARACTER(LEN=2),DIMENSION(NFUNC) :: FUNC
a104 7
        REAL ,DIMENSION(3)              :: FWA
        INTEGER ,DIMENSION(3)           :: IORDER,ISIZE
        REAL, ALLOCATABLE, DIMENSION(:) :: Q
        CHARACTER(LEN=MAXNAM)           :: EXPR
        CHARACTER(LEN=1)                :: MODE,NULL
        CHARACTER(LEN=2)                :: ANS
        LOGICAL                         :: NORMIT,USEBORDER
a113 2
	DATA  LUN1,LUN2,LUN3,LUN4/21,22,23,70/

d231 1
a231 1
C	OPEN THE OUTPUT FILE
d260 1
a260 1
C	RELATION AS THE ONE BETWEEN THE DIMS. OF INPUT1.
d266 2
a267 1
	CALL OPFILEC(LUN1,.FALSE.,FILNAM,LUN2,'U',IFORM,
d283 13
@


1.151
log
@rdprmb parameters
@
text
@a50 2
C=* FROM: SPIDER - MODULAR IMAGE PROCESSING SYSTEM.   AUTHOR: J.FRANK  *
C=* Copyright (C) 1985-2009  Health Research Inc.                      *
d52 5
a56 2
C=* HEALTH RESEARCH INCORPORATED (HRI),                                *   
C=* ONE UNIVERSITY PLACE, RENSSELAER, NY 12144-3455.                   *
d58 1
a58 3
C=* Email:  spider@@wadsworth.org                                       *
C=*                                                                    *
C=* This program is free software; you can redistribute it and/or      *
d63 1
a63 1
C=* This program is distributed in the hope that it will be useful,    *
d65 1
a65 1
C=* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU  *
a66 1
C=*                                                                    *
d68 1
a68 3
C=* along with this program; if not, write to the                      *
C=* Free Software Foundation, Inc.,                                    *
C=* 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.      *
@


1.150
log
@NSLICEW=-999999999
@
text
@d48 2
d52 1
a52 1
C=* Copyright (C) 1985-2007  Health Research Inc.                      *
d220 1
a220 1
        CALL SETPRMB(BUF,LUN2,NSAM2,NROW2,0.0,0.0,0.0,'U')
d338 1
a338 1
        CALL SETPRMB(BUF,LUN2,NSAM2,NROW2,0.,0.,0.,'U')
d413 1
a413 1
        CALL SETPRMB(BUF,LUN2,NSAM2,NROW2,0.,0.,0.,'U')
d1053 1
a1053 1
        CALL SETPRMB(BUF,LUN2,NSAM2,NROW2,0.0,0.0,0.0,'U')
@


1.149
log
@wi no pixel warning bug
@
text
@d47 1
a47 1
C
d50 1
a50 1
C=* Copyright (C) 1985-2005  Health Research Inc.                      *
d603 2
a604 1
        NSLICEW = 1
d609 9
@


1.148
log
@NSLICEW bug with windowing slice from vol
@
text
@d603 1
a603 1
        NSLICEW = 0
@


1.147
log
@no uppercase in AR formula read
@
text
@d3 44
a46 43
C UTIL2.F               CHANGED:  MAHIEDDINE LADJADJ           4/23/93
C                                 JING SU                      8/24/93
C                                 REWRITTEN ARDEAN LEITH       8/30/96
C                                 ADDED "PP S"   ARDEAN LEITH  4/08/98
C                                 STACKS IN "AD" ARDEAN LEITH 01/11/99
C                                 REWROTE "AD".. ARDEAN LEITH 04/03/99
C                                 USED RDPRM3S   ARDEAN LEITH 08/05/99
C                                 USED ALLOCATE  ARDEAN LEITH 01/04/01
C                                 'PA' & 'IN' 3D ARDEAN LEITH 03/01/01
C                                 'CE VAR'       ARDEAN LEITH 05/01/01
C                                 'CE RAN'       ARDEAN LEITH 05/02/01
C                                 'CE MAX'       ARDEAN LEITH 05/03/01
C                                 'CE MIN'       ARDEAN LEITH 05/03/01
C                                 'CE LAP'       ARDEAN LEITH 05/03/01
C                                 'CE SOB'       ARDEAN LEITH 05/03/01
C                                 'CE PRE'       ARDEAN LEITH 05/03/01
C                                 'CE TOP'       ARDEAN LEITH 05/04/01
C                                 'CE RIDGE'     ARDEAN LEITH 05/08/01
C                                 'CE HURST'     ARDEAN LEITH 05/08/01
C                                 'CE HARALICK'  ARDEAN LEITH 05/16/01
C                                 NORM3 IN CE    ARDEAN LEITH 04/02/02
C                                 'CE LAHE'      ARDEAN LEITH 04/10/02
C                                 'CE AD'        ARDEAN LEITH 04/18/02
C                                 'CE OR'        ARDEAN LEITH 04/18/02
C                                 'AR SCA'       ARDEAN LEITH 09/11/02
C                                 'AR SCA' NORM3 ARDEAN LEITH 10/04/02
C                                 STACKS SUPPORT ARDEAN LEITH 10/04/02 
C                                 'CE L' REMOVED ARDEAN LEITH 11/19/02 
C                                 'WI' x,Y,Z     ARDEAN LEITH 12/02/02  
C                                 OPFILEC        ARDEAN LEITH  3/18/03  
C                                 'AD F'         ARDEAN LEITH  3/24/03    
C                                 'AD S'         ARDEAN LEITH  4/21/03    
C                                 'DIV'          ARDEAN LEITH  5/30/03    
C                                 'SQRT'         ARDEAN LEITH  5/30/03   
C                                RDPRM3S BUG     ARDEAN LEITH  9/05/03   
C                                GPRP            ARDEAN LEITH  9/08/03
C                                MPI             CHAO YANG    10/31/03
C                                USEBORDER       ARDEAN LEITH 11/21/03
C                                'PD' LOCATION   ARDEAN LEITH  5/14/04
C                                MPI REMOVED     CHAO YANG    11/19/04
C                                'CE WA'         ARDEAN LEITH 11/19/04
C                                'CE ME'         ARDEAN LEITH 06/22/05
C                                'BL' AV BUG     ARDEAN LEITH 03/30/06
d608 7
a614 7
        IF (NSLICE2 .LE. 1) THEN
           NSLICEW = 1
        ELSEIF (NSLICEW .LE. 0) THEN
C          STILL MAY NEED TO INQUIRE AS TO NSLICEW
           NSLICEW = 1
           CALL RDPRI1S(NSLICEW,NOT_USED,'TOP SLICE',IRTFLG)
           IF (IRTFLG .NE. 0) GOTO 9000
@


1.146
log
@BL b undefined bug
@
text
@d782 1
@


1.145
log
@watershed call wrong
@
text
@d45 1
d167 2
a170 1
           CALL BLANK(LUN2,NSAM2,NROW2,NSLICE2,B)
d172 1
a173 2

            CALL BLANK(LUN2,NSAM2,NROW2,NSLICE2,B)
d175 1
@


1.144
log
@GPL License fixed
@
text
@d713 1
a713 1
           CALL WATERSHED(LUN1,LUN2,NSAM1,NROW1,NSLICE1,FMIN1,IRTFLG)
@


1.143
log
@HRI GPL License used
@
text
@a46 1
C * SPIDER - MODULAR IMAGE PROCESSING SYSTEM.    AUTHOR: J.FRANK       *
d50 1
a50 1
C=* HEALTH RESEARCH INCORPORATED (HRI),                                *  
a69 6

C * COPYRIGHT (C)1985, 2005. HEALTH RESEARCH INCORPORATED (HRI),       *
C * ONE UNIVERSITY PLACE, RENSSELAER, NY 12144-3455.                   *
C * THE CONTENTS OF THIS DOCUMENT ARE PROPRIETARY TO HRI AND ARE NOT   *
C * TO BE DISCLOSED TO OTHERS OR USED FOR PURPOSES OTHER THAN INTENDED *
C * WITHOUT WRITTEN APPROVAL OF HRI.                                   *
@


1.142
log
@added CE MET call
@
text
@d48 24
@


1.141
log
@watershed call had disappeared, replaced
@
text
@d29 9
a37 9
C                                 STACKS SUPPORT ARDEAN LEITH 10/04/02 *
C                                 'CE L' REMOVED ARDEAN LEITH 11/19/02 *
C                                 'WI' x,Y,Z     ARDEAN LEITH 12/02/02 *
C                                 OPFILEC        ARDEAN LEITH  3/18/03 *
C                                 'AD F'         ARDEAN LEITH  3/24/03 *  
C                                 'AD S'         ARDEAN LEITH  4/21/03 *  
C                                 'DIV'          ARDEAN LEITH  5/30/03 *  
C                                 'SQRT'         ARDEAN LEITH  5/30/03 * 
C                                RDPRM3S BUG     ARDEAN LEITH  9/05/03 * 
d44 1
d627 1
d647 1
a647 1
        IF(IMAMI.NE.1)CALL NORM3(LUN1,NSAM1,NROW1,NSLICE1,FMAX,FMIN,AV)
d702 4
a717 3
cc           WRITE(NOUT,*) 'OPERATION RENAMED, PREFERRED USAGE NOW: ',
cc     &                   '-- CE HI --  OR  -- CE ST --'

d736 1
@


1.140
log
@Removed MPI
@
text
@d42 2
d47 1
a47 1
C * COPYRIGHT (C)1985, 2003. HEALTH RESEARCH INCORPORATED (HRI),       *
d74 2
a75 2
        REAL ,DIMENSION(3) ::           FWA
        INTEGER ,DIMENSION(3) ::        IORDER,ISIZE
d77 4
a80 4
        CHARACTER(LEN=MAXNAM) ::    EXPR
        CHARACTER(LEN=1) ::         MODE,NULL
        CHARACTER(LEN=2) ::         ANS
        LOGICAL   ::                NORMIT,USEBORDER
d111 1
a111 1
C       OPERATION  ADD -------------------------------------------- 'AD' 
d131 1
a131 1
C       OPERATION ------   BLANK ---------------------------------- 'BL'	
d158 1
a158 1
C       OPERATION ----------- COPY  ------------------------------- 'CP' 
d162 1
a162 1
C       OPERATION -------- INSERT --------------------------------- 'IN' 
d200 1
a200 1
C       OPERATION  INTERPOLATE  ----------------------------------- 'IP'
d261 1
a261 1
C       OPERATION  MULTIPLY --------------------------------------- 'MU' 
d605 1
a605 1
C       OPERATION ------------------------------------------------- 'CE' 
d692 4
d733 1
a733 1
C       OPERATION  -----------------------------------------------  'AR' 
d1072 1
a1072 1
C       OPERATION  ------------------------------------------------ 'MN' 
d1080 1
a1080 1
C       OPERATION ------------------------------------------------- 'TH'
@


1.139
log
@added CE WA for watershed
@
text
@a89 9
#ifdef USE_MPI    
        include 'mpif.h'
        INTEGER  MYPID, COMM, IERR 
        COMM = MPI_COMM_WORLD
        CALL MPI_COMM_RANK(COMM, MYPID, IERR) 
#else
        MYPID = -1
#endif  

a623 1
C	CE WA        USING WATERSHED 
a661 5

        ELSEIF (FCHAR(4:5) .EQ. 'WA')  THEN
C          WATERSHED 
	   CALL WATERSHED(LUN1,LUN2,NSAM1,NROW1,NSLICE1,FMIN1,IRTFLG)

a732 45
#ifdef USE_MPI
        CALL OPFILEC(0,.TRUE.,FILNAM,LUN1,'O',ITYPE,NSAM1,NROW1,
     &               NSLICE1, MAXIM,'INPUT',.TRUE.,IRTFLG)
        IF (IRTFLG .NE. 0) GOTO 9000
C
C       OPEN THE OUTPUT FILE
        IF (MAXIM .GT. 0) MAXIM2 = MAXIM
C       CHECK THE FILENAME TO SEE IF THE OUTPUT IS INLINE
        CALL FILERD(FILNAM,NLETI,NULL,'OUTPUT',IRTFLG)
        IF (MYPID .EQ. 0 .or. FILNAM(1:1) .EQ. '_') THEN
           CALL OPFILEC(LUN1,.FALSE.,FILNAM,LUN2,'U',ITYPE,
     &             NSAM1,NROW1,NSLICE1,MAXIM2,'OUTPUT',.TRUE.,IRTFLG)
           IF (IRTFLG .NE. 0) GOTO 9000
   
           IF (FCHAR(4:5) .EQ. 'IF') THEN
              CALL ARITHL(LUN1,LUN2,NSAM1,NROW1,NSLICE1)
              GOTO 9000
   
           ELSE IF (FCHAR(4:5) .EQ. 'SC') THEN
C             AR SCA
              CALL RDPRM2S(FLOW,FHI,NOT_USED,
     &                  'NEW IMAGE MIN. & MAX.',IRTFLG)
           ELSE
C             PLAIN AR 
              CALL RDPRMC(EXPR,NLET,.TRUE.,'FORMULA: P2=',NULL,IRTFLG)
           ENDIF
           IF (IRTFLG .NE. 0) GOTO 9000
   
           NORMIT = (FCHAR(4:5) .EQ. 'SC')
           IMGNUM = -3
           DO WHILE (IMGNUM .LT. MAXIM) 
              CALL GETSTACK(LUN1,LUN2,IMGNUM,MAXIM,
     &                   VERBOSE,.FALSE.,FDUM,NORMIT,IRTFLG)
              IF (IRTFLG .NE. 0) GOTO 9000
   
              IF (FCHAR(4:5) .EQ. 'SC') THEN
                 CALL ARITHSCA(LUN1,LUN2,NSAM1,NROW1,NSLICE1,
     &                      FMIN,FMAX,FLOW,FHI)
              ELSE
                 CALL ARITH(LUN1,LUN2,NSAM1,NROW1,NSLICE1,EXPR(1:NLET))
              ENDIF
           ENDDO
        END IF
        CALL MPI_BCAST(IBCNT, 1, MPI_INTEGER, 0, COMM, IERR)
#else
a770 1
#endif
a780 14
#ifdef USE_MPI
C       CHECK THE FILENAME TO SEE IF THE OUTPUT IS INLINE
        CALL FILERD(FILNAM,NLETI,NULL,'OUTPUT',IRTFLG)
        IF (MYPID .EQ. 0 .OR. FILNAM(1:1) .EQ. '_') THEN
C	   OPEN THE OUTPUT FILE
	   CALL OPFILEC(LUN1,.FALSE.,FILNAM,LUN2,'U',ITYPE,
     &                  NSAM1,NROW1,NSLICE1,MAXIM2,'OUTPUT',
     &                  .TRUE.,IRTFLG)
	   IF (IRTFLG .NE. 0) GOTO 9000

           CALL MIRROR(LUN1,LUN2,NSAM1,NROW1,NSLICE1)
        ENDIF 
        CALL MPI_BCAST(IBCNT, 1, MPI_INTEGER, 0, COMM, IERR)
#else
a786 1
#endif
@


1.138
log
@opfilec & gprp wron pararm fixed
@
text
@d633 1
d672 5
@


1.137
log
@maxim2 on 'sq'
@
text
@d674 2
a675 1
	   CALL OPFILEC(LUN1,.TRUE.,FILNAM,LUN3,'U',NSAM1,NROW1,NSLICE1,
d1188 1
a1188 1
        CALL GPRP(LUN1,NSAM1,NROW1,NSLICE1,FCHAR,IRTFLG)
@


1.136
log
@gprp & filter_har had bad # of params passed
@
text
@d557 1
a557 1
     &              NSAM1,NROW1,NSLICE1,MAXIM,'OUTPUT',.TRUE.,IRTFLG)
@


1.135
log
@PD top left prompts rdpris not rdpri3s for image
@
text
@d687 1
a687 1
     &                     FMIN1,FMAX1,SIG1)
d1178 1
a1178 1
        CALL GPRP(LUN1,NSAM1,NROW1,NSLICE1,FCHAR,IRTFLG)
@


1.134
log
@cd vs
@
text
@d41 2
a368 5
        NSLICS = -1000000
        CALL RDPRI3S(NSAMS,NROWS,NSLICS,NOT_USED,
     &              'TOP LEFT COORDINATES',IRTFLG)
        IF (IRTFLG .NE. 0) GOTO 9000

d370 1
d372 7
a378 4
        ELSEIF (NSLICS .LE. -1000000) THEN
C          STILL MAY NEED TO INQUIRE AS TO NSLICS
           NSLICS = 1
           CALL RDPRI1S(NSLICS,NOT_USED,'TOP Z COORDINATE',IRTFLG)
d380 6
d387 1
@


1.133
log
@patch parameter added for border
@
text
@d611 1
d647 1
d678 2
a679 1
           CALL FILTER_HAR(LUN1,LUN2,NSAM1,NROW1,NSLICE1,FMIN1,FMAX1)
d684 1
a684 1
     &                 MAXIM,'LH',FMIN1,FMAX1)
d702 1
a702 1
     &                 FMIN1,FMAX1)
@


1.132
log
@mpi
@
text
@d40 1
d76 1
a76 1
        LOGICAL   ::                NORMIT
d198 2
a199 1
     &             NSAMS,NROWS,NSLICES, IN,AV1,FCHAR(4:4),FMIN1,FMAX1)
d317 1
a317 1
     &             FMIN1,FMAX1)
d381 3
a383 2
C       A 'B' IS A SIGNAL FOR PATCH
        IF (ANS(:1) .EQ. 'B') B = 100000
d386 1
a386 1
     &             FMIN1,FMAX1)
@


1.131
log
@irtflg set to 0
@
text
@d39 1
d87 9
d727 45
d810 2
d821 14
d841 1
@


1.130
log
@bad rdpri3s
@
text
@d89 1
@


1.129
log
@gprp pull out
@
text
@d398 1
a398 1
           CALL RDPRI3S(SAMS,ROWS,SLICS,NOT_USED,
@


1.128
log
@rdpri3s NOt rdprm3s
@
text
@d38 1
a38 1
C 
d1086 1
a1086 1
C       OPERATION  GP -- (GET PIXEL VALUE)------------------------- 'GP' 
a1089 30
	IF (NSAM1 .GT. MAXDIM) THEN
          IER = 9
          GOTO 9900
        END IF

        IF (NSLICE1 .LE. 1) THEN
	   CALL RDPRIS(IX,IY,NOT_USED,'COLUMN & ROW',IRTFLG)
	   IZ = 1
        ELSE
           IZ = 0
           CALL RDPRI3S(IX,IY,IZ,NOT_USED,
     &                 'COLUMN, ROW, & SLICE',IRTFLG)
           IF (IRTFLG .NE. 0) GOTO 9000
           IF (IZ .LE. 0) THEN
               CALL RDPRI1S(IZ,NOT_USED,'SLICE',IRTFLG)
           ENDIF
        ENDIF
        IF (IRTFLG .NE. 0) GOTO 9000

	IREC = IY + (IZ-1) * NROW1
	IF (IX .LT. 1 .OR. IX .GT. NSAM1 .OR.
     &      IY .LT. 1 .OR. IY .GT. NROW1 .OR.
     &      IZ .LT. 1 .OR. IZ .GT. NSLICE1) THEN
          IER = 44
          GOTO 9900
        END IF
	CALL  REDLIN(LUN1,BUF,NSAM1,IREC)

	WRITE(NOUT,8901)  IX,IY,IZ,BUF(IX)
8901	FORMAT('  LOCATION: ',3I7,'  VALUE: ',1PE12.5)
d1091 1
a1091 1
        CALL REG_SET_NSEL(1,1,BUF(IX), 0.0, 0.0, 0.0, 0.0, IRTFLG)
d1094 1
a1094 1
C       OPERATION  RP -------------------------------------------- 'RP' 
a1098 18
	IF (NSAM1 .GT. MAXDIM) THEN
          IER = 9
          GOTO 9900
        END IF

        IF (NSLICE1 .LE. 1) THEN
	   CALL RDPRIS(IX,IY,NOT_USED,'COLUMN & ROW',IRTFLG)
	   IZ = 1
        ELSE
           IZ = 0
           CALL RDPRI3S(IX,IY,IZ,NOT_USED,
     &                 'COLUMN, ROW, & SLICE',IRTFLG)
           IF (IRTFLG .NE. 0) GOTO 9000
           IF (IZ .LE. 0) THEN
               CALL RDPRI1S(IZ,NOT_USED,'SLICE',IRTFLG)
           ENDIF
        ENDIF
        IF (IRTFLG .NE. 0) GOTO 9000
d1100 1
a1100 21
	IF (IX .LT. 1 .OR. IX .GT. NSAM1 .OR.
     &      IY .LT. 1 .OR. IY .GT. NROW1 .OR.
     &      IZ .LT. 1 .OR. IZ .GT. NSLICE1) THEN
          IER = 44
          GOTO 9900
        END IF
	IREC = IY+(IZ-1) * NROW1
	CALL  REDLIN(LUN1,BUF,NSAM1,IREC)

        CALL REG_GET_USED(NREG)
	IF (NREG .GT. 0)  THEN
C          DEPRECATED REGISTER INPUT (NO LONGER IN MANUAL)
           CALL REG_GET_NSEL(1,BUF(IX), FDUM, FDUM, FDUM, FDUM, IRTFLG)
	ELSE
	   CALL RDPRM(BUF(IX),NOT_USED,'NEW PIXEL VALUE')
	ENDIF
	CALL WRTLIN(LUN1,BUF,NSAM1,IREC)

C       SET UNDETERMINED SATATISTICS FLAG FOR REAL FILES
        IF (IFORM.GT.0) 
     &      CALL SETPRMB(BUF,LUN1,NSAM1,NROW1,0.0,0.0,0.0,'U')
d1103 1
a1103 2

C       OPERATION    MAXIMUM -------------------------------------- 'MX' 
a1109 1
     
a1118 1
     
d1125 3
a1127 3
        IF ((NSAM1 .NE. NSAM2) .AND. (NROW1 .NE. NROW2) 
     &          .AND. (NSLICE1 .NE. NSLICE2) ) THEN 
     
d1140 1
a1140 1
        MAXIM = 0
a1144 1
        
@


1.127
log
@gp , rp prompt
@
text
@d37 1
d398 1
a398 1
           CALL RDPRM3S(SAMS,ROWS,SLICS,NOT_USED,
d1100 1
a1100 1
           CALL RDPRM3S(IX,IY,IZ,NOT_USED,
d1139 1
a1139 1
           CALL RDPRM3S(IX,IY,IZ,NOT_USED,
@


1.126
log
@row,col & slice on one line for gp rp
@
text
@d1095 1
a1095 1
	   CALL RDPRIS(IX,IY,NOT_USED,'COLUMN, ROW',IRTFLG)
d1134 1
a1134 1
	   CALL RDPRIS(IX,IY,NOT_USED,'COLUMN, ROW',IRTFLG)
@


1.125
log
@div
@
text
@d1085 1
a1085 2
C       OPERATION  GP -------------------------------------------- 'GP' 
C	GP        GET PIXEL VALUE          
d1093 15
a1107 5
	CALL RDPRMI(IX,IY,NOT_USED,'COLUMN, ROW')
	IZ = 1
	IF (IFORM.GT.1 .OR. IFORM.LT.-20)  THEN
	   CALL RDPRMI(IZ,IDUM,NOT_USED,'SLICE')
	ENDIF
a1119 1
C       IF (NSEL(1) .NE. 0)  PARAM(NSEL(1)) = BUF(IX)
d1132 15
a1146 5
	CALL RDPRMI(IX,IY,NOT_USED,'COLUMN, ROW')
	IZ = 1
	IF (IFORM.GT.1 .OR. IFORM.LT.-20)  THEN
	   CALL RDPRMI(IZ,IDUM,NOT_USED,'SLICE')
	ENDIF
@


1.124
log
@nslice into blank
@
text
@d35 3
d40 1
a40 1
C * COPYRIGHT (C)1985, 2002. HEALTH RESEARCH INCORPORATED (HRI),       *
d61 2
a62 2
        CHARACTER(LEN=MAXNAM) ::  FILNAM1,FILNAM2,FILNAM3
        COMMON /COMMUN1/FILNAM1,FILNAM2,FILNAM3
d70 1
a70 1
        CHARACTER(LEN=MAXNAM) ::    EXPR,FILNAM
d73 1
a73 1
        LOGICAL   ::                FIRST,NORMIT,WANTNEXT,MUSTGET
d89 3
d253 4
a256 4
C	MU       MULTIPLY REAL OR COMPLEX FILES 
C	MU D     DIVIDE REAL FILES
C	MU M     MULTIPLY FIRST COMPLEX FILE BY THE SECOND CONJUGATED.
C	MU O     MULTIPLY WITH ARITHMETIC OR
d259 1
a259 1
        IF (FCHAR(4:4) .EQ. 'D') THEN
@


1.123
log
@rdpri3 for pd
@
text
@d136 1
a136 1
           CALL BLANK(LUN2,NSAM2,NROW2,B)
d139 2
a140 1
            CALL BLANK(LUN2,NSAM2,NROW2,B)
@


1.122
log
@bl can do volume
@
text
@d343 16
a358 4
        CALL RDPRMI(NSAMS,NROWS,NOT_USED,'TOP LEFT COOS')
        NSLICS = 1
        IF (NSLICE2 .NE. 1)
     &    CALL RDPRMI(NSLICS,NDUM,NOT_USED,'TOP Z COORDINATE')
@


1.121
log
@ads
@
text
@d119 1
a119 1
2   	IFORM   = 1
d121 1
a121 1
        NSLICE2 = 1
@


1.120
log
@rdprm3s bad in 'sh'
@
text
@d34 1
d100 4
a103 3
1       IF (FCHAR(4:4) .EQ. 'F' .OR. FCHAR(4:4) .EQ. 'R') THEN
           SIGN = 1000.0
           IF (FCHAR(4:4) .EQ. 'R') SIGN = 2000.0
d105 6
a110 2
           SIGN = +1.0
        ENDIF
d112 1
a112 1
        CALL UTIL2SUP('FIRST INPUT','NEXT INPUT','SUMMED OUTPUT',
d114 1
a115 1

@


1.119
log
@'ad f'
@
text
@d372 1
a372 1
           CALL RDPRM2S(SAMS,ROWS,SLICS,NOT_USED,
@


1.118
log
@added mx
@
text
@d33 1
a33 1
C
d72 6
a77 5
     1	          'MU', 'PA', 'PD', 'SH', 'SQ',
     2            'SU', 'WI', 'CE', 'AR', 'MR',
     3            'DF', 'MA', 'WV', 'PP', 'SZ', 
     4            'WU', 'MM', 'CM', 'PV', 'NK', 
     5            'AS', 'MN', 'TH', 'GP', 'RP', 'MX'/ 
d99 7
a105 1
1       SIGN = +1.0
d243 1
a243 1
C	MU O     MULITPLY WITH ARITHMETIC OR
d247 2
a248 1
           CALL UTIL2SUP('INPUT','DIVISOR','OUTPUT',LUN1,LUN2,LUN3,SIGN)
d519 2
a520 1
        CALL UTIL2SUP('INPUT','SUBTRACTED','OUTPUT',LUN1,LUN2,LUN3,SIGN)
@


1.117
log
@opfilec
@
text
@d60 1
a60 1
	PARAMETER       (NFUNC=30)
d76 2
a77 1
     5            'AS', 'MN', 'TH', 'GP', 'RP'/  
d88 1
a88 1
     &            21, 22, 23, 24, 25, 26, 27, 28, 29, 30 ) IFUNC
d1117 51
@


1.116
log
@nsam1
@
text
@d32 1
d35 6
a40 6
C *  SPIDER - MODULAR IMAGE PROCESSING SYSTEM.    AUTHOR: J.FRANK      *
C *  COPYRIGHT (C)1985, 2002 HEALTH RESEARCH INCORPORATED, ALBANY, NY. *
C * THE CONTENTS OF THIS DOCUMENT ARE PROPRIETARY TO HEALTH            *
C * RESEARCH INC. AND ARE NOT TO BE DISCLOSED TO OTHERS OR USED        *
C * FOR PURPOSES OTHER THAN INTENDED WITHOUT WRITTEN APPROVAL OF       *
C * HEALTH RESEARCH INC.                                               *
d42 1
a42 1

d61 1
a61 1
        CHARACTER *2    FUNC(NFUNC)
d63 2
a64 2
        REAL            FWA(3)
        INTEGER         IORDER(3),ISIZE(3)
d108 1
a108 1
        CALL OPFIL(.TRUE.,FILNAM,LUN2,'U',NSAM2,NROW2,NSLICE2,
d114 1
a114 1
	   CALL OPFIL(.TRUE.,FILNAM2,LUN1,'O',NSAMR,NROWR,NDUM,
d137 1
a137 1
4	CALL OPFIL(.TRUE.,FILNAM,LUN1,'O',NSAM1,NROW1,NSLICE1,
d145 1
a145 1
	CALL OPFIL(.TRUE.,FILNAM,LUN2,'O',NSAM2,NROW2,NSLICE2,
d174 1
a174 1
5	CALL OPFIL(.TRUE.,FILNAM,LUN1,'O',NSAM1,NROW1,NSLICE1,
d181 22
a202 4
        CALL RDPRMI(NSAM2,NROW2,NOT_USED,'ENTER DIMS NSAM,NROW')
        NSLICE2 = 1
        IF (IFORM .EQ. 3 .AND. NSLICE1 .NE. 1) THEN
          CALL RDPRMI(NSLICE2,NDUM,NOT_USED,'NSLICE')
d208 1
d210 1
a210 1
           NROW2 = FLOAT(NSAM2) / FLOAT(NSAM1) * FLOAT(NROW1)
d213 2
a214 2
	CALL OPFIL(.FALSE.,FILNAM,LUN2,'U',NSAM2,NROW2,NSLICE2,
     &             MAXIM2,'OUTPUT',.TRUE.,IRTFLG)
d220 1
a228 3

C       SET UNDETERMINED STATISTICS FLAG
        CALL SETPRMB(BUF,LUN2,NSAM2,NROW2,0.0,0.0,0.0,'U')
d255 2
a256 2
7	CALL OPFILE(.TRUE.,FILNAM,LUN1,'O',IFORM1,NSAM1,NROW1,NSLICE1,
     &             MAXIM,'SMALL INPUT',.FALSE.,IRTFLG)
d262 2
a263 1
	CALL OPFILE(.TRUE.,FILNAM,LUN2,'O',IFORM2,NSAM2,NROW2,NSLICE2,
d292 2
a293 2
C	OPEN FIRST INPUT FILE
8	CALL OPFILE(.TRUE.,FILNAM,LUN1,'O',ITYPE,NSAM1,NROW1,NSLICE1,
d305 2
a306 3
        
        CALL OPFILE(.TRUE.,FILNAM,LUN2,'U',ITYPE,NSAM2,NROW2,NSLICE2,
     &             MAXIM2,'OUTPUT',.FALSE.,IRTFLG)
d348 1
a348 1
9	CALL OPFIL(.TRUE.,FILNAM,LUN1,'O',NSAM1,NROW1,NSLICE1,
d353 2
a354 2
	CALL OPFIL(.TRUE.,FILNAM,LUN2,'U',NSAM1,NROW1,NSLICE1,
     &             MAXIM2,'OUTPUT',.FALSE.,IRTFLG)
d357 14
a370 1
        CALL RDPRM2(SAMS,ROWS,NOT_USED,'SHIFT COMPONENTS IN X-Y')
d372 12
a383 13
	IF (IFORM.EQ.3) THEN
C         SHIFT IN 3-D
          CALL RDPRM(SLICS,NOT_USED,'SHIFT COMPONENT IN Z')
          IF (SAMS  .EQ. FLOAT(IFIX(SAMS)) .AND.
     &        ROWS  .EQ. FLOAT(IFIX(ROWS)) .AND.
     &        SLICS .EQ. FLOAT(IFIX(SLICS)))  THEN
            NSAMS  = SAMS
            NROWS  = ROWS
            NSLICS = SLICS
	    IF (2*NSAM1 .GT. MAXDIM) THEN
	       IER = 6
	       GOTO 9900
	    ENDIF
d385 2
a386 2
            CALL SHIFT3(LUN1,LUN2,NSAM1,NROW1,NSLICE1,
     &                  NSAMS,NROWS,NSLICS)
d425 1
d427 3
d494 1
a494 1
10      CALL OPFILE(.TRUE.,FILNAM,LUN1,'O',ITYPE,NSAM1,NROW1,NSLICE1,
d499 2
a500 2
 	CALL OPFILE(.TRUE.,FILNAM,LUN3,'U',ITYPE,NSAM1,NROW1,NSLICE1,
     &             MAXIM,'OUTPUT',.TRUE.,IRTFLG)
d519 1
a519 1
12	CALL OPFIL(.TRUE.,FILNAM,LUN1,'O',NSAM1,NROW1,NSLICE1,
d526 2
a527 2
        CALL OPFIL(.TRUE.,FILNAM,LUN2,'U',NSAM2,NROW2,NSLICE2,
     &             MAXIM2,'OUTPUT',.FALSE.,IRTFLG)
d589 1
a589 1
	CALL OPFIL(.TRUE.,FILNAM,LUN1,'O',NSAM1,NROW1,NSLICE1,
d599 2
a600 2
	CALL OPFIL(.TRUE.,FILNAM,LUN2,'U',NSAM1,NROW1,NSLICE1,
     &             MAXIM2,'OUTPUT',.TRUE.,IRTFLG)
d614 1
a614 1
	   CALL OPFIL(.TRUE.,FILNAM,LUN3,'U',NSAM1,NROW1,NSLICE1,
d680 1
a680 1
        CALL OPFIL(.TRUE.,FILNAM,LUN1,'O',NSAM1,NROW1,NSLICE1,
d686 2
a687 2
        CALL OPFIL(.TRUE.,FILNAM,LUN2,'U',NSAM1,NROW1,NSLICE1,
     &             MAXIM2,'OUTPUT',.TRUE.,IRTFLG)
d720 2
a721 2
C       OPERATION  -----------------------------------------------  'MR'
C	MIRROR SYMMETRY
d723 1
a723 1
15	CALL OPFIL(.TRUE.,FILNAM,LUN1,'O',NSAM1,NROW1,NSLICE1,
d726 1
d728 2
a729 2
	CALL OPFIL(.TRUE.,FILNAM,LUN2,'U',NSAM1,NROW1,NSLICE1,
     &             MAXIM2,'OUTPUT',.TRUE.,IRTFLG)
d731 1
d734 5
a738 5
C
C       OPERATION  ------------------------------------------------ 'DF' 
C	DENSITY FOLDOVER
16	CALL OPFIL(.TRUE.,FILNAM,LUN1,'O',NSAM1,NROW1,NSLICE1,
     &             MAXIM,'INPUT',.FALSE.,IRTFLG)
d742 2
a743 2
	CALL OPFIL(.TRUE.,FILNAM,LUN2,'U',NSAM1,NROW1,NSLICE1,
     &             MAXIM2,'OUTPUT',.TRUE.,IRTFLG)
d753 3
a755 3
C	OPEN FIRST INPUT FILE
17	CALL OPFIL(.TRUE.,FILNAM,LUN1,'O',NSAM1,NROW1,NSLICE1,
     &             MAXIM,'INPUT',.FALSE.,IRTFLG)
d762 2
a763 2
  	CALL OPFIL(.TRUE.,FILNAM,LUN2,'U',NSAM1,NROW1,NSLICE1,
     &             MAXIM2,'OUTPUT',.TRUE.,IRTFLG)
d781 2
a782 2
	CALL OPFIL(.TRUE.,FILNAM,LUN1,'O',NSAM1,NROW1,NSLICE1,
     &             MAXIM,'INPUT',.FALSE.,IRTFLG)
d788 2
a789 2
        CALL OPFIL(.TRUE.,FILNAM,LUN2,'U',NSAM2,NROW2,NSLICE2,
     &             MAXIM2,'OUTPUT',.FALSE.,IRTFLG)
d847 1
a847 1
           CALL OPFIL(.TRUE.,FILNAM,LUN1,'U',NSAM,NROW,NSLICE,
d855 2
a856 2
           CALL OPFIL(.TRUE.,FILNAM,LUN1,'O',NSAM1,NROW1,NSLICE1,
     &             MAXIM,'INPUT',.FALSE.,IRTFLG)
d887 2
a888 2
              CALL OPFIL(.TRUE.,FILNAM,LUN2,'U',NSAM1,NROW1,NSLICE2,
     &             MAXIM2,'OUTPUT',.FALSE.,IRTFLG)
d906 1
a906 1
20	CALL OPFIL(.TRUE.,FILNAM,LUN1,'O',NSAM1,NROW1,NSLICE1,
d917 2
a918 2
21	CALL OPFILE(.TRUE.,FILNAM1,LUN1,'O',ITYPE,NSAM1,NROW1,NSLICE1,
     &             MAXIM,'INPUT',.FALSE.,IRTFLG)
d926 2
a927 2
	CALL OPFILE(.TRUE.,FILNAM3,LUN3,'U',ITYPE,NSAM1,NROW1,NSLICE1,
     &             MAXIM,'OUTPUT',.TRUE.,IRTFLG)
d937 1
a937 1
22      CALL OPFIL(.TRUE.,FILNAM,LUN1,'O',NSAM1,NROW1,NSLICE1,
d943 1
a943 1
	CALL OPFIL(.TRUE.,FILNAM,LUN2,'O',NSAM2,NROW2,NSLICE2,
d962 1
a962 1
23  	CALL OPFIL(.TRUE.,FILNAM,LUN2,'U',256,256,1,
d979 1
a979 1
25	CALL OPFIL(.TRUE.,FILNAM,LUN1,'O',NSAM1,NROW1,NSLICE1,
d983 2
a984 2
  	CALL OPFIL(.TRUE.,FILNAM,LUN2,'U',NSAM1,NROW1,NSLICE1,
     &             MAXIM2,'OUTPUT',.TRUE.,IRTFLG)
d1031 1
a1031 1
28	CALL OPFIL(.TRUE.,FILNAM,LUN1,'O',NSAM1,NROW1,NSLICE1,
d1039 2
a1040 2
 	CALL OPFIL(.TRUE.,FILNAM,LUN2,'U',NSAM1,NROW1,NSLICE1,
     &             MAXIM2,'OUTPUT',.TRUE.,IRTFLG)
d1052 1
a1052 1
29	CALL OPFIL(.TRUE.,FILNAM,LUN1,'O',NSAM1,NROW1,NSLICE1,
d1082 1
a1082 1
30	CALL OPFIL(.TRUE.,FILNAM,LUN1,'O',NSAM1,NROW1,NSLICE1,
@


1.115
log
@luni --> lun1 bug
@
text
@d632 1
a632 1
              CALL LOCAL(LUN1,LUN2,NSAM,NROW,NSLICE)
@


1.114
log
@put back local call
@
text
@d605 1
a605 1
           CALL EHIST(FILNAM,LUNI,LUNO,NSAM1,NROW1,NSLICE1)
d629 1
a629 1
              CALL EHIST(FILNAM,LUNI,LUNO,NSAM1,NROW1,NSLICE1)
@


1.113
log
@wi x,y,z input line
@
text
@d619 2
a620 2
           WRITE(NOUT,*) 'OPERATION RENAMED, PREFERRED USAGE NOW: ',
     &                   '-- CE HI --  OR  -- CE ST --'
d623 2
a624 1
     &        '(S)TRETCH OR (H)ISTOGRAM EQUALIZE ? (S/H)', NULL,IRTFLG)
d632 2
a633 1
              CALL ERRT(101,'USE OPERATION -- CE LAHE -- INSTEAD',NE)
@


1.112
log
@bad nsam1
@
text
@d31 1
d495 15
a509 4
        CALL RDPRMI(NSAMW,NROWW,NOT_USED,'TOP LEFT COORDINATES')
        NSLICEW = NSLICE1
        IF (IFORM .EQ. 3 .AND. NSLICE1 .NE. 1)
     &     CALL RDPRMI(NSLICEW,NDUM,NOT_USED,'TOP SLICE')
d512 2
a513 2
        IF (FCHAR(4:4) .EQ. 'B') 
     &     CALL RDPRM(BACK,NOT_USED,'BACKGROUND')
@


1.111
log
@arithl & filter calls had wrong parameters
@
text
@d593 1
a593 1
           CALL EHIST(FILNAM,LUNI,LUNO,NSAM,NROW,NSLICE)
d616 2
a617 1
              CALL EHIST(FILNAM,LUNI,LUNO,NSAM,NROW,NSLICE)
@


1.110
log
@CE HI
@
text
@d584 2
a585 1
           CALL FILTER(LUN1,LUN2,NSAM1,NROW1,NSLICE1,'LH',FMIN1,FMAX1)
d642 1
a642 1
           CALL ARITHL(LUN1,LUN2,NSAM1,NROW1,NSLICE1,EXPR)
@


1.109
log
@ce st & ce hi
@
text
@d586 8
d598 1
a598 1
     &          FCHAR(4:4) .EQ. 'F' .OR. FCHAR(4:4) .EQ. 'H') THEN
a603 8
        ELSEIF (FCHAR(4:5) .EQ. 'ST') THEN
C          CONTRAST STRETCHING
           CALL ENHANC('S',FILNAM2,LUN1,LUN2,NSAM1,NROW1,NSLICE1)

        ELSEIF (FCHAR(4:5) .EQ. 'HI') THEN
C          HISTOGRAM EQUALIZATION
           CALL ENHANC('H',FILNAM2,LUN1,LUN2,NSAM1,NROW1,NSLICE1)

d606 1
a606 1
           WRITE(NOUT,*) 'OPERATION RENAMED, PREFERRED USAGE IS NOW: ',
d613 4
a616 1
           IF (MODE .EQ. 'L') THEN
d618 2
a619 1
              GOTO 9000
a620 2

           CALL ENHANC(MODE,FILNAM2,LUN1,LUN2,NSAM1,NROW1,NSLICE1)
@


1.108
log
@stacks support
@
text
@d30 1
d55 1
a55 1
        CHARACTER *81   FILNAM1,FILNAM2,FILNAM3
a57 2
        LOGICAL		WANTNEXT,MUSTGET
        CHARACTER *81   FILNAM
d59 2
a60 3
        CHARACTER *2    FUNC(NFUNC),ANS
        LOGICAL         FIRST,NORMIT
        CHARACTER       NULL
d64 4
a67 2
        CHARACTER(LEN=MAXNAM) ::    EXPR

d596 8
d605 14
a618 2
C          STRETCH, HISTOGRAM EQUALIZE, OR LOCAL HISTOGRAM
           CALL ENHANC(FILNAM2,LUN1,LUN2,NSAM1,NROW1,NSLICE1)
@


1.107
log
@stacks
@
text
@d61 1
a61 1
        LOGICAL         FIRST
d546 1
d562 2
a563 2
	   CALL ANISO(LUN1,LUN2,NSAM1,NROW1,NSLICE1,MAXIM,
     &                FMIN1,FMAX1,IRTFLG)
a610 3
        IF (IMAMI.NE.1)CALL NORM3(LUN1,NSAM1,NROW1,NSLICE1,FMAX,FMIN,AV)
        FMIN1 = FMIN
        FMAX1 = FMAX
d632 1
d635 2
a636 1
           CALL GETSTACK(LUN1,LUN2,NSAM1,IMGNUM,MAXIM,VERBOSE,IRTFLG)
d638 1
d641 1
a641 1
     &                      FMIN1,FMAX1,FLOW,FHI)
@


1.106
log
@ar sca needed  norm3
@
text
@d29 1
d541 2
a542 1
C       OPEN INPUT FILE
d551 1
d561 2
a562 1
	   CALL ANISO(LUN1,LUN2,NSAM1,NROW1,NSLICE1,FMIN1,FMAX1,IRTFLG)
d592 1
a592 1
           CALL FILTER(LUN1,LUN2,NSAM1,NROW1,NSLICE1,FCHAR(4:5),
@


1.105
log
@th m    prompt
@
text
@d28 1
d606 1
@


1.104
log
@ar sca
@
text
@d951 1
a951 1
     &             MAXIM,'IMAGE TO BE THRESHOLDED',.FALSE.,IRTFLG)
@


1.103
log
@arith call needed nlet
@
text
@d27 1
d605 3
a607 1
        
d616 6
d623 4
d628 3
a630 1
           CALL RDPRMC(EXPR,NLET,.TRUE.,'FORMULA: P2=',NULL,IRTFLG)
d632 4
a635 6

           IMGNUM = -3
           DO WHILE (IMGNUM .LT. MAXIM) 
              CALL GETSTACK(LUN1,LUN2,NSAM1,IMGNUM,MAXIM,VERBOSE,IRTFLG)
              IF (IRTFLG .NE. 0) GOTO 9000

d637 2
a638 2
           ENDDO
        ENDIF
@


1.102
log
@stack for ar
@
text
@d623 1
a623 1
              CALL ARITH(LUN1,LUN2,NSAM1,NROW1,NSLICE1,EXPR)
@


1.101
log
@norm for 'AR SCA'
@
text
@a26 1
C                                 'AR SCA'       ARDEAN LEITH 09/10/02
d47 1
d63 1
d65 1
d562 1
a562 1
     &             MAXIM2,'MAGNITUDE OUTPUT',.TRUE.,IRTFLG)
d598 4
a601 2
C	OPEN INPUT FILE
14	CALL OPFIL(.TRUE.,FILNAM,LUN1,'O',NSAM1,NROW1,NSLICE1,
d603 7
a609 3
	IF (IRTFLG .NE. 0) GOTO 9000
        FMIN1 = FMIN
        FMAX1 = FMAX
a610 4
C	OPEN THE OUTPUT FILE
	CALL OPFIL(.TRUE.,FILNAM,LUN2,'U',NSAM1,NROW1,NSLICE1,
     &             MAXIM2,'OUTPUT',.TRUE.,IRTFLG)
	IF (IRTFLG .NE. 0) GOTO 9000
d612 1
a612 6
           CALL ARITHL(LUN1,LUN2,NSAM1,NROW1,NSLICE1)
        ELSEIF (FCHAR(4:5) .EQ. 'SC') THEN
C          RESCALE IMAGE
           IF (IMAMI .NE. 1) 
     &        CALL NORM3(LUN,NSAM1,NROW1,NSLICE1,FMAX1,FMIN1,AV)
            CALL ARITHSCA(LUN1,LUN2,NSAM1,NROW1,NSLICE1,FMIN1,FMAX1)
d614 11
a624 1
           CALL ARITH(LUN1,LUN2,NSAM1,NROW1,NSLICE1)
@


1.100
log
@ar sca bug
@
text
@d610 4
a613 1
           CALL ARITHSCA(LUN1,LUN2,NSAM1,NROW1,NSLICE1,FMIN1,FMAX1)
@


1.99
log
@arithsca
@
text
@d27 1
d600 2
d610 1
a610 1
           CALL ARITHSCA(LUN1,LUN2,NSAM1,NROW1,NSLICE1,FMIN,FMAX)
@


1.98
log
@prompt for 'ce or'
@
text
@d606 2
@


1.97
log
@added 'CE OR'
@
text
@d559 1
a559 1
     &             MAXIM2,'CONFIDENCE OUTPUT',.TRUE.,IRTFLG)
@


1.96
log
@aniso call changed
@
text
@d26 1
d521 1
d553 10
a562 1
	   CALL  ANISO(LUN1,LUN2,NSAM1,NROW1,NSLICE1,FMIN1,FMAX1,IRTFLG)
@


1.95
log
@*** empty log message ***
@
text
@d3 4
a6 4
C UTIL2.F               CHANGED:  MAHIEDDINE LADJADJ          4/23/93
C                                 JING SU                     8/24/93
C                                 REWRITTEN ARDEAN LEITH      8/30/96
C                                 ADDED "PP S"   ARDEAN LEITH 4/08/98
d551 1
a551 2
C          ANISOTROPIC DIFFUSION
	   CALL  ANISO(LUN1,LUN2,NSAM1,NROW1,NSLICE1,IRTFLG)
@


1.94
log
@added lahe
@
text
@d25 1
d519 1
d530 1
d549 4
@


1.93
log
@lahe --> 'lh'
@
text
@d534 1
a542 2
        IF(IMAMI.NE.1)CALL NORM3(LUN1,NSAM1,NROW1,NSLICE1,FMAX,FMIN,AV)

a567 4

        ELSEIF (FCHAR(4:6) .EQ. 'LAH' ) THEN
C          LAHE
           CALL FILTER(LUN1,LUN2,NSAM1,NROW1,NSLICE1,'LH',FMIN1,FMAX1)
@


1.92
log
@lahe
@
text
@d556 4
@


1.91
log
@NORM3 in CE needed
@
text
@d24 1
d517 1
d563 6
a568 1
           CALL FILTER(LUN1,LUN2,NSAM1,NROW1,NSLICE1,FCHAR(4:5),FMIN1)
@


1.90
log
@formatting of nout output
@
text
@d23 1
d27 1
a27 1
C *  COPYRIGHT (C)1985, 2001 HEALTH RESEARCH INCORPORATED, ALBANY, NY. *
a37 1
C        1         2         3         4         5         6         7
d540 1
d552 1
a552 2
           CALL FILTER_HAR(LUN1,LUN2,NSAM1,NROW1,NSLICE1,
     &                     FCHAR(4:5),FMIN1,FMAX1)
@


1.89
log
@nloop,iloop_removed
@
text
@d940 1
a940 1
8901	FORMAT(' LOCATION=',3I7,' VALUE=',1PE12.5)
@


1.88
log
@NLOOPD a bug
@
text
@d113 1
a113 1
            CALL RDPRM(B,NLOOP,ILOOP,'BACKGROUND')
d147 1
a147 1
        CALL RDPRI3S(NSAMS,NROWS,NSLICES,NLOOP,ILOOP,
d170 1
a170 1
        CALL RDPRMI(NSAM2,NROW2,NLOOP,ILOOP,'ENTER DIMS NSAM,NROW')
d173 1
a173 1
          CALL RDPRMI(NSLICE2,NDUM,NLOOP,ILOOP,'NSLICE')
d247 1
a247 1
        CALL RDPRI3S(NSAMS,NROWS,NSLICES,NLOOP,ILOOP,
d297 1
a297 1
              CALL RDPRM(B,NLOOP,ILOOP,'BACKGROUND')
d300 1
a300 1
        CALL RDPRMI(NSAMS,NROWS,NLOOP,ILOOP,'TOP LEFT COOS')
d303 1
a303 1
     &    CALL RDPRMI(NSLICS,NDUM,NLOOP,ILOOP,'TOP Z COORDINATE')
d329 1
a329 1
        CALL RDPRM2(SAMS,ROWS,NLOOP,ILOOP,'SHIFT COMPONENTS IN X-Y')
d333 1
a333 1
          CALL RDPRM(SLICS,NLOOP,ILOOP,'SHIFT COMPONENT IN Z')
d485 1
a485 1
        CALL RDPRMI(NSAMW,NROWW,NLOOP,ILOOP,'TOP LEFT COORDINATES')
d488 1
a488 1
     &     CALL RDPRMI(NSLICEW,NDUM,NLOOP,ILOOP,'TOP SLICE')
d492 1
a492 1
     &     CALL RDPRM(BACK,NLOOP,ILOOP,'BACKGROUND')
d681 1
a681 1
           CALL RDPRI3S(ISIZE(1),ISIZE(2),ISIZE(3),NLOOP,ILOOP,
d688 1
a688 1
           CALL RDPRM3S(FWA(1),FWA(2),FWA(3),NLOOP,ILOOP,
d696 1
a696 1
     &         NLOOP,ILOOP,'ORDER FOR X, Y, & Z',IRTFLG)
d748 1
a748 1
6511            CALL RDPRI1S(NSLICE2,NLOOP,ILOOP,
d925 1
a925 1
	CALL RDPRMI(IX,IY,NLOOP,ILOOP,'COLUMN, ROW')
d928 1
a928 1
	   CALL RDPRMI(IZ,IDUM,NLOOP,ILOOP,'SLICE')
d955 1
a955 1
	CALL RDPRMI(IX,IY,NLOOP,ILOOP,'COLUMN, ROW')
d958 1
a958 1
	   CALL RDPRMI(IZ,IDUM,NLOOP,ILOOP,'SLICE')
d974 1
a974 1
	   CALL RDPRM(BUF(IX),NLOOP,ILOOP,'NEW PIXEL VALUE')
@


1.87
log
@reg_get_nsel deprecated
@
text
@d688 1
a688 1
           CALL RDPRM3S(FWA(1),FWA(2),FWA(3),NLOOPD,ILOOPD,
d696 1
a696 1
     &         NLOOPD,ILOOPD,'ORDER FOR X, Y, & Z',IRTFLG)
@


1.86
log
@"AR" can open fourier file.
@
text
@d971 1
a971 1
C          BUF(IX) = PARAM(NSEL(1))
@


1.85
log
@fixed 'PP v' bug
@
text
@d574 1
a574 1
     &             MAXIM,'INPUT',.FALSE.,IRTFLG)
@


1.84
log
@bug in in & pa with mixed reg & value input
@
text
@d518 1
a518 1
C          FITS HISTOGRAM OF IMAGE FILE TO THE HISTOGRAM OF REF. FILE. 	  CALL  HISTE(MAXDIM)
d740 2
d743 1
a743 1
     &            CALL NORM3(LUN1,NSAM1,NROW1,NSLICE1,FMAX,FMIN,AV)
d757 1
a757 1
              CALL IMTOVOL(LUN1,NSAM1,NROW1,NSLICE2,LUN2,FMIN,FMAX,
@


1.83
log
@added filter_har call
@
text
@d144 2
d151 1
a151 1
        IN     = 1
d244 2
@


1.82
log
@'CE FIT' was lost
@
text
@d22 1
d510 2
d529 1
d544 5
@


1.81
log
@ce hurst
@
text
@d512 2
a513 1
	   GOTO  9911
@


1.80
log
@ce ridge
@
text
@d21 1
d544 1
a544 1
     &          FCHAR(4:4) .EQ. 'F' .OR. FCHAR(4:4) .EQ. '*') THEN
d546 1
a546 1
C          PREWITT, TOP-HAT, FREI-CHEN, RIDGE
@


1.79
log
@*** empty log message ***
@
text
@d20 1
d507 1
d523 1
d545 2
a546 2
C          PREWITT, TOP-HAT, FREI-CHEN
           CALL FILTER(LUN1,LUN2,NSAM1,NROW1,NSLICE1,FCHAR(4:5))
@


1.78
log
@sobel & prewit for 'CE'
@
text
@d19 1
d539 4
a542 2
     &          FCHAR(4:4) .EQ. 'P') THEN
C          VARIANCE, GRADIENT, RANGE, MAX, MIN, LAPLACIAN, SOBEL, PREWITT
d546 1
a546 1
C          STRETCH, HISTOGRAM EQUALIZE OR LOCAL
@


1.77
log
@added ce s & ce p
@
text
@d503 2
d539 1
a539 1
C          VARIANCE, GRADIENT, RANGE, MAX, MIN, LAPLACIAN
@


1.76
log
@added CE options
@
text
@d17 2
d535 2
a536 1
     &          FCHAR(4:4) .EQ. 'L') THEN
@


1.75
log
@added ce ran
@
text
@d13 4
a16 1
C                                 'CE RAN'       ARDEAN LEITH 05/01/01
d498 3
d503 2
a504 2
	  CALL  HISTE(MAXDIM)
	  GOTO  9911
d507 3
a509 2
	  CALL  HISTOD
	  GOTO  9911
d522 1
d524 6
a529 1
            CALL GNC(LUN1,LUN2,NSAM1,NROW1)
d532 3
a534 2
     &          FCHAR(4:4) .EQ. 'R') THEN
C          VARIANCE, GRADIENT OR RANGE
a536 3
        ELSEIF (FCHAR(4:6) .EQ. 'MED') THEN
           CALL MEDIAN(LUN1,LUN2,NSAM1,NROW1,NSLICE1)

d538 1
@


1.74
log
@added filter for "CE G" & "CE VAR"
@
text
@d13 1
d493 2
a494 1
C	CE G         USING GRADIENT FILTER 
d518 3
a520 2
        ELSEIF (FCHAR(4:4) .EQ. 'V' .or. FCHAR(4:4) .EQ. 'G') THEN
C          VARIANCE OR GRADIENT
@


1.73
log
@added 3d for patch ^ insert
@
text
@d12 1
d16 1
a16 1
C *  COPYRIGHT (C)1985, 1996 HEALTH RESEARCH INCORPORATED, ALBANY, NY. *
d487 6
a492 6
C	CE FIT    CONTRAST ENHANCEMENT, FIT THE HISTOGRAM
C	CE OD     CONTRAST ENHANCEMENT, FIT THE HISTOGRAM FOR OPTICAL
C                 DENSITY MICROGRAPHS.
C	CE GNC    CONTRAST ENHANCEMENT USING GRADUATED
C                             NON-CONVEX RESTORATION 
C	CE MED    CONTRAST ENHANCEMENT USING MEDIAN FILTERING 
d497 1
d503 1
d513 8
a520 1
        IF (FCHAR(4:6) .EQ. 'MED') THEN
a522 2
        ELSEIF (FCHAR(4:6) .EQ. 'GNC') THEN
            CALL GNC(LUN1,LUN2,NSAM1,NROW1)
d947 1
a947 2
9911    IFOUND = 1
        RETURN
@


1.72
log
@used alloccate
@
text
@d11 1
d127 1
a127 1
	IF (IFORM .LT. 0 .AND. IFORM .NE. -9) THEN
d133 5
a137 2
        CALL RDPRMI(NSAMS,NROWS,NLOOP,ILOOP,'TOP LEFT COORDINATES')
        NSLICS = 1
d139 2
a140 3
        CALL PATCH(LUN1,LUN2,NSAM1,NROW1,NSLICE1,NSAM2,NROW2,
     &             NSLICR2,NSAMS,NROWS,NSLICS, IN,AV1,FCHAR(4:4),
     &             FMIN1,FMAX1)
d211 1
a211 1
C       OPERATION PATCH ------------------------------------------ 'PA' 
d226 1
a226 1
	IF (IFORM1 .NE. IFORM2) THEN
d229 6
a234 5
	ELSEIF (IFORM .LE. 0 .AND. IFORM .NE. -9) THEN
           IER = 2
           GOTO 9900
        ENDIF    
        CALL RDPRMI(NSAMS,NROWS,NLOOP,ILOOP,'TOP LEFT COORDINATES')
d236 1
a236 1
     &             NSLICE2, NSAMS,NROWS,1, 0,0,FCHAR(4:4),
d246 1
a246 1
C	EMBED A PICT. OR VOL. IN A LARGER ARRAY.
@


1.71
log
@bad iform on pd
@
text
@d10 1
d13 6
a18 7
C *  SPIDER - MODULAR IMAGE PROCESSING SYSTEM.  AUTHOR: J.FRANK        *
C *  COPYRIGHT (C)1981,1987, WADSWORTH CENTER FOR LABORATORIES AND     *
C *    RESEARCH, NEW YORK STATE DEPARTMENT OF HEALTH, ALBANY, NY 12201 *
C *    THE CONTENTS OF THIS DOCUMENT ARE PROPRIETARY TO THE CENTER FOR *
C *    LABORATORIES AND RESEARCH AND ARE NOT TO BE DISCLOSED TO OTHERS *
C *    OR USED FOR PURPOSES OTHER THAN INTENDED WITHOUT WRITTEN        *
C *    APPROVAL OF THE CENTER FOR LABORATORIES AND RESEARCH.           *
d20 1
a20 1
C
a34 4
        INCLUDE 'F90ALLOC.INC'
        REAL, DIMENSION(:), POINTER :: IPQ
        REAL, DIMENSION(:), POINTER :: Q

d38 1
a38 1
        LOGICAL		RUNTIME,WANTNEXT,MUSTGET
d46 1
a47 1
C
d330 2
a331 2
               NNNN=NSAM1+2-MOD(NSAM1,2)
	       MEMWANT=NNNN*NROW1*NSLICE1
d333 1
a333 1
	       CALL CHKMEM(MEMWANT,BUF,MAXDIM,RUNTIME,IPQ,IRTFLG)
a338 2
               Q = >IPQ

d342 1
a342 1
	       INS=+1
d344 2
a345 2
	       IF (INS.EQ.0)  THEN
		  IER=38
d348 1
a348 1
	       CALL  SHIFT_PF(Q(1),NNNN/2,NSAM1,NROW1,NSLICE1,SAMS,ROWS,
d351 1
a351 1
	       CALL  FMRS_3(Q(1),NSAM1,NROW1,NSLICE1,INS)
d355 2
a356 1
	       IF(RUNTIME)  CALL ALLOCIT(0,RUNTIME,IPQ,'SH',IRTFLG)
d367 1
d377 1
d380 5
a384 4
               NNNN=NSAM1+2-MOD(NSAM1,2)
	       MEMWANT=NNNN*NROW1
	       CALL CHKMEM(MEMWANT,BUF,MAXDIM,RUNTIME,IPQ,IRTFLG)
	       IF(IRTFLG.NE.0)  THEN
a388 2
               Q = >IPQ

d392 1
a392 1
	       INS=+1
d394 2
a395 2
	       IF(INS.EQ.0)  THEN
		  IER=38
d398 3
a400 3
               NSLICE1=1
               SLICS=0.0
	       CALL  SHIFT_PF(Q(1),NNNN/2,NSAM1,NROW1,NSLICE1,
d403 2
a404 2
	       CALL  FMRS_2(Q(1),NSAM1,NROW1,INS)
                DO J = 1, NROW1
d406 4
a409 2
                ENDDO
	        IF(RUNTIME)  CALL ALLOCIT(0,RUNTIME,IPQ,'SH',IRTFLG)
d424 1
a424 1
	   CALL  ERRT(2,'SH',NE)
@


1.70
log
@bad parameters on 2 patch calls fixed
@
text
@d249 1
a249 1
8	CALL OPFILE(.TRUE.,FILNAM,LUN1,'O',IFORM1,NSAM1,NROW1,NSLICE1,
d261 2
a262 1
        CALL OPFILE(.TRUE.,FILNAM,LUN2,'U',IFORM2,NSAM2,NROW2,NSLICE2,
@


1.69
log
@*** empty log message ***
@
text
@d215 1
a215 1
7	CALL OPFIL(.TRUE.,FILNAM,LUN1,'O',NSAM1,NROW1,NSLICE1,
a216 1
        IFORM1 = IFORM
d218 2
d222 1
a222 1
	CALL OPFIL(.TRUE.,FILNAM,LUN2,'O',NSAM2,NROW2,NSLICE2,
a225 1
        IFORM2 = IFORM
d236 2
a237 1
     &             NSLICE2, NSAMS,NROWS,1, 0,0,FCHAR(4:4))
d249 1
a249 1
8	CALL OPFIL(.TRUE.,FILNAM,LUN1,'O',NSAM1,NROW1,NSLICE1,
d255 1
a256 1
        FMIN1  = FMIN
d261 1
a261 1
        CALL OPFIL(.TRUE.,FILNAM,LUN2,'U',NSAM2,NROW2,NSLICE2,
d263 1
a263 4
        IF (IRTFLG .NE. 0) THEN
           IER = 4
           GOTO 9900
        ENDIF
d289 1
a289 1
C       AB IS A SIGNAL FOR PATCH
d292 2
a293 1
     &             NSAMS,NROWS,NSLICS, IN,B,FCHAR(4:4))
d335 1
@


1.68
log
@as dc needed longer fchar
@
text
@d889 1
a889 1
        CALL REG_SET_NSEL(1,BUF(IX), 0.0, 0.0, 0.0, 0.0, IRTFLG)
a916 1
           CALL REG_GET_NSEL(1,BUF(IX), 0.0, 0.0, 0.0, 0.0, IRTFLG)
d918 1
@


1.67
log
@used reg_set
@
text
@d818 1
a818 1
              FCHAR(4:4) = 'R'
@


1.66
log
@used setprmb after msaskmu
(maskmu) call
@
text
@d887 3
a889 1
	IF (NSEL(1) .NE. 0)  PARAM(NSEL(1)) = BUF(IX)
d914 5
a918 2
	IF (NSEL(1) .NE. 0)  THEN
	   BUF(IX) = PARAM(NSEL(1))
@


1.65
log
@wv output file opened with u
@
text
@d33 1
a33 1
	COMMON          BUF(1)
d144 1
a144 1
        CALL SETPRM(LUN2,NSAM2,NROW2,0.0,0.0,0.0,'U')
d239 1
a239 1
        CALL SETPRM(LUN2,NSAM2,NROW2,0.,0.,0.,'U')
d297 1
a297 1
        CALL SETPRM(LUN2,NSAM2,NROW2,0.,0.,0.,'U')
d763 1
d766 3
d920 2
a921 1
        IF (IFORM.GT.0) CALL SETPRM(LUN1,NSAM1,NROW1,0.0,0.0,0.0,'U')
@


1.64
log
@SP_F90 removed
@
text
@d602 1
a602 1
        CALL OPFIL(.TRUE.,FILNAM,LUN2,'O',NSAM2,NROW2,NSLICE2,
@


1.63
log
@*** empty log message ***
@
text
@d34 1
a34 1
#ifdef SP_F90
a37 4
#else
        DIMENSION       Q(1)
        POINTER         (IPQ,Q) 
#endif
d341 3
a343 3
#ifdef SP_F90
         Q = >IPQ
#endif
d389 3
a391 3
#ifdef SP_F90
         Q = >IPQ
#endif
@


1.62
log
@*** empty log message ***
@
text
@d498 1
a498 1
	  CALL  HISTOD(MAXDIM)
@


1.61
log
@+1, -1
@
text
@d512 1
a512 1
           CALL MEDIAN(LUN1,LUN2,NSAM1,NROW1,NSLICE1,MAXDIM)
d515 1
a515 1
            CALL GNC(LUN1,LUN2,NSAM1,NROW1,MAXDIM)
@


1.60
log
@removed rdpraf or rdprai
@
text
@d814 1
a814 1
            CALL QFACT(LUN1,LUN2,LUN3,MAXDIM)
@


1.59
log
@passes ndoc to adds.f
@
text
@d9 1
d637 1
a637 2
6401       NVAL     = -3
           FWA(1)   = 1.0
d640 2
a641 2
           CALL RDPRAF(FWA,3,NVAL,0.0,10000.0,
     &         'ENTER NUMBER OF REPEATS IN X, Y, & Z',NULL,IRTFLG)
d644 1
a644 2
6402       NVAL      = -3
           IORDER(1) = 1
d647 2
a648 2
           CALL RDPRAI(IORDER,3,NVAL,1,3,
     &         'ORDER FOR X, Y, & Z',NULL,IRTFLG)
d650 6
d698 1
a698 1
6511            CALL RDPRIS(NSLICE2,NDUM,NLOOP,ILOOP,
@


1.58
log
@Q(1)
@
text
@d61 1
a61 1
	DATA  LUN1,LUN2,LUN3/21,22,23/
d815 1
a815 1
           CALL ADDS(LUN1,LUN2,LUN3,MAXDIM)
@


1.57
log
@shift_pf call fixed
@
text
@d351 1
a351 1
	       CALL  FMRS_3(Q,NSAM1,NROW1,NSLICE1,INS)
d356 1
a356 1
	       CALL  SHIFT_PF(Q,NNNN/2,NSAM1,NROW1,NSLICE1,SAMS,ROWS,
d359 1
a359 1
	       CALL  FMRS_3(Q,NSAM1,NROW1,NSLICE1,INS)
d399 1
a399 1
	       CALL  FMRS_2(Q,NSAM1,NROW1,INS)
d406 1
a406 1
	       CALL  SHIFT_PF(Q,NNNN/2,NSAM1,NROW1,NSLICE1,
d409 1
a409 1
	       CALL  FMRS_2(Q,NSAM1,NROW1,INS)
@


1.56
log
@label 26 used twice
@
text
@a30 1
CNO_SAVE
d404 4
a407 1
	       CALL  SHIFT_PF(Q,NNNN/2,NSAM1,NROW1,1,SAMS,ROWS,0)
@


1.55
log
@removed asdc (use as r)
@
text
@d809 1
a809 1
26         IF (FCHAR(4:5) .EQ. 'DC') THEN
@


1.54
log
@changed patch parameters
@
text
@d799 1
a799 1
C	AS DC     ADD WITH VARIANCE COMPUTED         
d803 1
a803 1
C	 ADDS 2 OR MORE (UP TO 500) PICTURES TOGETHER, COMPUTING
d809 5
a813 1
            CALL ADDS(LUN1,LUN2,LUN3,MAXDIM)
@


1.53
log
@bad iform on balnk opening
@
text
@a129 1
        
d144 2
a145 1
     &             NSLICR2,NSAMS,NROWS,NSLICS, IN,AV1,FCHAR(4:4))
@


1.52
log
@util2sup.f split out
@
text
@d90 1
a90 1
2   	IFORM   = 2
@


1.51
log
@split out surftovol.f
@
text
@d3 2
a4 2
C UTIL2.F               CHANGED:  MAHIEDDINE LADJADJ   4/23/93
C                                 JING SU              8/24/93
d8 1
d82 4
a85 47
1	ITER = 1
110     CALL UTIL2SUP('FIRST INPUT','NEXT INPUT','SUMMED OUTPUT',
     &               NSAM,NROW,NSLICE, LUN1,LUN2,LUN3, 
     &               LUNA,LUNB,LUNOUT, MAXIM1,MAXIM2,MAXIM3,ITER,IRTFLG)
	IF (IRTFLG .NE. 0) GOTO 9000

        SIGN = +1.0
        IF (MAXIM1 .GT. 0 .OR. MAXIM2 .GT. 0) THEN
C          STACK OPERATION, FIND OUT HOW MANY IMAGES ARE INVOLVED
           NIMAGE = MIN(MAXIM1,MAXIM2)
           IF (MAXIM1 .GT. 0 .AND. MAXIM2 .LE. 0) NIMAGE = MAXIM1
           IF (MAXIM1 .LE. 0 .AND. MAXIM2 .GT. 0) NIMAGE = MAXIM2

           IMGNUM = 1
           DO WHILE (IMGNUM .LE. NIMAGE)

              IF (N_VERBOSE .EQ. 1) WRITE(NOUT,*) ' '
              CALL GETOLDSTACK(LUNA,NSAM,IMGNUM,.TRUE.,.FALSE.,
     &                        .TRUE.,IRTFLG)
              IF (IRTFLG .GT. 0) GOTO 9000

C             WHAT HAPPENS IF STACK + STACK BUT ONE STACKED IMAGE
C             NOT PRESENT?? CURRENTLY PART OF STACK COULD BE 
C             INCONSISTENT WITH PREVIOUS PART OF STACK SINCE IT WILL
C             HALT ON ERROR!!!!!!!!!!!!!!al

C             IF FIRST FILE IS NOT A STACK CAN SKIP TO NEXTIMAGE
              WANTNEXT = (MAXIM1 .LT. 0) 
C             IF FIRST FILE IS STACK MUSTGET SPECIFIED IMGNUM
              MUSTGET = .NOT. WANTNEXT 
              CALL GETOLDSTACK(LUNB,NSAM,IMGNUM,WANTNEXT,MUSTGET,
     &                         .TRUE.,IRTFLG)
              IF (IRTFLG .GT. 0) GOTO 9000

              CALL GETNEWSTACK(LUNOUT,NSAM,IMGNUM,IRTFLG)
              IF (IRTFLG .GT. 0) GOTO 9000

C             DO THE ADDITION
              CALL ADD(LUNB,LUNA,LUNOUT,NSAM,NROW,NSLICE,SIGN)

              IMGNUM = IMGNUM + 1
           ENDDO

           RETURN
        ELSE           
           CALL ADD(LUNB,LUNA,LUNOUT,NSAM,NROW,NSLICE,SIGN)
           ITER = ITER + 1
a86 3
C          CONTINUE UNTIL IRTFLG IS NOT ZERO
           GOTO 110  
        ENDIF
d201 7
a207 6
C       OPEN FILES
6       ITER = 1
610     IF (FCHAR(4:4) .EQ. '/' .OR. FCHAR(4:4) .EQ. 'D') THEN
           CALL UTIL2SUP('INPUT','DIVISOR','OUTPUT',
     &               NSAM,NROW,NSLICE, LUN1,LUN2,LUN3, 
     &               LUNA,LUNB,LUNOUT, MAXIM1,MAXIM2,MAXIM3,ITER,IRTFLG)
d211 1
a211 2
     &               NSAM,NROW,NSLICE, LUN1,LUN2,LUN3, 
     &               LUNA,LUNB,LUNOUT, MAXIM1,MAXIM2,MAXIM3,ITER,IRTFLG)
d213 1
a213 19
	IF (IRTFLG .NE. 0) GOTO 9000

        ITER = ITER + 1
        SIGN = +2.
   	IF (FCHAR(4:4) .EQ. '/' .OR. FCHAR(4:4) .EQ. 'D') THEN
            IF (IFORM1 .LT. 0) THEN
               SIGN = -3.0
               WRITE(NOUT,*) 'COMPLEX DIVISION'
            ELSE
               SIGN = -2.0
               WRITE(NOUT,*) 'DIVISION'
            ENDIF
        ELSEIF (FCHAR(4:4) .EQ. '*' .OR. FCHAR(4:4) .EQ. 'M')  THEN
           SIGN = -2.0
           WRITE(NOUT,*) ' COMPLEX MULTIPLICATION -- (X) * CONJG(Y)'
        ELSEIF (FCHAR(4:4) .EQ. 'O')  THEN
           SIGN = +5.0
           WRITE(NOUT,*) ' MULTIPLICATION WITH ARITHMETIC OR'
        ENDIF
a214 3
        CALL ADD(LUNB,LUNA,LUNOUT,NSAM,NROW,NSLICE,SIGN)
C       CONTINUE UNTIL IRTFLG IS NOT ZERO
	GOTO 610
d433 2
a434 2
10      CALL OPFIL(.TRUE.,FILNAM,LUN1,'O',NSAM1,NROW1,NSLICE1,
     &     MAXIM,'INPUT',.TRUE.,IRTFLG)
d437 3
a439 3
C	OPEN  OUTPUT FILE (SAME SIZE AS INPUT)
 	CALL OPFIL(.TRUE.,FILNAM,LUN3,'U',NSAM1,NROW1,NSLICE1,
     &             MAXIM2,'OUTPUT',.TRUE.,IRTFLG)
d442 1
a442 2
	SIGN = +3.0
        CALL ADD(LUN1,LUN1,LUN3,NSAM1,NROW1,NSLICE1,SIGN)
d445 1
a445 1
C       OPERATION ------------------------------------------------ 'SU' 
d448 3
a450 5
11	ITER = 1
1101    CALL UTIL2SUP('INPUT','SUBTRACTED','OUTPUT',
     &               NSAM,NROW,NSLICE, LUN1,LUN2,LUN3, 
     &               LUNA,LUNB,LUNOUT, MAXIM1,MAXIM2,MAXIM3,ITER,IRTFLG)
	IF (IRTFLG .NE. 0) GOTO 9000
a451 4
        SIGN = -1.0
	CALL ADD(LUNB,LUNA,LUNOUT,NSAM,NROW,NSLICE,SIGN)
        ITER = ITER + 1
	GOTO 1101
d723 1
a723 1
C	TAKES THE SQUARE ROOT OF A PICTURE.
d726 1
a726 1
21	CALL OPFIL(.TRUE.,FILNAM,LUN1,'O',NSAM1,NROW1,NSLICE1,
d735 2
a736 2
	CALL OPFIL(.TRUE.,FILNAM,LUN3,'U',NSAM1,NROW1,NSLICE1,
     &             MAXIM2,'OUTPUT',.TRUE.,IRTFLG)
d739 1
a739 2
	SIGN = +4.0
        CALL ADD(LUN1,LUN1,LUN3,NSAM1,NROW1,NSLICE1,SIGN)
a922 154


C++*********************************************************************
C
C UTIL2SUP.FOR                               ARDEAN LEITH         8/1/97
C
C **********************************************************************
C *  SPIDER - MODULAR IMAGE PROCESSING SYSTEM.  AUTHOR: J.FRANK        *
C *  COPYRIGHT (C)1981,1987, WADSWORTH CENTER FOR LABORATORIES AND     *
C *    RESEARCH, NEW YORK STATE DEPARTMENT OF HEALTH, ALBANY, NY 12201 *
C *    THE CONTENTS OF THIS DOCUMENT ARE PROPRIETARY TO THE CENTER FOR *
C *    LABORATORIES AND RESEARCH AND ARE NOT TO BE DISCLOSED TO OTHERS *
C *    OR USED FOR PURPOSES OTHER THAN INTENDED WITHOUT WRITTEN        *
C *    APPROVAL OF THE CENTER FOR LABORATORIES AND RESEARCH.           *
C **********************************************************************
C
C UTIL2SUP(PROMPT1,PROMPT2,PROMPT3,
C           NSAM,NROW,NSLICE, LUN1,LUN2,LUN3,
C           LUNA,LUNB,LUNOUT,MAXIM1,MAXIM2,MAXIM3, ITER,IRTFLG)
C
C  PARAMETERS:      
C
C        1         2         3         4         5         6         7
C23456789012345678901234567890123456789012345678901234567890123456789012
C--*********************************************************************

        SUBROUTINE UTIL2SUP(PROMPT1,PROMPT2,PROMPT3,
     &                      NSAM,NROW,NSLICE, LUN1,LUN2,LUN3,
     &                      LUNA,LUNB,LUNOUT,
     &                      MAXIM1,MAXIM2,MAXIM3, 
     &                      ITER,IRTFLG)

	INCLUDE 'CMBLOCK.INC'
CNO_SAVE

        CHARACTER *81    FILNAM1,FILNAM2,FILNAM3
        COMMON /COMMUN1/ FILNAM1,FILNAM2,FILNAM3

        CHARACTER *(*)   PROMPT1,PROMPT2,PROMPT3
        CHARACTER        NULL

        SAVE             IFORM1

	NULL   = CHAR(0)
        MAXIM1 = -1
        MAXIM2 = -1
        MAXIM3 = -1

        IF (ITER .LE. 1) THEN
C          OPEN FIRST INPUT FILE ON LUNA = LUN1
           LUNA = LUN1
           CALL OPFIL(.TRUE.,FILNAM1,LUNA,'O',NSAM,NROW,NSLICE,
     &                MAXIM1,PROMPT1,.TRUE.,IRTFLG)
	   IF (IRTFLG .NE. 0) GOTO 9000
           IFORM1 = IFORM

C          OPEN 2ND INPUT FILE ON LUNB = LUN2
           LUNB = LUN2
           CALL OPFIL(.TRUE.,FILNAM2,LUNB,'O',NSAMT,NROWT,NSLICET,
     &                   MAXIM2,PROMPT2,.TRUE.,IRTFLG)
	   IF (IRTFLG .NE. 0) GOTO 9000
	   IF (NSAMT.NE.NSAM.OR.NROWT.NE.NROW.OR.NSLICET.NE.NSLICE)
     &        THEN 
	      CALL ERRT(1,'UTIL2SUP',NE)
	      GOTO 9000
	   ELSEIF (IFORM .NE. IFORM1)  THEN
	      CALL ERRT(40,'UTIL2SUP',NE)
	      GOTO 9000
           ENDIF

C          OPEN OUTPUT FILE ON LUNOUT = LUN3
           IF (MAXIM1 .LT. 0 .AND. MAXIM2 .LT. 0) MAXIM3 = 0

           CALL FILERD(FILNAM3,NLET3,NULL,PROMPT3,IRTFLG)
           IF (IRTFLG .EQ. -1) GOTO 9000

           LUNOUT = LUN3
           IF (FILNAM3 .EQ. FILNAM1) THEN
C             OUTPUT FILE SAME FILE AS FIRST INPUT
              LUNOUT = LUNA

           ELSEIF (FILNAM3 .EQ. FILNAM2) THEN
C             OUTPUT FILE SAME FILE AS SECOND INPUT
              LUNOUT = LUNB
           ELSE
C             MUST OPEN OUTPUT FILE NOW
              CALL OPFIL(.FALSE.,FILNAM3,LUN3,'U',NSAM,NROW,NSLICE,
     &                   MAXIM3,PROMPT3,.TRUE.,IRTFLG)
              IF (IRTFLG .NE. 0) GOTO 9000
              IF (MAXIM1 .GE. 0 .AND. MAXIM2 .GE. 0 .AND. MAXIM3 .GE. 0)
     &            THEN
C                 STACK + STACK MUST HAVE OUTPUT STACK
                  WRITE(NOUT,*) '*** OUTPUT MUST BE A STACK'
                  CALL ERRT(100,'UTIL2SUP',NE)
                  GOTO 9000
              ENDIF
           ENDIF

C          SET UNDETERMINED STATISTICS FLAG FOR OUTPUT FILE
           CALL SETPRM(LUNOUT,NSAM,NROW,0.,0.,0.,'U')

        ELSEIF (ITER .GE. 2) THEN

C          FIND NAME OF NEW SECOND INPUT FILE
           CALL FILERD(FILNAM2,NLET2,NULL,PROMPT2,IRTFLG)
           IF (IRTFLG .EQ. -1) GOTO 9000

           IF (ITER .EQ. 2) THEN
C             ON SECOND ITER MUST CLOSE ALL FILES
              CLOSE(LUN1)
              CLOSE(LUN2)
              CLOSE(LUN3)
           ENDIF

           IF (FILNAM2 .EQ. FILNAM3) THEN
C             NEW SECOND INPUT FILE FILE IS SAME AS OUTPUT FILE
              LUNB = LUN3
           ELSE
              CLOSE(LUN2)
C             OPEN NEXT SECOND INPUT FILE ON LUNB = LUN2
              LUNB = LUN2
              CALL OPFIL(.FALSE.,FILNAM2,LUNB,'O',NSAMT,NROWT,NSLICET,
     &                   MAXIM2,PROMPT2,.TRUE.,IRTFLG)
	      IF (IRTFLG .NE. 0) GOTO 9000

	      IF (NSAMT.NE.NSAM.OR.NROWT.NE.NROW.OR.NSLICET.NE.NSLICE)
     &           THEN 
	         CALL ERRT(1,'UTIL2SUP',NE)
	         GOTO 9000
	      ELSEIF (IFORM .NE. IFORM1)  THEN
	         CALL ERRT(40,'UTIL2SUP',NE)
	         GOTO 9000
              ENDIF
           ENDIF

           IF (ITER .EQ. 2) THEN
C             REOPEN OUTPUT FILE ON LUN3
              LUNOUT = LUN3
              CALL OPFIL(.FALSE.,FILNAM3,LUNOUT,'O',NSAM,NROW,NSLICE,
     &                   MAXIM3,PROMPT3,.TRUE.,IRTFLG)
              IF (IRTFLG .NE. 0) GOTO 9000

C             OUTPUT FILE IS ALSO AN INPUT FILE
              LUNA = LUNOUT
           ENDIF
          
        ENDIF

        IRTFLG = 0
        RETURN

9000    IRTFLG = -1
        RETURN
        END
@


1.50
log
@lunsethdr used
@
text
@a1152 111
C++*************************************************************************
C
C  SURFTOVOL.FOR -- CREATED JUL 96 al
C
C **************************************************************************
C *  SPIDER - MODULAR IMAGE PROCESSING SYSTEM.  AUTHOR: J.FRANK            *
C *  COPYRIGHT (C)1981,1996, WADSWORTH CENTER FOR LABORATORIES AND         *
C *  RESEARCH, NEW YORK STATE DEPARTMENT OF HEALTH, ALBANY, NY 12201.      *
C *    THE CONTENTS OF THIS DOCUMENT ARE PROPRIETARY TO THE CENTER FOR     *
C *    LABORATORIES AND RESEARCH AND ARE NOT TO BE DISCLOSED TO OTHERS OR  *
C *    USED FOR PURPOSES OTHER THAN INTENDED WITHOUT WRITTEN APPROVAL OF   *
C *    THE CENTER FOR LABORATORIES AND RESEARCH                            *
C **************************************************************************
C
C  SURFTOVOL(LUNVOL,NSAM,NROW,NSLICE,NX,NY,NZ,TINY)
C
C  PURPOSE:  CONVERTS PROGRAMMED SURFACE FUNCTION TO VOLUME. 
C            VOLUME IS CONTINUOUS FROM 0.0 TO 1.0, EXCEPT FOR 
C            SURFACE 2D WHICH IS CONTINUOUS FROM 0.4...1.0.   
C
C  PARAMETERS:   LUNVOL             LUN FOR OUTPUT              (SENT)
C                NSAM,NROW,NSLICE   VOLUME SIZE                 (SENT)
C                FNXYZ              REPEATS IN X, Y, & Z        (SENT)
C                IORDER             ORDER FOR  X, Y, & Z        (SENT)
C                ANS                SURFACE TYPE (3 AVAIL.)     (SENT)
C                TINY               ANYTHING < THIS IS SURFACE  (SENT)
C
C        0         2         3         4         5         6         7     
C23456789 123456789 123456789 123456789 123456789 123456789 123456789 12
C--*********************************************************************

       SUBROUTINE SURFTOVOL(LUNVOL,ISIZE,FNXYZ,IORDER,ANS,TINY)

CNO_SAVE
       INCLUDE 'CMBLOCK.INC'

       PARAMETER    (INBUFLEN = 17008)
       COMMON       BUF(INBUFLEN)

       CHARACTER    *(*) ANS
       INTEGER      ISIZE(3),IORDER(3)
       REAL         FNXYZ(3)
       LOGICAL      GEE,TWOD

C      X, Y, & Z AXIS ARE INTERCHANGEABLE
       NSAM   = ISIZE(IORDER(1))
       NROW   = ISIZE(IORDER(2))
       NSLICE = ISIZE(IORDER(3))

       FNX    = FNXYZ(IORDER(1))
       FNY    = FNXYZ(IORDER(2))
       FNZ    = FNXYZ(IORDER(3))

C      TYPE D AND TYPE G SURFACES AVAILABLE
       GEE   = ANS(1:1) .EQ. 'G'  .OR. ANS(1:1) .EQ. 'g'
       TWOD  = ANS(1:2) .EQ. 'D2' .OR. ANS(1:2) .EQ. 'd2' 

       TWOPI = 2 * 3.14159
       IREC  = 0
      
       DO ISLICE = 1,NSLICE
          Z = FLOAT(ISLICE) / (NSLICE / FNZ) 

          DO IROW = 1,NROW

             Y     = FLOAT(IROW) / (NROW / FNY) 
             FXCON = 1.0 / (NROW  / FNX)

             IF (GEE) THEN
C               G SURFACE SCALED SO THAT DESIRED SURFACE IS NEAR 1.0 
                DO ISAM = 1,NSAM
                   X = FLOAT(ISAM) * FXCON 

                   VAL = SIN(TWOPI * X) * COS(TWOPI * Y) +
     &                   SIN(TWOPI * Y) * COS(TWOPI * Z) +
     &                   COS(TWOPI * X) * SIN(TWOPI * Z) 
      
                   BUF(ISAM) = 1.0 - ABS(VAL)
                ENDDO
             ELSEIF (.NOT. TWOD) THEN
C               D SURFACE SCALED SO THAT DESIRED SURFACE IS NEAR 1.0 
                DO ISAM = 1,NSAM
                   X = FLOAT(ISAM) * FXCON 

                   VAL = COS(TWOPI * X - TWOPI * Y) * COS(TWOPI * Z) +
     &                   SIN(TWOPI * X + TWOPI * Y) * SIN(TWOPI * Z)
      
                   BUF(ISAM) = 1.0 - ABS(VAL)
                ENDDO

             ELSEIF (TWOD) THEN
C               LEAVE RAW DATA IN VOLUME
                DO ISAM = 1,NSAM
                   X = FLOAT(ISAM) * FXCON 

                   BUF(ISAM) =
     &                   COS(TWOPI * X - TWOPI * Y) * COS(TWOPI * Z) +
     &                   SIN(TWOPI * X + TWOPI * Y) * SIN(TWOPI * Z)
      
                ENDDO
             ENDIF
             IREC = IREC + 1
             CALL WRTLIN(LUNVOL,BUF,NSAM,IREC)
          ENDDO
       ENDDo
    
       CONTINUE
       CLOSE(LUNVOL)

       RETURN
       END
@


1.49
log
@need nsam as parameter
@
text
@d98 2
a99 2
              CALL GETOLDSTACK(FILNAM1,LUNA,NSAM,IMGNUM,
     &                        .TRUE.,.FALSE.,.TRUE.,IRTFLG)
d109 1
a109 1
C             IF FIRST FILE IS STACK MUST GET SPECIFIED IMGNUM
d111 2
a112 2
              CALL GETOLDSTACK(FILNAM2,LUNB,NSAM,IMGNUM,
     &                         WANTNEXT,MUSTGET,.TRUE.,IRTFLG)
d115 1
a115 1
              CALL GETNEWSTACK(FILNAM3,LUNOUT,NSAM,IMGNUM,IRTFLG)
@


1.48
log
@ad handles stacks
@
text
@d109 1
a109 1
C             IF FIRST FILE IS STACK MUSTGET SPECIFIED IMGNUM
d115 1
a115 1
              CALL GETNEWSTACK(FILNAM3,LUNOUT,IMGNUM,IRTFLG)
@


1.47
log
@added pp
@
text
@d3 5
a7 4
C UTIL2.FOR                  CHANGED:  MAHIEDDINE LADJADJ   4/23/93
C                                      JING SU              8/24/93
C                                      ARDEAN LEITH         8/30/96
C                                      ADDED "PP S" al      4/08/98
d41 6
a46 3
        LOGICAL		RUNTIME
        CHARACTER *81   FILNAM1,FILNAM2,FILNAM
        COMMON /COMMUN/ FILNAM1,FILNAM2,FILNAM
d84 1
a84 1
     &               LUNA,LUNB,LUNOUT, ITER,IRTFLG)
d87 41
a127 3
        SIGN = +1.0            
        CALL ADD(LUNB,LUNA,LUNOUT,NSAM,NROW,NSLICE,SIGN)
        ITER = ITER + 1
d129 3
a131 2
C       CONTINUE UNTIL IRTFLG IS NOT ZERO
        GOTO 110  
d251 1
a251 1
     &               LUNA,LUNB,LUNOUT, ITER,IRTFLG)
d256 1
a256 1
     &               LUNA,LUNB,LUNOUT, ITER,IRTFLG)
d518 1
a518 1
     &               LUNA,LUNB,LUNOUT, ITER,IRTFLG)
d1015 1
a1015 1
C           LUNA,LUNB,LUNOUT, ITER,IRTFLG)
d1025 3
a1027 1
     &                      LUNA,LUNB,LUNOUT, ITER,IRTFLG)
d1031 6
a1036 4
         
        CHARACTER *(*)  PROMPT1,PROMPT2,PROMPT3
        CHARACTER *81   FILNAM1,FILNAM2,FILNAM3
        CHARACTER       NULL
d1038 1
a1038 1
        SAVE            FILNAM1,FILNAM2,FILNAM3,IFORM1
d1041 3
a1043 3
        MAXIM1 = 0
        MAXIM2 = 0
        MAXIM3 = 0
d1068 2
d1082 1
a1082 1
 
d1086 7
@


1.46
log
@changed util2sup for AD, SU, etc (buggy)
@
text
@a702 4
	   ELSEIF (IFORM .LT. 0) THEN
C             NOT FOR FOURIER
              IER = 2
              GOTO 9900
d733 4
@


1.45
log
@bad if clause
@
text
@a69 1

d73 1
d77 4
a80 4
1	FIRST = .TRUE.
110     CALL UTIL2SUP(FILNAM1,IFORM1,
     &               'FIRST INPUT','NEXT INPUT','SUMMED OUTPUT',
     &               NSAM,NROW,NSLICE,LUNA,LUNB,LUNCT,FIRST,IRTFLG)
d84 2
a85 5
        CALL ADD(LUNB,LUNA,LUNCT,NSAM,NROW,NSLICE,SIGN)
        CLOSE(LUNB)
        CLOSE(LUNA)
        LUNA  = LUNCT
        FIRST = .FALSE.
d204 1
a204 1
6       FIRST  = .TRUE.
d206 4
a209 3
           CALL UTIL2SUP(FILNAM1,IFORM1,
     &               'INPUT','DIVISOR','OUTPUT',
     &               NSAM,NROW,NSLICE,LUNA,LUNB,LUNCT,FIRST,IRTFLG)
d211 3
a213 3
           CALL UTIL2SUP(FILNAM1,IFORM1,
     &               'INPUT','MULTIPLIER','OUTPUT',
     &               NSAM,NROW,NSLICE,LUNA,LUNB,LUNCT,FIRST,IRTFLG)
d217 1
d235 1
a235 6
        CALL ADD(LUNB,LUNA,LUNCT,NSAM,NROW,NSLICE,SIGN)
        FIRST = .FALSE.
        CLOSE(LUNB)
        CLOSE(LUNA)
        LUNA = LUNCT

d472 4
a475 5
11	FIRST = .TRUE.
       
1140    CALL UTIL2SUP(FILNAM1,IFORM1,
     &               'FIRST INPUT','SUBTRACTED','OUTPUT',
     &               NSAM,NROW,NSLICE,LUNA,LUNB,LUNCT,FIRST,IRTFLG)
d479 3
a481 6
	CALL ADD(LUNB,LUNA,LUNCT,NSAM,NROW,NSLICE,SIGN)
        CLOSE(LUNB)
        CLOSE(LUNA)
        LUNA  = LUNCT
        FIRST = .FALSE.
	GOTO 1140
d970 3
a972 2
C  UTIL2SUP(FILNAM1,IFORM1, PROMPT1,PROMPT2,PROMPT3,
C           NSAM,NROW,NSLICE, LUNA,LUNB,LUNCT, FIRST,IRTFLG)
d980 3
a982 4
        SUBROUTINE UTIL2SUP(FILNAM1,IFORM1,
     &                      PROMPT1,PROMPT2,PROMPT3,
     &                      NSAM,NROW,NSLICE, LUNA,LUNB,LUNCT,
     &                      FIRST,IRTFLG)
d986 3
a988 4

        CHARACTER *(*)  PROMPT1,PROMPT2,PROMPT3,FILNAM1
        CHARACTER *81   FILNAM3,FILNAM2
        LOGICAL         FIRST
d991 1
a991 2
C       LUN? SHOULD BE SAME AS IN UTIL2!
	DATA            LUN1,LUN2,LUN3/21,22,23/
d994 1
a994 1
        MAXIM  = 0
d998 3
a1000 3
        IF (FIRST) THEN
C          GET NAME & OPEN FIRST INPUT FILE
1	   LUNA = LUN1
d1002 1
a1002 1
     &                MAXIM,PROMPT1,.TRUE.,IRTFLG)
a1004 5
        ENDIF

C       OPEN 2ND OR LATER INPUT FILE
        CALL FILERD(FILNAM2,NLET2,NULL,PROMPT2,IRTFLG)
        IF (IRTFLG .EQ. -1) GOTO 9000
d1006 1
a1006 4
        IF (FILNAM2 .EQ. FILNAM1) THEN
C          SECOND INPUT SAME AS FIRST
           LUNB = LUNA
        ELSE
d1008 2
a1009 2
111	   CALL OPFIL(.FALSE.,FILNAM2,LUNB,'O',NSAMT,NROWT,NSLICET,
     &                MAXIM2,PROMPT2,.TRUE.,IRTFLG)
a1018 1
        ENDIF
d1020 1
a1020 2
        IF (FIRST) THEN
C          OPEN OUTPUT FILE
d1024 1
d1027 1
a1027 1
              LUNCT   = LUNA
d1031 10
a1040 1
              LUNCT   = LUNB
d1042 16
d1059 5
a1063 7
C             OUTPUT FILE NOT SAME AS EITHER INPUT
              LUNCT   = LUN3
              NSAMT   = NSAM
              NROWT   = NROW
              NSLICET = NSLICE
   	      CALL OPFIL(.FALSE.,FILNAM3,LUNCT,'U',NSAMT,NROWT,NSLICET,
     &             MAXIM3,PROMPT3,.TRUE.,IRTFLG)
d1065 1
d1076 6
a1081 2
C          SET UNDETERMINED STATISTICS FLAG 
           CALL SETPRM(LUNCT,NSAM,NROW,0.,0.,0.,'U')
d1083 4
d1088 2
d1092 1
a1092 4
9000    CLOSE(LUN1)
        CLOSE(LUN2)
        CLOSE(LUN3)

@


1.44
log
@added error traps to "gp" & "RP"
@
text
@d907 2
a908 2
	IF (IX .LT. 1 .OR. IX .GT. NSAM1 .OR
     &      IY .LT. 1 .OR. IY .GT. NROW1 .OR
d934 2
a935 2
	IF (IX .LT. 1 .OR. IX .GT. NSAM1 .OR
     &      IY .LT. 1 .OR. IY .GT. NROW1 .OR
@


1.43
log
@gp &rp fixed
@
text
@d901 4
a904 5
	CALL RDPRMI(IX,IY,NLOOP,ILOOP,'IX, IY')
	IF(IFORM.GT.1 .OR. IFORM.LT.-20)  THEN
	CALL RDPRMI(IZ,IDUM,NLOOP,ILOOP,'IZ')
	ELSE
	IZ=1
d906 7
a912 1
	IREC=IY+(IZ-1)*NROW1
d914 1
d917 1
a917 1
	IF(NSEL(1).NE.0)  PARAM(NSEL(1))=BUF(IX)
d929 4
a932 5
	CALL RDPRMI(IX,IY,NLOOP,ILOOP,'IX, IY')
	IF(IFORM.GT.1 .OR. IFORM.LT.-20)  THEN
	CALL RDPRMI(IZ,IDUM,NLOOP,ILOOP,'IZ')
	ELSE
	IZ=1
d934 7
a940 1
	IREC=IY+(IZ-1)*NROW1
d942 2
a943 2
	IF(NSEL(1).NE.0)  THEN
	BUF(IX)=PARAM(NSEL(1))
d945 1
a945 1
	CALL RDPRM(BUF(IX),NLOOP,ILOOP,'NEW PIXEL VALUE')
d947 2
a948 1
	CALL  WRTLIN(LUN1,BUF,NSAM1,IREC)
d950 1
a950 1
        IF(IFORM.GT.0) CALL SETPRM(LUN1,NSAM1,NROW1,0.0,0.0,0.0,'U')
@


1.42
log
@*** empty log message ***
@
text
@d902 1
a902 1
	IF(IFORM.GT.1 .OR. IFORM.LT.20)  THEN
d924 1
a924 1
	IF(IFORM.GT.1 .OR. IFORM.LT.20)  THEN
@


1.41
log
@allow Fourier files for GP and RP.
@
text
@d902 1
a902 1
	IF(IFORM.GT.1)  THEN
d924 1
a924 1
	IF(IFORM.GT.1)  THEN
@


1.40
log
@added "AR IF"
@
text
@d895 1
a895 1
     &             MAXIM,'INPUT',.FALSE.,IRTFLG)
d917 1
a917 1
     &             MAXIM,'INPUT',.FALSE.,IRTFLG)
d937 2
a938 2
C       SET UNDETERMINED SATATISTICS FLAG
        CALL SETPRM(LUN1,NSAM1,NROW1,0.0,0.0,0.0,'U')
@


1.39
log
@changed surface
@
text
@d570 5
a574 2

        CALL ARITH(LUN1,LUN2,NSAM1,NROW1,NSLICE1)
@


1.38
log
@change surftovol.f
@
text
@d1131 1
a1131 1
       
d1137 2
a1138 1
             Y = FLOAT(IROW) / (NROW / FNY) 
d1141 1
d1143 1
a1143 1
                   X = FLOAT(ISAM) / (NSAM / FNX) 
d1152 1
d1154 1
a1154 1
                   X = FLOAT(ISAM) / (NSAM / FNX) 
d1163 1
d1165 1
a1165 1
                   X = FLOAT(ISAM) / (NSAM / FNX) 
d1167 2
a1168 1
                   VAL = COS(TWOPI * X - TWOPI * Y) * COS(TWOPI * Z) +
a1170 1
                   BUF(ISAM) = 1.0 - ABS(VAL - 0.4)
@


1.37
log
@RP fixed
@
text
@d48 1
d664 5
a668 2
6400       CALL RDPRI3S(NSAM,NROW,NSLICE,NLOOP,ILOOP,
     &                  'ENTER NSAM, NROW, & NSLICE',IRTFLG)
d670 6
a675 6

6401        NVAL   = -3
            FWA(1) = 1.0
            FWA(2) = 1.0
            FWA(3) = 1.0
            CALL RDPRAF(FWA,3,NVAL,0.0,10000.0,
d679 16
a694 1
           IFORM = 3
d700 1
a700 2
           CALL SURFTOVOL(LUN1,NSAM,NROW,NSLICE,
     &                    FWA(1),FWA(2),FWA(3),TINY)
d1089 2
a1090 1
C            VOLUME IS BINARY CONTAINING 0 AND 1
d1094 4
a1097 2
C                FNX,FNY,FNZ        REPEATS IN X, Y, & Z        (SENT)
C                TINY               ANYTING < THIS IS SURFACE   (SENT)
d1103 1
a1103 1
       SUBROUTINE SURFTOVOL(LUNVOL,NSAM,NROW,NSLICE,FNX,FNY,FNZ,TINY)
d1111 18
d1139 19
a1157 2
             DO ISAM = 1,NSAM
                X = FLOAT(ISAM) / (NSAM / FNX) 
d1159 6
a1164 2
                VAL = COS(TWOPI * X - TWOPI * Y) * COS(TWOPI * Z) +
     &                SIN(TWOPI * X + TWOPI * Y) * SIN(TWOPI * Z)
d1166 3
a1168 2
                BUF(ISAM) = 1.0 - ABS(VAL)
             ENDDO
@


1.36
log
@RP corrected
@
text
@a0 1

d917 1
a917 1
        CALL SETPRM(LUN1,NSAM2,NROW2,0.0,0.0,0.0,'U')
@


1.35
log
@*** empty log message ***
@
text
@d918 1
a918 1
        CALL SETPRM(LUN2,NSAM2,NROW2,0.0,0.0,0.0,'U')
@


1.34
log
@added "PP S" tempory
@
text
@d917 2
@


1.33
log
@f90 alloc
@
text
@d7 1
d48 2
d660 25
d726 1
d1051 66
@


1.32
log
@sz prompt changed & unused code removed
@
text
@d32 5
d39 1
d371 3
d419 3
@


1.31
log
@putpt call fixed
@
text
@d695 1
a695 1
     &             MAXIM,'INPUT1',.FALSE.,IRTFLG)
a698 5
        IF (IERR .EQ. 1) THEN

C         MASKMU EXTENDED TO 3-D (JMC)
          CALL MASKMU(LUN1,LUN2,NSAM1,NROW1,NSLICE1)
        END IF
@


1.30
log
@used opfil for 2 openf calls
@
text
@d660 1
a660 1
              CALL PUTPT(LUN1,LUN2,NSAM1,NROW1)
@


1.29
log
@added nslice parameter to squeez call
@
text
@d51 2
d90 1
a90 1
     &             IDUM,'BLANK OUTPUT',.FALSE.,IRTFLG)
d96 1
a96 1
     &                IDUM,'REFERENCE',.FALSE.,IRTFLG)
d119 1
a119 1
     &             IDUM,'SMALL INPUT',.FALSE.,IRTFLG)
d126 1
d128 1
a128 1
     &             IDUM,'LARGE INPUT (OVERWRITTEN!)',.TRUE.,IRTFLG)
d152 1
a152 1
     &             IDUM,'INPUT',.FALSE.,IRTFLG)
d168 1
a168 1
          NROW2 = FLOAT(NSAM2) / FLOAT(NSAM1) * FLOAT(NROW1)
d172 1
a172 1
     &             IDUM,'OUTPUT',.TRUE.,IRTFLG)
d240 1
a240 1
     &             IDUM,'SMALL INPUT',.FALSE.,IRTFLG)
d246 1
a246 1
     &             IDUM,'LARGE INPUT (OVERWRITTEN!)',.TRUE.,IRTFLG)
d273 1
a273 1
     &             IDUM,'INPUT',.FALSE.,IRTFLG)
d282 8
a289 2
        CALL FILERD(FILNAM,NLETO,NULL,'OUTPUT',IRTFLG)
        IF (IRTFLG .EQ. -1) GOTO 9000
a290 13
        CALL RDPRMI(NSAM2,NROW2,NLOOP,ILOOP,'ENTER DIMS NSAM,NROW')
        NSLICE2 = 1
        IF (IFORM .EQ. 3 .AND. NSLICE1 .NE. 1) THEN
          CALL RDPRMI(NSLICE2,NDUM,NLOOP,ILOOP,'NSLICE')
        END IF
        IF (NROW2 .EQ. 0) THEN
          NROW2 = FLOAT(NSAM2) / FLOAT(NSAM1) * FLOAT(NROW1)
        ENDIF
        CALL OPENF(FILNAM,LUN2,NSAM2,NROW2,'UNKNOWN',NF,NSLICE2)
        IF (NF .EQ. 1) THEN
          IER = 4
          GOTO 9900
        ENDIF
d330 1
a330 1
     &             IDUM,'INPUT',.FALSE.,IRTFLG)
d335 1
a335 1
     &             IDUM,'OUTPUT',.FALSE.,IRTFLG)
d448 1
a448 1
     &     IDUM,'INPUT',.TRUE.,IRTFLG)
d453 1
a453 1
     &             IDUM,'OUTPUT',.TRUE.,IRTFLG)
d484 1
a484 1
     &             IDUM,'INPUT',.FALSE.,IRTFLG)
d491 1
a491 1
     &             IDUM,'OUTPUT',.FALSE.,IRTFLG)
d525 1
a525 1
     &             IDUM,'INPUT',.FALSE.,IRTFLG)
d530 1
a530 1
     &             IDUM,'OUTPUT',.TRUE.,IRTFLG)
d548 1
a548 1
     &             IDUM,'INPUT',.FALSE.,IRTFLG)
d553 1
a553 1
     &             IDUM,'OUTPUT',.TRUE.,IRTFLG)
d563 1
a563 1
     &             IDUM,'INPUT',.FALSE.,IRTFLG)
d567 1
a567 1
     &             IDUM,'OUTPUT',.TRUE.,IRTFLG)
d575 1
a575 1
     &             IDUM,'INPUT',.FALSE.,IRTFLG)
d580 1
a580 1
     &             IDUM,'OUTPUT',.TRUE.,IRTFLG)
d592 1
a592 1
     &             IDUM,'INPUT',.FALSE.,IRTFLG)
d600 1
a600 1
     &             IDUM,'OUTPUT',.TRUE.,IRTFLG)
d619 1
a619 1
     &             IDUM,'INPUT',.FALSE.,IRTFLG)
d623 9
a631 13
        CALL FILERD(FILNAM,NLETO,NULL,'OUTPUT',IRTFLG)
        IF (IRTFLG .EQ. -1) GOTO 9000
        CALL RDPRMI(NSAM2,NROW2,NLOOP,ILOOP,'ENTER DIMS NSAM,NROW')
        NSLICE2 = 1
        IF (IFORM .EQ. 3 .AND. NSLICE1 .NE. 1)
     &      CALL RDPRMI(NSLICE2,NDUM,NLOOP,ILOOP,'NSLICE')
        IF (NROW2 .EQ. 0)
     &      NROW2 = FLOAT(NSAM2) / FLOAT(NSAM1) * FLOAT(NROW1)
        CALL OPENF(FILNAM,LUN2,NSAM2,NROW2,'UNKNOWN',NF,NSLICE2)
        IF (NF .EQ. 1) THEN
          IER = 4
          GOTO 9900
        END IF
d647 1
a647 1
     &             IDUM,'INPUT',.FALSE.,IRTFLG)
d681 1
a681 1
     &             IDUM,'OUTPUT',.FALSE.,IRTFLG)
d695 1
a695 1
     &             IDUM,'INPUT1',.FALSE.,IRTFLG)
d711 1
a711 1
     &             IDUM,'INPUT',.FALSE.,IRTFLG)
d720 1
a720 1
     &             IDUM,'OUTPUT',.TRUE.,IRTFLG)
d732 1
a732 1
     &             IDUM,'MASK REFERENCE',.FALSE.,IRTFLG)
d738 1
a738 1
     &             IDUM,'IMAGE (OVERWRITTEN!)',.TRUE.,IRTFLG)
d753 1
a753 1
     &             IDUM,'OUTPUT',.TRUE.,IRTFLG)
d770 1
a770 1
     &             IDUM,'INPUT',.FALSE.,IRTFLG)
d774 1
a774 1
     &             IDUM,'OUTPUT',.TRUE.,IRTFLG)
d818 1
a818 1
     &             IDUM,'IMAGE TO BE THRESHOLDED',.FALSE.,IRTFLG)
d826 1
a826 1
     &             IDUM,'OUTPUT',.TRUE.,IRTFLG)
d839 1
a839 1
     &             IDUM,'INPUT',.FALSE.,IRTFLG)
d861 1
a861 1
     &             IDUM,'INPUT',.FALSE.,IRTFLG)
d936 3
d944 1
a944 1
     &                IDUM,PROMPT1,.TRUE.,IRTFLG)
d959 1
a959 1
     &                IDUM,PROMPT2,.TRUE.,IRTFLG)
d991 1
a991 1
     &             IDUM,PROMPT3,.TRUE.,IRTFLG)
@


1.28
log
@added nslice parameter to denov call
@
text
@d706 1
a706 1
        CALL SQUEEZ(LUN1,LUN2,NSAM1,NROW1,IERR)
@


1.27
log
@MU ADD call did not use lunb,luna,lunct
@
text
@d587 1
a587 1
        CALL DENOV(LUN1,LUN2,NSAM1,NROW1)
@


1.26
log
@*** empty log message ***
@
text
@d224 1
a224 1
        CALL ADD(LUN2,LUNA,LUN3,NSAM,NROW,NSLICE,SIGN)
@


1.25
log
@GP and RP added
@
text
@d56 1
a56 1
     &            21, 22, 23, 24, 25, 26, 27, 28, 29, 38 ) IFUNC
d868 1
a868 1
29	CALL OPFIL(.TRUE.,FILNAM,LUN1,'O',NSAM1,NROW1,NSLICE1,
@


1.24
log
@R removed
@
text
@d37 1
a37 1
	PARAMETER       (NFUNC=28)
d47 1
a47 1
     5            'AS', 'MN', 'TH'/  
d56 1
a56 1
     &            21, 22, 23, 24, 25, 26, 27, 28 ) IFUNC
d844 46
@


1.23
log
@added util2sup subroutine to handle same files in ad,su,mu operation.
@
text
@d551 1
a551 1
14	CALL OPFIL(.TRUE.,FILNAM,LUN1,'R',NSAM1,NROW1,NSLICE1,
d566 1
a566 1
15	CALL OPFIL(.TRUE.,FILNAM,LUN1,'R',NSAM1,NROW1,NSLICE1,
@


1.22
log
@CE OD added
@
text
@d35 2
a36 2
        COMMON /COMMUN/ FIL,FILNAM
        CHARACTER *81   FIL,FILNAM
d66 4
a69 3
1	LUNA = LUN1
        CALL OPFIL(.TRUE.,FILNAM,LUNA,'O',NSAM1,NROW1,NSLICE1,
     &     IDUM,'FIRST INPUT',.TRUE.,IRTFLG)
a70 22
        FIRST  = .TRUE.
        IFORM1 = IFORM

C       OPEN NEXT INPUT FILE
111	CALL OPFIL(.TRUE.,FILNAM,LUN2,'O',NSAM2,NROW2,NSLICE2,
     &             IDUM,'NEXT INPUT',.TRUE.,IRTFLG)
	IF (IRTFLG .NE. 0) GOTO 9000
        IFORM2 = IFORM
	IF (NSAM1.NE.NSAM2.OR.NROW1.NE.NROW2.OR.NSLICE1.NE.NSLICE2) THEN
	   IER = 1
	   GOTO 9900
	ELSEIF (IFORM2 .NE. IFORM1)  THEN
	   IER = 40
	   GOTO 9900
        ENDIF

        IF (FIRST) THEN
C          OPEN OUTPUT FILE
   	   CALL OPFIL(.TRUE.,FILNAM,LUN3,'U',NSAM2,NROW2,NSLICE2,
     &             IDUM,'SUMMED OUTPUT',.TRUE.,IRTFLG)
	   IF (IRTFLG .NE. 0) GOTO 9000
        ENDIF
d73 2
a74 2
        CALL ADD(LUN2,LUNA,LUN3,NSAM1,NROW1,NSLICE1,SIGN)
        CLOSE(LUN2)
d76 1
a76 1
        LUNA  = LUN3
d78 1
d80 1
a80 1
        GOTO 111
d84 2
a85 4
2       CALL FILERD(FILNAM,NLETO,NULL,'OUTPUT',IRTFLG)
        IF (IRTFLG .EQ. -1) GOTO 9000

        CALL RDPRMI(NSAM2,NROW2,NLOOP,ILOOP,'ENTER DIMS NSAM,NROW')
d87 3
a89 1
        IF (NROW2 .EQ. 0) NROW2 = NSAM2
a90 7
        IFORM = 1
        CALL OPENF(FILNAM,LUN2,NSAM2,NROW2,'UNKNOWN',NF,NSLICE2)
        IF (NF .EQ. 1) THEN
          IER = 4
          GOTO 9900
        END IF   
      
d93 1
a93 1
	   CALL OPFIL(.TRUE.,FIL,LUN1,'O',NSAMR,NROWR,NDUM,
d159 1
a159 1
        END IF
d194 2
a195 8
6	LUNA = LUN1
        CALL OPFIL(.TRUE.,FILNAM,LUNA,'O',NSAM1,NROW1,NSLICE1,
     &     IDUM,'INPUT',.TRUE.,IRTFLG)
	IF (IRTFLG .NE. 0) GOTO 9000
        FIRST  = .TRUE.
        IFORM1 = IFORM

C       OPEN SECOND INPUT FILE
d197 3
a199 2
           CALL OPFIL(.TRUE.,FILNAM,LUN2,'O',NSAM2,NROW2,NSLICE2,
     &             IDUM,'DIVISOR',.TRUE.,IRTFLG)
d201 3
a203 2
           CALL OPFIL(.TRUE.,FILNAM,LUN2,'O',NSAM2,NROW2,NSLICE2,
     &             IDUM,'MULTIPLIER',.TRUE.,IRTFLG)
a205 15
        IFORM2 = IFORM
	IF (NSAM1.NE.NSAM2.OR.NROW1.NE.NROW2.OR.NSLICE1.NE.NSLICE2) THEN
	   IER = 1
	   GOTO 9900
	ELSEIF (IFORM2 .NE. IFORM1)  THEN
	   IER = 40
	   GOTO 9900
        ENDIF

        IF (FIRST) THEN
C          OPEN OUTPUT FILE
   	   CALL OPFIL(.TRUE.,FILNAM,LUN3,'U',NSAM2,NROW2,NSLICE2,
     &             IDUM,'OUTPUT',.TRUE.,IRTFLG)
	   IF (IRTFLG .NE. 0) GOTO 9000
        ENDIF
d224 1
a224 1
        CALL ADD(LUN2,LUNA,LUN3,NSAM1,NROW1,NSLICE1,SIGN)
d226 1
a226 1
        CLOSE(LUN2)
d228 2
a229 1
        LUNA = LUN3
d465 1
a465 8
C	SUBTRACTS ONE OR MORE PICT. FROM THE FIRST PICT.

11 	LUNA = LUN1
        CALL OPFIL(.TRUE.,FILNAM,LUNA,'O',NSAM1,NROW1,NSLICE1,
     &       IDUM,'INPUT',.TRUE.,IRTFLG)
	IF (IRTFLG .NE. 0) GOTO 9000
        IFORM1 = IFORM
        FIRST  = .TRUE.
d467 5
a471 3
C       OPEN SECOND INPUT FILE
1140    CALL OPFIL(.TRUE.,FILNAM,LUN2,'O',NSAM2,NROW2,NSLICE2,
     &             IDUM,'SUBTRACTED',.TRUE.,IRTFLG)
a472 15
        IFORM2 = IFORM
	IF (NSAM1.NE.NSAM2.OR.NROW1.NE.NROW2.OR.NSLICE1.NE.NSLICE2) THEN
	   IER = 1
	   GOTO 9900
	ELSEIF (IFORM .NE. IFORM1)  THEN
	   IER = 40
	   GOTO 9900
        ENDIF

        IF (FIRST) THEN
C          OPEN OUTPUT FILE
   	   CALL OPFIL(.TRUE.,FILNAM,LUN3,'U',NSAM2,NROW2,NSLICE2,
     &             IDUM,'OUTPUT',.TRUE.,IRTFLG)
	   IF (IRTFLG .NE. 0) GOTO 9000
        ENDIF
d475 2
a476 2
	CALL ADD(LUN2,LUNA,LUN3,NSAM1,NROW1,NSLICE1,SIGN)
        CLOSE(LUN2)
d478 1
a478 1
        LUNA  = LUN3
d543 1
a543 1
           CALL ENHANC(FIL,LUN1,LUN2,NSAM1,NROW1,NSLICE1)
d742 1
a742 1
        FIL = FILNAM
d852 119
a970 2
9911    FCHAR(:1) = ';'
        IFOUND = 1
d972 1
@


1.21
log
@no change
@
text
@d579 2
d587 3
@


1.20
log
@removed call to pdpvax
@
text
@d712 1
a712 1
        
@


1.19
log
@*** empty log message ***
@
text
@d829 2
a830 1
24      CALL PDPVAX(LUN1,LUN2,FCHAR(4:4))
@


1.18
log
@*** empty log message ***
@
text
@d633 1
a633 1
        CALL MIRROR(LUN1,LUN2,NSAM1,NROW1,NSLICE1,MAXDIM)
@


1.17
log
@blank needed iform setting
@
text
@d611 1
a611 1
14	CALL OPFIL(.TRUE.,FILNAM,LUN1,'O',NSAM1,NROW1,NSLICE1,
d624 1
a624 2
C	MIRROR SYMMETRY WITH MIRROR AXIS AT NROWS/2+1

d626 1
a626 1
15	CALL OPFIL(.TRUE.,FILNAM,LUN1,'O',NSAM1,NROW1,NSLICE1,
a628 1

d633 1
a633 2

        CALL MIRROR(LUN1,LUN2,NSAM1,NROW1,NSLICE1)
d635 1
a635 1

a637 1

@


1.16
log
@cosmetic
@
text
@d111 1
@


1.15
log
@changed <CP> to <CP TO> or <CP FROM>
@
text
@d27 1
d29 2
d32 2
a33 2
        DIMENSION    Q(1)
        POINTER      (IPQ,Q) 
d36 5
a40 5
        CHARACTER *81 FIL,FILNAM
	PARAMETER     (NFUNC=28)
        CHARACTER *2  FUNC(NFUNC),ANS
        LOGICAL       FIRST
        CHARACTER     NULL
d49 1
a49 1
CNO_SAVE
d51 1
d380 2
a381 1
C	OPEN THE OUTPUT FILE
d385 1
a385 1
C
d387 1
a387 1
C
d397 4
a400 4
		IF (2*NSAM1 .GT. MAXDIM) THEN
		IER = 6
		GOTO 9900
		ENDIF
d405 9
a413 9
	    IF(FCHAR(4:5).EQ.'F')  THEN
            NNNN=NSAM1+2-MOD(NSAM1,2)
	    MEMWANT=NNNN*NROW1*NSLICE1
	CALL CHKMEM(MEMWANT,BUF,MAXDIM,RUNTIME,IPQ,IRTFLG)
	    IF(IRTFLG.NE.0)  THEN
	    IER = 6
	    GOTO 9900
	    ENDIF
              DO  J = 1, NROW1*NSLICE1
d415 12
a426 11
              ENDDO
		INS=+1
		CALL  FMRS_3(Q,NSAM1,NROW1,NSLICE1,INS)
		IF(INS.EQ.0)  THEN
		IER=38
		GOTO 9900
		ENDIF
	CALL  SHIFT_PF(Q,NNNN/2,NSAM1,NROW1,NSLICE1,SAMS,ROWS,SLICS)
		INS=-1
		CALL  FMRS_3(Q,NSAM1,NROW1,NSLICE1,INS)
              DO J = 1, NROW1*NSLICE1
d428 2
a429 2
              ENDDO
	IF(RUNTIME)  CALL ALLOCIT(0,RUNTIME,IPQ,'SH',IRTFLG)
d434 1
a434 1
		ENDIF
d439 1
a439 1
        ELSEIF(IFORM.EQ.1)  THEN
d444 4
a447 4
		IF (2*NSAM1 .GT. MAXDIM) THEN
		IER = 6
		GOTO 9900
		ENDIF
d450 9
a458 9
	    IF(FCHAR(4:5).EQ.'F')  THEN
            NNNN=NSAM1+2-MOD(NSAM1,2)
	    MEMWANT=NNNN*NROW1
	CALL CHKMEM(MEMWANT,BUF,MAXDIM,RUNTIME,IPQ,IRTFLG)
	    IF(IRTFLG.NE.0)  THEN
	    IER = 6
	    GOTO 9900
	    ENDIF
              DO  J = 1, NROW1
d460 14
a473 14
              ENDDO
		INS=+1
		CALL  FMRS_2(Q,NSAM1,NROW1,INS)
		IF(INS.EQ.0)  THEN
		IER=38
		GOTO 9900
		ENDIF
	CALL  SHIFT_PF(Q,NNNN/2,NSAM1,NROW1,1,SAMS,ROWS,0)
		INS=-1
		CALL  FMRS_2(Q,NSAM1,NROW1,INS)
              DO J = 1, NROW1
                  CALL WRTLIN(LUN2,Q(1 + (J-1)*NNNN),NSAM1,J)
              ENDDO
	IF(RUNTIME)  CALL ALLOCIT(0,RUNTIME,IPQ,'SH',IRTFLG)
d476 4
a479 4
		IF (6*NSAM1 .GT. MAXDIM) THEN
		IER = 6
		GOTO 9900
		ENDIF
d488 1
a488 1
	CALL  ERRT(2,'SH',NE)
@


1.14
log
@adding copy mrc : copymrc.f dohdr.f imopen.f
@
text
@d131 1
a131 127
3       IF (FCHAR(4:5) .EQ. 'SC') THEN

C         EIKONIX SCAN PROGRAMS (REMOVED 1994)
          WRITE(NOUT,*)'**** EIKONIX SUBROUTINES NO LONGER SUPPORTED'
          GOTO 9000

        ELSEIF (FCHAR(4:7) .EQ. 'BRIX') THEN
C         COPY 3D SPIDER FILE TO BRIX FORMAT
          CALL COPYBRIX()
          GOTO 9000

        ELSEIF (FCHAR(4:6) .EQ. 'SF3') THEN
C         COPY 3D FOURIER TRANSFORM TO AND FROM SIMPLE FORMAT
          CALL COPYFSIMPLE(LUN1,LUN2)
          GOTO 9000

        ELSEIF (FCHAR(4:5) .EQ. 'SH') THEN
C         COPY SHORT HEADER FILE TO REGULAR HEADER FILE
          CALL COPYSHORT(LUN1,LUN2)
          GOTO 9000

        ELSEIF (FCHAR(4:4) .EQ. 'S' .OR. FCHAR(4:4) .EQ. ' ') THEN
C         STANDARD COPY
          CALL COPYD(IRTFLG)
          GOTO 9000

        ELSEIF (FCHAR(4:4) .EQ. 'L') THEN
C         COPY TWO ILUMINATION LEVEL IMAGES INTO A MERGED THIRD IMAGE
          CALL ADJUST(LUN1,LUN2,LUN3,IRTFLG)
          GOTO 9000

        ELSEIF (FCHAR(4:6) .EQ. 'RAW') THEN
C         COPY RAW IMAGE FILE INTO SPIDER IMAGE FILE
          CALL RAWTOSPIDER(LUN1,LUN2,32,.FALSE.,IRTFLG)
          GOTO 9000

        ELSEIF (FCHAR(4:4) .EQ. 'R') THEN
C         COPY FROM TERMINAL INTO SPIDER IMAGE FILE
          CALL COPYR(LUN2)
          GOTO 9000

        ELSEIF (FCHAR(4:4) .EQ. 'W') THEN
C         OBSOLETE IMAGE INPUT/OUTPUT REMOVED DEC 89 AL
          WRITE(NOUT,*) 'USE "CP F" INSTEAD'
          GOTO 9000
          
        ELSEIF (FCHAR(4:5) .EQ. 'EM') THEN
C         COPY FROM EM-FORMAT TO SPIDER FORMAT
          CALL COPYEM(LUN1,LUN2)
          GOTO 9000

        ELSEIF (FCHAR(4:5) .EQ. 'EF' .OR. FCHAR(4:5) .EQ. 'VF') THEN
          WRITE(NOUT,*) 'USE "CP E" INSTEAD'
          GOTO 9000

        ELSEIF (FCHAR(4:5) .EQ. 'PO') THEN
C         COPY FROM SPIDER IMAGE TO POSTSCRIPT IMAGE (8 BIT)
          CALL COPYPOS(LUN1,LUN2)
          GOTO 9000

        ELSEIF (FCHAR(4:5) .EQ. 'JP') THEN
C         COPIES FROM JP'S FORMAT INTO SPIDER IMAGE FILE
          CALL COPYJP(LUN1,LUN2)
          GOTO 9000

        ELSEIF (FCHAR(4:6) .EQ.'MRC') THEN
C         MRC'S FORMAT FOR TRANSFERING TO CAMBRIDGE (CP MRC)
C         COPY FROM MRC FORMAT INTO SPIDER IMAGE FILE
          CALL COPYMRC(LUN1,LUN2)
          WRITE(NOUT,*) '*** COPYMRC COMMENTED OUT IN UTIL2'
          GOTO 9000

        ELSEIF (FCHAR(4:4) .EQ. 'U' .OR. FCHAR(4:4) .EQ. 'T') THEN
C         COPY SPIDER IMAGE FILE INTO UNIX SPIDER IMAGE FILE
          CALL COPYU(LUN1,LUN2)
          GOTO 9000

        ELSEIF (FCHAR(4:5) .EQ. 'VV') THEN
C         COPY UNIX IMAGE FILE INTO VOXEL-VIEW FILES
          CALL COPYU(LUN1,LUN2)
          GOTO 9000

        ELSEIF (FCHAR(4:4) .EQ. 'V') THEN
C         COPY UNIX IMAGE FILE INTO VAX SPIDER IMAGE FILE
          CALL COPYVAX(LUN1,LUN2,LUN3)
          GOTO 9000

        ELSEIF (FCHAR(4:4) .EQ. 'F') THEN
C         COPY EDITABLE IMAGE FILE INTO SPIDER IMAGE FILE
          CALL COPYF(LUN1,LUN2)
          GOTO 9000

       ELSEIF (FCHAR(4:6) .EQ. 'PDB') THEN
C         COPY A PDB FILE INTO SPIDER VOLUME FILE
          CALL READPDB(MAXDIM) 
          GOTO 9000

        ENDIF

C       OPEN FIRST INPUT FILE
	CALL OPFIL(.TRUE.,FILNAM,LUN1,'O',NSAM1,NROW1,NSLICE1,
     &             IDUM,'INPUT',.TRUE.,IRTFLG)
	IF (IRTFLG .NE. 0) GOTO 9000
	IFORM1 = IFORM
	IF (FCHAR(4:4).EQ.'I') THEN

C         TRAP FOR 'CP I' ROUTINE, SIXEL IMAGE OUTPUT
          CALL SIXOUT(NSAM1,NROW1,NSAM1,NROW1,LUN1,LUN2)
          GOTO 9000

        ELSE IF (FCHAR(4:4).EQ.'E') THEN

C         TRAP FOR 'CP E', COPY SPIDER IMAGE FILE INTO EDITABLE IMAGE
          CALL COPYE(LUN1,LUN2,NSAM1,NROW1,NSLICE1)
          GOTO 9000
        ENDIF

C       OPEN THE OUTPUT FILE
        NSAM2   = NSAM1
        NROW2   = NROW1
        NSLICE2 = NSLICE1
        IFORM   = IFORM1
        CALL OPFIL(.TRUE.,FILNAM,LUN2,'U',NSAM2,NROW2,NSLICE2,
     &             IDUM,'OUTPUT',.TRUE.,IRTFLG)
        IF (IRTFLG .NE. 0) GOTO 9000
 
        CALL COPYD(IRTFLG)
@


1.14.1.1
log
@*** empty log message ***
@
text
@a26 1

a27 2
CNO_SAVE

d29 2
a30 2
        DIMENSION       Q(1)
        POINTER         (IPQ,Q) 
d33 5
a37 5
        CHARACTER *81   FIL,FILNAM
	PARAMETER       (NFUNC=28)
        CHARACTER *2    FUNC(NFUNC),ANS
        LOGICAL         FIRST
        CHARACTER       NULL
d46 1
a46 1

a47 1

d131 127
a257 1
3	CALL COPY1(MAXDIM)		
d502 1
a502 2

C	OPEN OUTPUT FILE
d506 1
a506 1

d508 1
a508 1

d518 4
a521 4
	    IF (2*NSAM1 .GT. MAXDIM) THEN
	       IER = 6
	       GOTO 9900
	    ENDIF
d526 9
a534 9
	    IF (FCHAR(4:5) .EQ. 'F')  THEN
               NNNN=NSAM1+2-MOD(NSAM1,2)
	       MEMWANT=NNNN*NROW1*NSLICE1
	       CALL CHKMEM(MEMWANT,BUF,MAXDIM,RUNTIME,IPQ,IRTFLG)
	       IF (IRTFLG .NE. 0)  THEN
	          IER = 6
	          GOTO 9900
	       ENDIF
               DO J = 1, NROW1*NSLICE1
d536 11
a546 12
               ENDDO
	       INS=+1
	       CALL  FMRS_3(Q,NSAM1,NROW1,NSLICE1,INS)
	       IF (INS.EQ.0)  THEN
		  IER=38
		  GOTO 9900
	       ENDIF
	       CALL  SHIFT_PF(Q,NNNN/2,NSAM1,NROW1,NSLICE1,SAMS,ROWS,
     &                        SLICS)
	       INS=-1
	       CALL  FMRS_3(Q,NSAM1,NROW1,NSLICE1,INS)
               DO J = 1, NROW1*NSLICE1
d548 2
a549 2
               ENDDO
	       IF(RUNTIME)  CALL ALLOCIT(0,RUNTIME,IPQ,'SH',IRTFLG)
d554 1
a554 1
	     ENDIF
d559 1
a559 1
        ELSEIF (IFORM .EQ. 1)  THEN
d564 4
a567 4
	   IF (2*NSAM1 .GT. MAXDIM) THEN
	      IER = 6
	      GOTO 9900
	   ENDIF
d570 9
a578 9
	    IF (FCHAR(4:5).EQ.'F')  THEN
               NNNN=NSAM1+2-MOD(NSAM1,2)
	       MEMWANT=NNNN*NROW1
	       CALL CHKMEM(MEMWANT,BUF,MAXDIM,RUNTIME,IPQ,IRTFLG)
	       IF(IRTFLG.NE.0)  THEN
	          IER = 6
	          GOTO 9900
	       ENDIF
               DO  J = 1, NROW1
d580 14
a593 14
               ENDDO
	       INS=+1
	       CALL  FMRS_2(Q,NSAM1,NROW1,INS)
	       IF(INS.EQ.0)  THEN
		  IER=38
		  GOTO 9900
	       ENDIF
	       CALL  SHIFT_PF(Q,NNNN/2,NSAM1,NROW1,1,SAMS,ROWS,0)
	       INS=-1
	       CALL  FMRS_2(Q,NSAM1,NROW1,INS)
                DO J = 1, NROW1
                   CALL WRTLIN(LUN2,Q(1 + (J-1)*NNNN),NSAM1,J)
                ENDDO
	        IF(RUNTIME)  CALL ALLOCIT(0,RUNTIME,IPQ,'SH',IRTFLG)
d596 4
a599 4
	       IF (6*NSAM1 .GT. MAXDIM) THEN
	          IER = 6
	          GOTO 9900
	       ENDIF
d608 1
a608 1
	   CALL  ERRT(2,'SH',NE)
@


1.13
log
@removed iopt from mask call
@
text
@d199 1
a199 1
C**       CALL COPYMRC(LUN1,LUN2)
@


1.12
log
@sh fixed
@
text
@a774 1
C	MA I	INSIDE MASK
d790 1
a790 1
        CALL MASK(LUN1,LUN2,NSAM1,NROW1,NSLICE1,AV1,FCHAR(4:4))
@


1.11
log
@added output files to add subroutine
@
text
@a26 3

CNO_SAVE

a27 1

d29 3
a31 1

a32 1

d38 1
a38 1

d44 3
a46 2
     5            'AS', 'MN', 'TH'/      

a47 4
	LUN1   = 8
	LUN2   = 10
	LUN3   = 7

d496 1
a496 3
C		SH F     SHIFT FLOATING POINT
C               SH BL    SHIFT FLOATING POINT, FORCING BILINEAR INTERP.
C		SH 3     SHIFT 3-D
a501 5
	IF (NSAM1 .GT. MAXDIM) THEN
          IER = 9
          GOTO 9900
        ENDIF

d506 4
a509 2

        IF (FCHAR(4:4).EQ. '3') THEN
a510 1
          CALL RDPRM2(SAMS,ROWS,NLOOP,ILOOP,'SHIFT COMPONENTS IN X-Y')
d518 5
d526 29
d557 1
d559 3
a561 6
          GOTO 9000
        ENDIF

        CALL RDPRM2(SAMS,ROWS,NLOOP,ILOOP,'SHIFT COMPONENTS')
        IF(REAL(IFIX(SAMS)).EQ.SAMS .AND. REAL(IFIX(ROWS)).EQ.ROWS) THEN
C          INTEGRAL SHIFT
d564 4
d569 26
a594 5
        ELSE
C          NON INTEGRAL SHIFT
           IF (2**LOG2(NSAM1) .NE. NSAM1  .OR.
     &         2**LOG2(NROW1) .NE. NROW1  .OR.
     &         FCHAR(4:5)     .EQ. 'BL')       THEN
d596 4
d605 1
a605 14
           ELSE
C             NON-BILINEAR INTERPOLATION
              IF (NSAM1 * NROW1 .GE. MAXDIM)  THEN
C                INSUFFICIENT MEMORY
                 CALL  ERRT(6,'SHIFT ',NE)
                 GOTO  9000
              ENDIF
              DO  J = 1, NROW1
                  CALL REDLIN(LUN1,BUF(1 + (J-1)*NSAM1),NSAM1,J)
              ENDDO
              CALL  SHIFT_PF(BUF,NSAM1,NROW1,SAMS,ROWS)
              DO J = 1, NROW1
                  CALL WRTLIN(LUN2,BUF(1 + (J-1)*NSAM1),NSAM1,J)
              ENDDO
d607 3
a609 3
        ENDIF
C       SET UNDETERMINED STATISTICS FLAG
        CALL SETPRMB(BUF,LUN2,NSAM1,NROW1,0.,0.,0.,'U')
a610 1

@


1.10
log
@some bad iforms used from openfil
@
text
@d6 1
a32 1
        COMMON /LUNARA/ LUNARA(100),LASLAB
d39 1
a52 1
	NE     = 0
d59 1
a59 1
          END IF
d68 3
a70 2
1	CALL OPFIL(.TRUE.,FILNAM,LUN1,'O',NSAM1,NROW1,NSLICE1,
     &     IDUM,'INPUT (OVERWRITTEN WITH SUM!)',.TRUE.,IRTFLG)
d72 1
d75 1
a75 1
C       OPEN SECOND INPUT FILE
d77 1
a77 1
     &             IDUM,'ADDED',.TRUE.,IRTFLG)
d83 2
a84 2
	ELSEIF (IFORM1 .NE. IFORM2)  THEN
	   IER=40
d88 7
d96 1
a96 1
        CALL ADD(LUN2,LUN1,NSAM1,NROW1,NSLICE1,SIGN)
d98 4
a101 3

C       SET UNDETERMINED STATISTICS FLAG
        CALL SETPRM(LUN1,NSAM2,NROW2,0.0,0.0,0.0,'U')
a240 4
	IF (NSAM1 .GT. MAXDIM) THEN
          IER = 9
          GOTO 9900
        ENDIF
a272 4
	IF (NSAM1 .GT. MAXDIM) THEN
           IER = 9
           GOTO 9900
        ENDIF
a285 3
        ELSEIF (NSAM2 .GT. MAXDIM) THEN
           IER = 3
           GOTO 9900
a304 4
	IF (NSAM1 .GT. MAXDIM) THEN
          IER = 9
          GOTO 9900
        END IF
d348 3
a350 2
6	CALL OPFIL(.TRUE.,FILNAM,LUN1,'O',NSAM1,NROW1,NSLICE1,
     &         IDUM,'INPUT (OVERWRITTEN WITH RESULT!)',.TRUE.,IRTFLG)
d352 1
d355 1
d363 1
a364 1
	IF (IRTFLG .NE. 0) GOTO 9000
d368 1
a368 1
	ELSEIF (IFORM1 .NE. IFORM2)  THEN
d373 7
d382 1
a382 1
            IF (IFORM1 .EQ. -9) THEN
d391 1
a391 1
           WRITE(NOUT,*) ' COMPLEX MULTIPLICATION X * CONJG(Y)'
d397 2
a398 1
        CALL ADD(LUN2,LUN1,NSAM1,NROW1,NSLICE1,SIGN)
d400 3
a402 3

C       SET UNDETERMINED STATISTICS FLAG
        CALL SETPRM(LUN1,NSAM2,NROW2,0.,0.,0.,'U')
a411 4
	IF (NSAM1 .GT. MAXDIM) THEN
          IER = 9
          GOTO 9900
        ENDIF
a425 3
        ELSEIF (NSAM2 .GT. MAXDIM) THEN
           IER = 3
           GOTO 9900
a448 4
	IF (NSAM1 .GT. MAXDIM) THEN
          IER = 9
          GOTO 9900
        END IF
d461 1
a461 1
        END IF
d466 1
a466 1
        END IF
d524 3
a526 3
          IF (SAMS  .EQ. FLOAT(IFIX(SAMS))  .AND.
     &        ROWS  .EQ. FLOAT(IFIX(ROWS))  .AND.
     &        SLICS .EQ. FLOAT(IFIX(SLICS))  )  THEN
d568 1
a568 1
                 CALL WRTLIN(LUN2,BUF(1 + (J-1)*NSAM1),NSAM1,J)
d580 2
a581 3
C	OPEN INPUT FILE
10 	CALL OPFIL(.TRUE.,FILNAM,LUN1,'O',NSAM1,NROW1,NSLICE1,
     &             IDUM,'INPUT',.FALSE.,IRTFLG)
a582 4
	IF (NSAM1 .GT. MAXDIM) THEN
          IER = 9
          GOTO 9900
        ENDIF
d585 1
a585 1
 	CALL OPFIL(.TRUE.,FILNAM,LUN2,'U',NSAM1,NROW1,NSLICE1,
d588 3
a590 4
	SIGN=+3.0
        CALL ADD(LUN1,LUN2,NSAM1,NROW1,NSLICE1,SIGN)
C       SET UNDETERMINED STATISTICS FLAG
        CALL SETPRM(LUN2,NSAM1,NROW1,0.,0.,0.,'U')
d596 3
a598 2
11 	CALL OPFIL(.TRUE.,FILNAM,LUN1,'O',NSAM1,NROW1,NSLICE1,
     &       IDUM,'INPUT (OVERWITTEN WITH RESULT!)',.TRUE.,IRTFLG)
d601 1
d603 3
a605 3
C       OPEN NEXT INPUT FILE
1140 	CALL OPFIL(.TRUE.,FILNAM,LUN2,'O',NSAM2,NROW2,NSLICE2,
     &             IDUM,'NEXT INPUT',.TRUE.,IRTFLG)
d611 1
a611 1
	ELSEIF (IFORM1 .NE. IFORM2)  THEN
d616 7
d624 1
a624 1
	CALL ADD(LUN2,LUN1,NSAM1,NROW1,NSLICE1,SIGN)
d626 3
a628 2
C       SET UNDETERMINED STATISTICS FLAG
        CALL SETPRM(LUN1,NSAM2,NROW2,0.,0.,0.,'U')
a674 4
	IF (NSAM1 .GT. MAXDIM) THEN
          IER = 9
          GOTO 9900
        END IF
a697 4
	IF (NSAM1 .GT. MAXDIM) THEN
          IER = 9
          GOTO 9900
        END IF
a713 4
	IF (NSAM1 .GT. MAXDIM) THEN
          IER = 9
          GOTO 9900
        END IF
a728 4
	IF (NSAM1 .GT. MAXDIM) THEN
          IER = 9
          GOTO 9900
        END IF
a746 4
	IF (NSAM1 .GT. MAXDIM) THEN
          IER = 9
          GOTO 9900
        ENDIF
a773 4
	IF (NSAM1 .GT. MAXDIM) THEN
          IER = 9
          GOTO 9900
        END IF
a853 4
	IF (NSAM1 .GT. MAXDIM) THEN
          IER = 9
          GOTO 9900
        END IF
d870 1
a870 5
	IF (NSAM1 .GT. MAXDIM) THEN
          IER = 9
          GOTO 9900

        ELSEIF (FMIN .LT. 0) THEN
d873 1
a873 1
        END IF
d876 1
a876 1
	CALL OPFIL(.TRUE.,FILNAM,LUN2,'U',NSAM1,NROW1,NSLICE1,
d880 2
a881 6
C       NEW OPERATION "WU" FOR SQUARE ROOT OF PICTURE
	SIGN=+4.0
        CALL ADD(LUN1,LUN2,NSAM1,NROW1,NSLICE1,SIGN)

C       SET UNDETERMINED STATISTICS FLAG
        CALL SETPRM(LUN2,NSAM1,NROW1,0.,0.,0.,'U')
a891 4
	IF (NSAM1 .GT. MAXDIM) THEN
          IER = 9
          GOTO 9900
        END IF
a900 3
        ELSEIF (NSAM2 .GT. MAXDIM) THEN
           IER = 3
           GOTO 9900
a927 4
	IF (NSAM1 .GT. MAXDIM) THEN
          IER = 9
          GOTO 9900
        END IF
d995 1
d998 1
@


1.9
log
@changd window parameters
@
text
@a51 1
	IFORM  = 1
d69 1
a69 1
     &     IFORM1,'INPUT (OVERWRITTEN WITH SUM!)',.TRUE.,IRTFLG)
d71 1
d75 1
a75 1
     &             IFORM2,'ADDED',.TRUE.,IRTFLG)
d77 1
d81 1
a81 1
	ELSEIF (IFORM1.NE.IFORM2)  THEN
d112 1
a112 1
     &                IFORM,'REFERENCE',.FALSE.,IRTFLG)
d228 1
a228 1
     &             IFORM,'INPUT',.TRUE.,IRTFLG)
d254 1
a254 1
     &             IFORM,'OUTPUT',.TRUE.,IRTFLG)
d265 1
a265 1
     &             IFORM,'SMALL INPUT',.FALSE.,IRTFLG)
d277 1
a277 1
     &             IFORM,'LARGE INPUT (OVERWRITTEN!)',.TRUE.,IRTFLG)
d280 1
a280 1
	IF (IFORM .LT. 0 .AND. IFORM.NE.-9) THEN
d304 1
a304 1
     &             IFORM,'INPUT',.FALSE.,IRTFLG)
d328 1
a328 1
     &             IFORM,'OUTPUT',.TRUE.,IRTFLG)
d354 1
a354 1
     &         IFORM1,'INPUT (OVERWRITTEN WITH RESULT!)',.TRUE.,IRTFLG)
d356 1
d360 1
a360 1
     &             IFORM2,'DIVISOR',.TRUE.,IRTFLG)
d363 1
a363 1
     &             IFORM2,'MULTIPLIER',.TRUE.,IRTFLG)
d365 1
d377 1
a377 1
            IF (IFORM .EQ. -9) THEN
d403 2
a404 1
     &             IFORM,'SMALL INPUT',.FALSE.,IRTFLG)
d413 1
a413 1
     &             IFORM,'LARGE INPUT (OVERWRITTEN!)',.TRUE.,IRTFLG)
d416 1
d418 4
a421 1
	IF (IFORM .LE. 0 .AND. IFORM .NE. -9) THEN
d424 1
a424 1
        ELSE IF (NSAM2 .GT. MAXDIM) THEN
d443 1
a443 1
     &             IFORM,'INPUT',.FALSE.,IRTFLG)
d513 1
a513 1
     &             IFORM1,'INPUT',.FALSE.,IRTFLG)
d522 1
a522 1
     &             IFORM1,'OUTPUT',.FALSE.,IRTFLG)
d587 1
a587 1
     &             IFORM1,'INPUT',.FALSE.,IRTFLG)
d596 1
a596 1
     &             IFORM1,'OUTPUT',.TRUE.,IRTFLG)
d608 1
a608 1
     &       IFORM1,'INPUT (OVERWITTEN WITH RESULT!)',.TRUE.,IRTFLG)
d610 1
d614 1
a614 1
     &             IFORM2,'NEXT INPUT',.TRUE.,IRTFLG)
d616 1
d638 1
a638 1
     &             IFORM,'INPUT',.FALSE.,IRTFLG)
d645 1
a645 1
     &             IFORM,'OUTPUT',.FALSE.,IRTFLG)
d674 1
a674 1
     &             IFORM1,'INPUT',.FALSE.,IRTFLG)
d683 1
a683 1
     &             IFORM1,'OUTPUT',.TRUE.,IRTFLG)
d701 1
a701 1
     &             IFORM1,'INPUT',.FALSE.,IRTFLG)
d710 1
a710 1
     &             IFORM1,'OUTPUT',.TRUE.,IRTFLG)
d721 1
a721 1
     &             IFORM1,'INPUT',.FALSE.,IRTFLG)
d730 1
a730 1
     &             IFORM1,'OUTPUT',.TRUE.,IRTFLG)
d740 1
a740 1
     &             IFORM1,'INPUT',.FALSE.,IRTFLG)
d749 1
a749 1
     &             IFORM1,'OUTPUT',.TRUE.,IRTFLG)
d762 1
a762 1
     &             IFORM1,'INPUT',.FALSE.,IRTFLG)
d774 1
a774 1
     &             IFORM1,'OUTPUT',.TRUE.,IRTFLG)
d793 1
a793 1
     &             IFORM,'INPUT',.FALSE.,IRTFLG)
d829 1
a829 1
     &             IFORM,'INPUT',.FALSE.,IRTFLG)
d863 1
a863 1
     &             IFORM,'OUTPUT',.FALSE.,IRTFLG)
d877 1
a877 1
     &             IFORM1,'INPUT1',.FALSE.,IRTFLG)
d897 1
a897 1
     &             IFORM1,'INPUT',.FALSE.,IRTFLG)
d910 1
a910 1
     &             IFORM1,'OUTPUT',.TRUE.,IRTFLG)
d926 1
a926 1
     &             IFORM,'MASK REFERENCE',.FALSE.,IRTFLG)
d936 1
a936 1
     &             IFORM,'IMAGE (OVERWRITTEN!)',.TRUE.,IRTFLG)
d954 1
a954 1
     &             IFORM,'OUTPUT',.TRUE.,IRTFLG)
d970 1
a970 1
     &             IFORM1,'INPUT',.FALSE.,IRTFLG)
d978 1
a978 1
     &             IFORM1,'OUTPUT',.TRUE.,IRTFLG)
d1022 1
a1022 1
     &             IFORM1,'IMAGE TO BE THRESHOLDED',.FALSE.,IRTFLG)
d1030 1
a1030 1
     &             IFORM1,'OUTPUT',.TRUE.,IRTFLG)
@


1.8
log
@ad, su, mu had uneeded code after first file opened
@
text
@d626 1
a626 1
C	OPEN FIRST INPUT FILE
d628 1
a628 1
     &             IFORM,'INPUT1',.FALSE.,IRTFLG)
a629 4
	IF (NSAM1 .GT. MAXDIM) THEN
          IER = 9
          GOTO 9900
        END IF
d631 6
a636 14
C	OPEN THE OUTPUT FILE
        CALL FILERD(FILNAM,NLETO,NULL,'OUTPUT',IRTFLG)
        IF (IRTFLG .EQ. -1) GOTO 9000
        CALL RDPRMI(NSAM2,NROW2,NLOOP,ILOOP,'ENTER DIMS NSAM,NROW')
        NSLICE2 = 1
        IF (IFORM .EQ. 3 .AND. NSLICE1 .NE. 1)
     &      CALL RDPRMI(NSLICE2,NDUM,NLOOP,ILOOP,'NSLICE')
        IF (NROW2 .EQ. 0)
     &      NROW2 = FLOAT(NSAM2) / FLOAT(NSAM1) * FLOAT(NROW1)
        CALL OPENF(FILNAM,LUN2,NSAM2,NROW2,'UNKNOWN',NF,NSLICE2)
        IF (NF .EQ. 1) THEN
          IER = 4
          GOTO 9900
        END IF
d641 7
a647 6
        IF (FCHAR(4:4) .EQ. '7') THEN
           WRITE(NOUT,*) '*** WIND72 NO LONGER SUPPORTED'
        ELSE
           CALL WINDOW(LUN1,LUN2, NSAM1,NROW1,NSLICE1,
     &                 NSAMW,NROWW,NSLICEW, NSAM2,NROW2,NSLICE2)
        ENDIF
@


1.7
log
@added copyshort
@
text
@d27 2
a39 1
	LOGICAL  FIRST
a53 1
	FIRST=.TRUE.
d69 2
a70 2
1	CALL OPFIL(.TRUE.,FILNAM,LUN1,'O',NSAM,NROW,NSLICE,
     &     IFORM,'INPUT (OVERWRITTEN WITH SUM!)',.TRUE.,IRTFLG)
a71 19
	IF(FIRST)  THEN
	IFORM1=IFORM
	NSAM1=NSAM
	NROW1=NROW
	NSLICE1=NSLICE
	  IF (NSAM1 .GT. MAXDIM) THEN
          IER = 9
          GOTO 9900
          ENDIF
	FIRST=.FALSE.
	ELSE
	IF (NSAM1.NE.NSAM.OR.NROW1.NE.NROW.OR.NSLICE1.NE.NSLICE) THEN
		IER = 1
		GOTO 9900
	ELSEIF(IFORM.NE.IFORM1)  THEN
		IER=40
		GOTO 9900
        ENDIF
	ENDIF
d75 1
a75 1
     &             IFORM,'ADDED',.TRUE.,IRTFLG)
d78 5
a82 5
		IER = 1
		GOTO 9900
	ELSEIF(IFORM.NE.IFORM1)  THEN
		IER=40
		GOTO 9900
d352 2
a353 2
6	CALL OPFIL(.TRUE.,FILNAM,LUN1,'O',NSAM,NROW,NSLICE,
     &         IFORM,'INPUT (OVERWRITTEN WITH RESULT!)',.TRUE.,IRTFLG)
a354 19
	IF(FIRST)  THEN
	IFORM1=IFORM
	NSAM1=NSAM
	NROW1=NROW
	NSLICE1=NSLICE
	  IF (NSAM1 .GT. MAXDIM) THEN
          IER = 9
          GOTO 9900
          ENDIF
	FIRST=.FALSE.
	ELSE
	IF (NSAM1.NE.NSAM.OR.NROW1.NE.NROW.OR.NSLICE1.NE.NSLICE) THEN
		IER = 1
		GOTO 9900
	ELSEIF(IFORM.NE.IFORM1)  THEN
		IER=40
		GOTO 9900
        ENDIF
	ENDIF
d358 1
a358 1
     &             IFORM,'DIVISOR',.TRUE.,IRTFLG)
d361 1
a361 1
     &             IFORM,'MULTIPLIER',.TRUE.,IRTFLG)
d365 5
a369 5
		IER = 1
		GOTO 9900
	ELSEIF(IFORM.NE.IFORM1)  THEN
		IER=40
		GOTO 9900
d599 2
a600 2
11 	CALL OPFIL(.TRUE.,FILNAM,LUN1,'O',NSAM,NROW,NSLICE,
     &       IFORM,'INPUT (OVERWITTEN WITH RESULT!)',.TRUE.,IRTFLG)
a601 19
	IF(FIRST)  THEN
	IFORM1=IFORM
	NSAM1=NSAM
	NROW1=NROW
	NSLICE1=NSLICE
	  IF (NSAM1 .GT. MAXDIM) THEN
          IER = 9
          GOTO 9900
          ENDIF
	FIRST=.FALSE.
	ELSE
	IF (NSAM1.NE.NSAM.OR.NROW1.NE.NROW.OR.NSLICE1.NE.NSLICE) THEN
		IER = 1
		GOTO 9900
	ELSEIF(IFORM.NE.IFORM1)  THEN
		IER=40
		GOTO 9900
        ENDIF
	ENDIF
d605 1
a605 1
     &             IFORM,'NEXT INPUT',.TRUE.,IRTFLG)
d608 5
a612 5
		IER = 1
		GOTO 9900
	ELSEIF(IFORM.NE.IFORM1)  THEN
		IER=40
		GOTO 9900
d958 1
@


1.6
log
@comparison of dimensions corrected
@
text
@d148 1
a148 2

          WRITE(NOUT,*)'**** EIKONIX SUBROUTINES NOT LINKED'
a150 12
C** 301   CALL CHKINPQ('SCN,SC,SCA$',FCHAR(4:),LCALL)
C**       GOTO (9000,302,303,304),LCALL
C** 302   CONTINUE
C**       CALL EIKNORM(LUNID)
C**       GOTO 9000
C**303    CONTINUE
C**       CALL EIKSCAN(LUNID)
C**       GOTO 9000
C**304      CONTINUE
C**       CALL EIKADJ(LUNID)
C**       GOTO 9000

d159 5
@


1.5
log
@muw removed
@
text
@d379 1
a379 1
6	CALL OPFIL(.TRUE.,FILNAM,LUN1,'O',NSAM1,NROW1,NSLICE1,
d645 1
a645 1
11 	CALL OPFIL(.TRUE.,FILNAM,LUN1,'O',NSAM1,NROW1,NSLICE1,
@


1.4
log
@logic around ADD corrected
@
text
@a377 1
C	MU W     MULTIPLY FIRST COMPLEX FILE BY THE SECOND IN WIENER SENSE.
@


1.3
log
@mu o  restored
@
text
@d38 1
d53 1
a67 1
C	AD M      ADD IMAGES USING MULTIPLIERS                    
d69 1
a69 1
1	CALL OPFIL(.TRUE.,FILNAM,LUN1,'O',NSAM1,NROW1,NSLICE1,
d72 6
a77 1
	IF (NSAM1 .GT. MAXDIM) THEN
d80 11
a90 1
        END IF
d96 6
a101 3
	IF (NSAM1 .NE. NSAM2 .OR. NROW1 .NE. NROW2) THEN
	  IER = 1
	  GOTO 9900
d383 6
a388 1
	IF (NSAM1 .GT. MAXDIM) THEN
d391 9
d401 1
d411 7
a417 7
        IF (NSAM2 .GT. MAXDIM) THEN
	  IER = 3
	  GOTO 9900
        ELSEIF (NSAM1 .NE. NSAM2 .OR. NROW1 .NE. NROW2) THEN
	  IER = 1
          GOTO 9900
	ENDIF
d649 6
a654 1
	IF (NSAM1 .GT. MAXDIM) THEN
d657 9
d667 1
d673 7
a679 7
	IF (NSAM2 .GT. MAXDIM) THEN
	  IER = 3
	  GOTO 9900
        ELSEIF (NSAM1 .NE. NSAM2 .OR. NROW1 .NE. NROW2) THEN
	  IER = 1
	  GOTO 9900
	ENDIF
a1114 1
        RETURN
@


1.2
log
@logic around ADD corrected
@
text
@d358 1
d388 1
a388 1
               SIGN = -3
d391 1
a391 1
               SIGN = -2
d397 3
@


1.1
log
@Initial revision
@
text
@d80 1
a80 4
	IF (IFORM .LT. 0 .AND. IFORM .NE. -9) THEN
          IER = 2
          GOTO 9900
        ELSEIF (NSAM1 .NE. NSAM2 .OR. NROW1 .NE. NROW2) THEN
d599 2
a600 2

        CALL ADD(LUN1,LUN2,NSAM1,NROW1,NSLICE1,+3.0)
d620 1
a620 4
	IF (IFORM .LT. 0. AND. IFORM.NE.-9) THEN
	  IER = 2
	  GOTO 9900
        ELSEIF (NSAM2 .GT. MAXDIM) THEN
d928 2
a929 1
        CALL ADD(LUN1,LUN2,NSAM1,NROW1,NSLICE1,+4.0)
@
