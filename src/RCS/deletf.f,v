head	1.37;
access;
symbols
	pre_mrcs:1.35
	healthdept_2018:1.35
	pre_getangas:1.31
	GPL2010:1.30
	pre_GPL2010:1.29
	pre_var_equation:1.29
	pre_fftwrings:1.29
	pre_opfiles:1.29
	src:1.29
	best-code:1.29
	x-named-regs:1.29
	x:1.29
	v13-00:1.29
	pre_GPL:1.27
	prec_CA:1.24
	noindx:1.21
	Bproc:1.15
	oct21:1.14
	last77:1.13;
locks; strict;
comment	@c @;


1.37
date	2020.02.24.16.59.28;	author leith;	state Exp;
branches;
next	1.36;

1.36
date	2019.11.04.17.35.58;	author leith;	state Exp;
branches;
next	1.35;

1.35
date	2018.10.03.14.34.04;	author leith;	state Exp;
branches;
next	1.34;

1.34
date	2013.09.17.14.18.24;	author leith;	state Exp;
branches;
next	1.33;

1.33
date	2012.03.15.14.34.07;	author leith;	state Exp;
branches;
next	1.32;

1.32
date	2011.03.14.14.21.57;	author leith;	state Exp;
branches;
next	1.31;

1.31
date	2010.10.21.17.48.19;	author leith;	state Exp;
branches;
next	1.30;

1.30
date	2010.06.24.13.25.24;	author leith;	state Exp;
branches;
next	1.29;

1.29
date	2005.10.17.20.35.59;	author leith;	state Exp;
branches;
next	1.28;

1.28
date	2005.10.17.18.26.28;	author leith;	state Exp;
branches;
next	1.27;

1.27
date	2005.07.08.18.50.04;	author leith;	state Exp;
branches;
next	1.26;

1.26
date	2003.11.10.16.32.11;	author leith;	state Exp;
branches;
next	1.25;

1.25
date	2003.10.30.19.47.11;	author leith;	state Exp;
branches;
next	1.24;

1.24
date	2003.02.20.19.39.43;	author leith;	state Exp;
branches;
next	1.23;

1.23
date	2003.02.04.14.44.19;	author leith;	state Exp;
branches;
next	1.22;

1.22
date	2003.01.23.15.51.38;	author leith;	state Exp;
branches;
next	1.21;

1.21
date	2002.08.13.20.25.47;	author leith;	state Exp;
branches;
next	1.20;

1.20
date	2002.08.07.18.35.42;	author leith;	state Exp;
branches;
next	1.19;

1.19
date	2002.08.07.18.34.43;	author leith;	state Exp;
branches;
next	1.18;

1.18
date	2002.03.07.15.29.32;	author leith;	state Exp;
branches;
next	1.17;

1.17
date	2001.04.18.18.14.55;	author leith;	state Exp;
branches;
next	1.16;

1.16
date	2001.03.02.16.00.25;	author leith;	state Exp;
branches;
next	1.15;

1.15
date	2000.04.18.20.16.32;	author leith;	state Exp;
branches;
next	1.14;

1.14
date	99.04.14.17.56.28;	author leith;	state Exp;
branches;
next	1.13;

1.13
date	98.01.20.21.28.41;	author leith;	state Exp;
branches;
next	1.12;

1.12
date	97.12.12.17.39.51;	author leith;	state Exp;
branches;
next	1.11;

1.11
date	97.10.07.19.28.10;	author leith;	state Exp;
branches;
next	1.10;

1.10
date	97.09.17.13.11.11;	author leith;	state Exp;
branches;
next	1.9;

1.9
date	97.03.11.16.36.56;	author leith;	state Exp;
branches;
next	1.8;

1.8
date	97.01.23.20.07.36;	author leith;	state Exp;
branches;
next	1.7;

1.7
date	96.12.19.18.55.34;	author leith;	state Exp;
branches;
next	1.6;

1.6
date	96.12.19.18.50.16;	author leith;	state Exp;
branches;
next	1.5;

1.5
date	96.12.18.17.28.32;	author leith;	state Exp;
branches;
next	1.4;

1.4
date	96.12.17.20.12.57;	author leith;	state Exp;
branches;
next	1.3;

1.3
date	96.09.26.16.15.40;	author leith;	state Exp;
branches;
next	1.2;

1.2
date	95.08.16.16.42.51;	author leith;	state Exp;
branches;
next	1.1;

1.1
date	94.05.13.12.48.13;	author leith;	state Exp;
branches;
next	;


desc
@copied from USER2:[PSIDER.CMSREF] on 11 May 1994
@


1.37
log
@removed stack operation
@
text
@
C++*********************************************************************
C
C  DELETF.F        REMOVED & ALTERED FROM UTIL1    DEC 88 ArDean Leith
C                  VERBOSE                         MAR 02 ArDean Leith
C                  SGI LEAK ON INTERNAL FMT        AUG 02 ArDean Leith
C                  INDEXED STACK                   JAN 03 ArDean Leith
C                  OPFILEC                         FEB 03 ArDean Leith
C                  SPIREOUT                        JUL 05 ArDean Leith
C                  OPENINLN KIND                   OCT 10 ArDean Leith
C                  MPI HEADER NEEDED               MAR 11 ArDean Leith
C                  STACK@@ ACCEPTED                 MAR 12 ArDean Leith
C                  FORMATTING                      SEP 13 ArDean Leith
C                  MRC SUPPORT                     SEP 19 ArDean Leith
C                  REMOVED GETOLDSTACK             FEB 20 ArDean Leith
C **********************************************************************
C=*                                                                    *
C=* Author: ArDean Leith                                               *                                                            *
C=* This file is part of:   SPIDER - Modular Image Processing System.  *
C=* SPIDER System Authors:  Joachim Frank & ArDean Leith               *
C=* Copyright 1985-2020  Health Research Inc.,                         *
C=* Riverview Center, 150 Broadway, Suite 560, Menands, NY 12204.      *
C=* Email: spider@@health.ny.gov                                        *
C=*                                                                    *
C=* SPIDER is free software; you can redistribute it and/or            *
C=* modify it under the terms of the GNU General Public License as     *
C=* published by the Free Software Foundation; either version 2 of the *
C=* License, or (at your option) any later version.                    *
C=*                                                                    *
C=* SPIDER is distributed in the hope that it will be useful,          *
C=* but WITHOUT ANY WARRANTY; without even the implied warranty of     *
C=* merchantability or fitness for a particular purpose.  See the GNU  *
C=* General Public License for more details.                           *
C=* You should have received a copy of the GNU General Public License  *
C=* along with this program. If not, see <http://www.gnu.org/licenses> *
C=*                                                                    *
C **********************************************************************
C
C    DELETF(FILNAM,LUN)
C
C    PARAMETERS:     FILNAM    CHAR. VARIABLE FOR FILENAME (EMPTY)
C                    LUN       UNIT FOR FILE OPENING
C
C    PURPOSE:        DELETE SPIDER OR MRC FILE(S)
C
C23456789 123456789 123456789 123456789 123456789 123456789 123456789 12
C **********************************************************************

        SUBROUTINE DELETF(FILNAM,LUN)

        IMPLICIT  NONE
        INCLUDE 'CMBLOCK.INC'
        INCLUDE 'CMLIMIT.INC'

        CHARACTER(LEN=*)             :: FILNAM
        INTEGER                      :: LUN

        CHARACTER(LEN=MAXNAM)        :: FILN
        CHARACTER(LEN=MAXNAM+20)     :: MESG
        CHARACTER(LEN=1)             :: NULL = CHAR(0)

        LOGICAL                      :: GOT_MRC_STK_IMAGE,IS_MRC
        LOGICAL                      :: GOT_SPI_STK_IMAGE,ISDIGI
        INTEGER                      :: ICOMM,MYPID,MPIERR,NLET,IRTFLG
        INTEGER                      :: IFILE,IDIG,IFIRST,NLETA,NOFIND
        INTEGER                      :: LOCAT,MAXIM,NX,NY,NZ,LASTFI,IGO
        INTEGER                      :: IMGNUM,MAXIMNEW,NUMBUF,IER,NNN
        INTEGER                      :: IDUM

        INTEGER, PARAMETER           :: I_8 = SELECTED_INT_KIND(12)
        INTEGER(KIND=I_8), PARAMETER :: ZERO_8 = 0

        LOGICAL                      :: ISMRCFILE    ! FUNCTION


        CALL SET_MPI(ICOMM,MYPID,MPIERR) ! SETS ICOMM AND MYPID 

        IF (FCHAR(4:4) == 'A') THEN      
C          OPERATION: 'FI A' WORKS ON WHOLE SERIES

           IF (MYPID <= 0) WRITE(NOUT,903) 
903        FORMAT(/,' WARNING, YOU ARE DELETING WHOLE FILE SERIES!'/)

           CALL FILERD(FILNAM,NLET,NULL,'FIRST',IRTFLG)
           IF (IRTFLG .NE. 0 .OR. FILNAM(1:1) == '*') RETURN

           IF (ISMRCFILE(FILNAM)) THEN
             CALL ERRT(101,'OPERATION NOT SUPPORTED FOR MRC FILES',IDUM)
             RETURN
           ENDIF

C          MULTIPLE FILE DELETION
           CALL GETFILENUM(FILNAM(1:NLET),IFILE,IDIG,.FALSE.,IRTFLG)

C          IDIG IS NUMBER OF CONSECUTIVE DIGITS AT END OF THE FIRST FILE NAME
           LASTFI = 10**IDIG - 1
           IGO    = NLET - IDIG + 1

        ELSE
C          SINGLE FILE DELETION WANTED

C          GET FILE NAME FOR DELETION
           CALL FILERD(FILNAM,NLET,NULL,'DELETE',IRTFLG)
           IF (IRTFLG .NE. 0 .OR. FILNAM(1:1) == '*') RETURN

           IFILE  = 1
           LASTFI = 1
        ENDIF

        IS_MRC =  (ISMRCFILE(FILNAM))
        IF (IS_MRC) THEN
C          MRC FILE DELETION
           FILN   = FILNAM (1:NLET)
           NLETA  = NLET
        ELSE

C          ADD EXTENSION TO FILNAM --> FILN
           FILN = FILNAM(1:NLET) // '.' // DATEXC(1:3) 
           NLETA  = NLET + 4
        ENDIF
          
        IFIRST = IFILE

	NOFIND = 0

20      LOCAT  = INDEX(FILNAM,'@@')    ! STACK INDICATOR 

C       SEE IF STACKED SPIDER IMAGE     
        GOT_MRC_STK_IMAGE = (IS_MRC .AND. 
     &                       LOCAT > 1 .AND. 
     &                       ISDIGI(FILNAM(LOCAT-1:LOCAT-1)))

C       SEE IF STACKED SPIDER IMAGE     
        GOT_SPI_STK_IMAGE = (.NOT. IS_MRC .AND. LOCAT > 0 .AND. 
     &                       LOCAT < NLET .AND. 
     &                       ISDIGI(FILNAM(LOCAT+1:LOCAT+1)))

        IF (GOT_MRC_STK_IMAGE) THEN
C          MRC STACKED IMAGE
           CALL ERRT(101,'CAN NOT DELETE AN IMAGE FROM MRC STACK',IDUM)
           IRTFLG = 1
           RETURN
        ENDIF

        

        IF (GOT_SPI_STK_IMAGE) THEN
C          DELETE IMAGE FROM IMAGE STACK
           MAXIM = 0
           CALL OPFILEC(0,.FALSE.,FILNAM,LUN,'O',IFORM,NX,NY,NZ,
     &                MAXIM,' ',.TRUE.,IRTFLG)
           IF (IRTFLG .NE. 0)  RETURN

C          UPDATE IMAGE IN-USE VARIABLE
           CALL LUNGETINUSE(LUN,IMGNUM,IRTFLG)
           CALL LUNSETINUSE(LUN,0,IRTFLG)
           CALL LUNWRTHED(LUN,NX,IMGNUM,IRTFLG)

C          FIND MAXIM IN OVERALL HEADER
           CALL LUNGETMAXIM(LUN,MAXIM,IRTFLG)
           !write(3,*) '  In deletf; imgnum,maxim:',imgnum,maxim


           IF (IMGNUM == MAXIM) THEN
C             DELETED IMAGE IS MAXIM, MUST FIND NEW MAXIM
              CALL FINDMAXIM(LUN,NX,MAXIM,MAXIMNEW,IRTFLG)

C             UPDATE MAXIM IN OVERALL HEADER
              CALL LUNSAVMAXIM(LUN,NX,MAXIMNEW,IRTFLG)
           ENDIF

           IF (VERBOSE .AND. MYPID <= 0) 
     &         WRITE(NOUT,*)'  DELETED STACKED IMAGE: ', FILNAM(1:NLET)

           IF (MYPID <= 0 .AND. USE_SPIRE) THEN
              MESG = '.DELETE FILE: ' // FILNAM(1:NLET)  
              CALL SPIREOUT(MESG,IRTFLG)
           ENDIF

           RETURN

        ELSEIF (FILNAM(1:1) == '_') THEN
C          INLINED BUFFER DELETE WANTED, GET BUFFER NUMBER
           CALL INLNBUF(FILNAM,NLET,NUMBUF,IRTFLG)

C          FREE UP THE INLINE BUFFER (DEALLOCATES IF NECESSARY)
           CALL OPENINLN(LUN,NUMBUF,.TRUE.,0,ZERO_8,.FALSE.,IRTFLG)

           IF (MYPID <= 0 .AND. VERBOSE .AND. IRTFLG == 0) THEN
              WRITE(NOUT,*) ' DELETED INLINE FILE: ',FILNAM(1:NLET)
           ENDIF
           RETURN

        ELSEIF (NLET > 1 .AND. LOCAT == NLET) THEN        
C          WHOLE SPIDER STACK DELETE WANTED, GET RID OF @@
           FILN  = FILNAM(1:NLET-1) // '.' // DATEXC(1:3) // NULL
           NLETA = NLET + 3

           IF (MYPID <= 0) THEN
              OPEN(LUN,FILE=FILN(1:NLETA),STATUS='OLD',IOSTAT=IER)
              IF (IER == 0) CLOSE(LUN,STATUS='DELETE', IOSTAT=IER)
           ENDIF

           CALL BCAST_MPI('DELETF','IER',IER,1,'I', ICOMM)

        ELSE
C          DESTROY SIMPLE FILE  
        
           IF (MYPID <= 0) THEN
              OPEN(LUN,FILE=FILN(1:NLETA),STATUS='OLD',IOSTAT=IER)
              IF (IER == 0) CLOSE(LUN,STATUS='DELETE', IOSTAT=IER)
           ENDIF

           CALL BCAST_MPI('DELETF','IER',IER,1,'I', ICOMM)

        ENDIF

        IF (IER == 0) THEN
           IF (MYPID <= 0) THEN 
              IF (VERBOSE) WRITE(NOUT,*)' DELETED:      ',FILN(1:NLETA)
              IF (USE_SPIRE) THEN
                 MESG = '.DELETE FILE: ' // FILN(1:NLETA)  
                 CALL SPIREOUT(MESG,IRTFLG)
              ENDIF
           ENDIF
           NOFIND = 0
        
        ELSE
           IF (MYPID <= 0) THEN
              WRITE(NOUT,*) ' NO SUCH FILE: ',FILN(1:NLETA)
           ENDIF

           IF (IFILE == IFIRST) NOFIND = 10
           NOFIND = NOFIND + 1
        ENDIF

        IF (IFILE < LASTFI .AND. NOFIND < 10) THEN
C          DELETE NEXT FILE IN SERIES

C          CREATE NEXT FILE NAME
           IFILE = IFILE + 1
           CALL INTTOCHAR(IFILE,FILN(IGO:NLET),NNN,IDIG)
           GOTO 20
        ENDIF

999     IF (VERBOSE .AND. MYPID <= 0) WRITE(NOUT,*) ' '

        END


C        -------------------- FINDMAXIM ----------------------------

         SUBROUTINE FINDMAXIM(LUN,NX,MAXIMOLD,MAXIMNEW,IRTFLG)

         IMPLICIT NONE

         INTEGER   :: LUN,NX,MAXIMOLD,MAXIMNEW,IRTFLG

         INTEGER   :: NDUM,IMGNUM,IMUSED
         LOGICAL   :: IS_MRC

C        PURPOSE:  FIND HIGHEST NUMBER IMAGE STILL IN THIS STACK

C        SET ERROR RETURN
         IRTFLG = 1

C        DETERMINE IF MRC OR SPIDER 
         CALL LUNGETIS_MRC(LUN,IS_MRC,IRTFLG)

         IF (IS_MRC) THEN
C          MRC STACK
           CALL ERRT(101,'THIS SUBROUTINE DOES NOT ACCEPT MRC',NDUM)
           IRTFLG = 1
           RETURN
         ENDIF

C        START WITH MAXIMOLD IMAGE
         IMGNUM = MAXIMOLD - 1

         DO WHILE (IMGNUM > 0)
C           GET NEXT IMAGE FROM STACK

C           GET SPECIFIED IMAGE HEADER FROM STACK FILE LOCATION
            CALL LUNREDHED(LUN,NX,0,     .FALSE.,IRTFLG)
            CALL LUNREDHED(LUN,NX,IMGNUM,.FALSE.,IRTFLG)
            !write(3,*) '  In findmax 1, imgnum,irtflg:',imgnum,irtflg


            IF (IRTFLG .NE. 0) EXIT  
 
C           NEED IMUSED FROM THIS STACKED IMAGE
            CALL LUNGETINUSE(LUN,IMUSED,IRTFLG)
            !write(3,*) '  In findmax 2, imgnum,irtflg:',imgnum,irtflg

            IF (IRTFLG == 0 .AND. IMUSED > 0 ) EXIT  !FOUND NEW MAXIM

C           TRY NEXT IMAGE DOWN
            IMGNUM = IMGNUM - 1
         ENDDO

         MAXIMNEW = IMGNUM
         IRTFLG   = 0

         END
@


1.36
log
@mrc_support
@
text
@d15 1
d18 1
d21 1
a21 1
C=* Copyright 1985-2013  Health Research Inc.,                         *
d62 2
a63 1
        LOGICAL                      :: GOT_SPI_STK_IMAGE,ISDIGI,IS_MRC
d129 5
d138 9
d161 2
d255 8
a262 1
C        FIND HIGHEST NUMBER IMAGE STILL IN THIS STACK
d267 9
a275 2
C        MUST SET ISBARE FOR GETOLDSTACK TO WORK
         CALL LUNSETISBARE(LUN,.TRUE.,IRTFLG)
a281 3
            CALL GETOLDSTACK(LUN,NX,IMGNUM,
     &                      .FALSE.,.FALSE.,.FALSE.,IRTFLGT)
            IF (IRTFLGT > 0) GOTO 999
d283 13
a295 1
            IF (IRTFLGT == 0) EXIT  !FOUND NEW MAXIM
d301 1
a301 1
100      MAXIMNEW = IMGNUM
a302 4

999      CONTINUE
C        MUST SET ISBARE FOR GETOLDSTACK TO WORK
         CALL LUNSETISBARE(LUN,.FALSE.,IRTFLG)
@


1.35
log
@email_health_dept
@
text
@d4 11
a14 10
C    DELETF.F       REMOVED & ALTERED FROM UTIL1    DEC 88 ArDean Leith
C                   VERBOSE                         MAR 02 ArDean Leith
C                   SGI LEAK ON INTERNAL FMT        AUG 02 ArDean Leith
C                   INDEXED STACK                   JAN 03 ARDEAN LEITH
C                   OPFILEC                         FEB 03 ARDEAN LEITH
C                   SPIREOUT                        JUL 05 ARDEAN LEITH
C                   OPENINLN KIND                   OCT 10 ARDEAN LEITH
C                   MPI HEADER NEEDED               MAR 11 ARDEAN LEITH
C                   STACK@@ ACCEPTED                 MAR 12 ARDEAN LEITH
C                   FORMATTING                      SEP 13 ARDEAN LEITH
d42 1
a42 1
C    PURPOSE:        DELETE SPIDER FILE(S)
d44 1
d49 1
d54 2
d58 1
a58 1
        CHARACTER(LEN=1)             :: NULL
d60 6
a65 1
        LOGICAL                      :: GOT_IMAGE,ISDIGI
d70 3
a72 3
#ifdef USE_MPI
        include 'mpif.h'
#endif
d75 2
a76 1
        NULL = CHAR(0)
a77 1
200     IF (FCHAR(4:4) == 'A') THEN
d80 1
d82 6
a87 1
           IF (IRTFLG .NE. 0 .OR. FILNAM(1:1) .EQ. '*') RETURN
d97 3
d102 1
a102 1
C          SINGLE FILE DELETION WANTED
d107 12
d121 1
a121 2
        FILN   = FILNAM(1:NLET) // '.' // DATEXC(1:3) // NULL
        NLETA  = NLET + 4
d123 1
a123 1
	NOFIND = 0
d125 4
a128 4
20      LOCAT     = INDEX(FILNAM,'@@')      
        GOT_IMAGE = (LOCAT .GT. 0 .AND. 
     &               LOCAT .LT. NLET .AND. 
     &               ISDIGI(FILNAM(LOCAT+1:LOCAT+1)))
d130 2
a131 2
        IF (LOCAT > 0 .AND. GOT_IMAGE) THEN
C          DELETE IMAGE IN AN IMAGE STACK
d133 1
a133 1
           CALL OPFILEC(0,.FALSE.,FILNAM,LUN,'O',IFORM,NSAM,NROW,NSLICE,
d140 1
a140 1
           CALL LUNWRTHED(LUN,NSAM,IMGNUM,IRTFLG)
d145 1
a145 1
           IF (IMGNUM .EQ. MAXIM) THEN
d147 1
a147 1
              CALL FINDMAXIM(LUN,NSAM,MAXIM,MAXIMNEW,IRTFLG)
d150 1
a150 1
              CALL LUNSAVMAXIM(LUN,NSAM,MAXIMNEW,IRTFLG)
d153 1
a153 1
           IF (VERBOSE .AND. MYPID .LE. 0) 
d156 1
a156 1
           IF (MYPID .LE. 0 .AND. USE_SPIRE) THEN
d175 2
a176 2
        ELSEIF(LOCAT == NLET .AND. NLET > 1) THEN        
C          WHOLE STACK DELETE WANTED, GET RID OF @@
d182 1
a182 1
              IF (IER == 0) CLOSE(LUN,STATUS='DELETE',IOSTAT=IER)
d184 2
a185 3
#ifdef USE_MPI
           CALL MPI_BCAST(IER, 1, MPI_INTEGER, 0, ICOMM, IERR)
#endif
d192 1
a192 1
              IF (IER == 0) CLOSE(LUN,STATUS='DELETE',IOSTAT=IER)
d195 2
a196 3
#ifdef USE_MPI
           CALL MPI_BCAST(IER, 1, MPI_INTEGER, 0, ICOMM, IERR)
#endif
d214 1
a214 1
           IF (IFILE .EQ. IFIRST) NOFIND = 10
d232 1
d234 1
a234 2

         SUBROUTINE FINDMAXIM(LUN,NSAM,MAXIMOLD,MAXIMNEW,IRTFLG)
d247 1
a247 1
         DO WHILE (IMGNUM .GT. 0)
d249 1
a249 1
            CALL GETOLDSTACK(LUN,NSAM,IMGNUM,
d251 1
a251 1
            IF (IRTFLGT .GT. 0) GOTO 999
d253 1
a253 1
            IF (IRTFLGT .EQ. 0) EXIT  !FOUND NEW MAXIM
d265 1
a265 1
         RETURN
@


1.34
log
@formatting
@
text
@d20 1
a20 1
C=* Email: spider@@wadsworth.org                                        *
@


1.33
log
@for stack stk@@
@
text
@d13 1
d18 1
a18 1
C=* Copyright 1985-2012  Health Research Inc.,                         *
d173 1
a173 1
              IF (VERBOSE) WRITE(NOUT,*) ' DELETED: ',FILN(1:NLETA)
@


1.32
log
@MPI HEADER NEEDED
@
text
@d12 1
d17 1
a17 1
C=* Copyright 1985-2011  Health Research Inc.,                         *
d66 2
a67 2
200     IF (FCHAR(4:4) .EQ. 'A') THEN
           IF (MYPID .LE. 0) WRITE(NOUT,903) 
d81 1
a81 1
           IF (IRTFLG .NE. 0 .OR. FILNAM(1:1) .EQ. '*') RETURN
d89 2
a90 2
        FILN  = FILNAM(1:NLET) // '.' // DATEXC(1:3) // NULL
        NLETA = NLET + 4
d94 1
a94 1
20      LOCAT = INDEX(FILNAM,'@@')      
d99 1
a99 1
        IF (LOCAT .GT. 0 .AND. GOT_IMAGE) THEN
d132 1
a132 1
        ELSEIF (FILNAM(1:1) .EQ. '_') THEN
d139 1
a139 1
           IF (MYPID .LE. 0 .AND. VERBOSE .AND. IRTFLG .EQ. 0) THEN
d144 13
d160 1
a160 1
           IF (MYPID .LE. 0) THEN
d162 1
a162 1
              IF (IER .EQ. 0) CLOSE(LUN,STATUS='DELETE',IOSTAT=IER)
d170 2
a171 2
        IF (IER .EQ. 0) THEN
           IF (MYPID .LE. 0) THEN 
d181 1
a181 1
           IF (MYPID .LE. 0) THEN
d189 1
a189 1
        IF (IFILE .LT. LASTFI .AND. NOFIND .LT. 10) THEN
d191 1
d198 1
a198 1
999     IF (VERBOSE .AND. MYPID .LE. 0) WRITE(NOUT,*) ' '
@


1.31
log
@OPENINLN KIND I*8
@
text
@d11 1
d16 1
a16 1
C=* Copyright 1985-2010  Health Research Inc.,                         *
d58 3
@


1.30
log
@GPL_2010
@
text
@d4 7
a10 6
C    DELETF.F       REMOVED & ALTERED FROM UTIL1 DEC 88 ArDean Leith
C                   VERBOSE                      MAR 02 ArDean Leith
C                   SGI LEAK ON INTERNAL FMT     AUB 02 ArDean Leith
C                   INDEXED STACK                JAN 03 ARDEAN LEITH
C                   OPFILEC                      FEB 03 ARDEAN LEITH
C                   SPIREOUT                     JUL 05 ARDEAN LEITH
d47 11
a57 14
        CHARACTER(LEN=*)         :: FILNAM
        CHARACTER(LEN=MAXNAM)    :: FILN
        CHARACTER(LEN=MAXNAM+20) :: MESG
        CHARACTER(LEN=1)         :: NULL

        LOGICAL                  :: GOT_IMAGE,ISDIGI

#ifdef USE_MPI                     
        include 'mpif.h'           
        ICOMM = MPI_COMM_WORLD
        CALL MPI_COMM_RANK(ICOMM, MYPID, IERR)  
#else
        MYPID = -1
#endif
d62 1
a62 1
           WRITE(NOUT,903) 
d132 1
a132 1
           CALL OPENINLN(LUN,NUMBUF,.TRUE.,0,0,.FALSE.,IRTFLG)
d134 2
a135 3
           IF (MYPID .LE. 0) THEN
              IF (VERBOSE .AND. IRTFLG .EQ. 0)
     &           WRITE(NOUT,*) ' DELETED INLINE FILE: ',FILNAM(1:NLET)
d205 1
a205 4
            IF (IRTFLGT .EQ. 0) THEN
C              FOUND NEW MAXIM
               GOTO 100
            ENDIF
@


1.29
log
@GPL License fixed
@
text
@a10 2
C=* FROM: SPIDER - MODULAR IMAGE PROCESSING SYSTEM.   AUTHOR: J.FRANK  *
C=* Copyright (C) 1985-2005  Health Research Inc.                      *
d12 5
a16 2
C=* HEALTH RESEARCH INCORPORATED (HRI),                                *   
C=* ONE UNIVERSITY PLACE, RENSSELAER, NY 12144-3455.                   *
d18 1
a18 3
C=* Email:  spider@@wadsworth.org                                       *
C=*                                                                    *
C=* This program is free software; you can redistribute it and/or      *
d23 1
a23 1
C=* This program is distributed in the hope that it will be useful,    *
d25 1
a25 1
C=* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU  *
a26 1
C=*                                                                    *
d28 1
a28 3
C=* along with this program; if not, write to the                      *
C=* Free Software Foundation, Inc.,                                    *
C=* 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.      *
@


1.28
log
@HRI GPL License used
@
text
@a2 1
C++*************************************************************************
a10 1
C * SPIDER - MODULAR IMAGE PROCESSING SYSTEM.    AUTHOR: J.FRANK       *
d14 1
a14 1
C=* HEALTH RESEARCH INCORPORATED (HRI),                                *  
a33 6

C * COPYRIGHT (C)1985, 2002. HEALTH RESEARCH INCORPORATED (HRI),       *
C * ONE UNIVERSITY PLACE, RENSSELAER, NY 12144-3455.                   *
C * THE CONTENTS OF THIS DOCUMENT ARE PROPRIETARY TO HRI AND ARE NOT   *
C * TO BE DISCLOSED TO OTHERS OR USED FOR PURPOSES OTHER THAN INTENDED *
C * WITHOUT WRITTEN APPROVAL OF HRI.                                   *
a43 1
C *************************************************************************
@


1.27
log
@spireout
@
text
@d2 1
d13 24
d51 1
@


1.26
log
@mpi changes fouled up non-mpi code
@
text
@d4 1
a4 1
C    DELETF.FOR     REMOVED & ALTERED FROM UTIL1 DEC 88 ArDean Leith
d9 1
a9 1
C
d33 4
a36 5
        COMMON  BUF(1)

        CHARACTER(LEN=*)      :: FILNAM
        CHARACTER(LEN=MAXNAM) :: FILN
        CHARACTER(LEN=1)      :: NULL
d38 1
a38 1
        LOGICAL  ::      GOT_IMAGE,ISDIGI
d42 2
a43 3
        INTEGER  MYPID, COMM, IERR  
        COMM = MPI_COMM_WORLD
        CALL MPI_COMM_RANK(COMM, MYPID, IERR)  
d109 5
d138 1
a138 1
           CALL MPI_BCAST(IER, 1, MPI_INTEGER, 0, COMM, IERR)
d145 4
a152 1

@


1.25
log
@mpi
@
text
@d35 1
a35 1
        CHARACTER(LEN=*) :: FILNAM
d37 1
a37 1
        CHARACTER(LEN=1) ::   NULL
d40 1
d49 1
d107 2
a108 2
#ifdef USE_MPI
           IF (VERBOSE .AND. MYPID .EQ. 0) 
d110 1
a110 4
#else
           IF (VERBOSE) 
     &         WRITE(NOUT,*)'  DELETED STACKED IMAGE: ', FILNAM(1:NLET)
#endif
d119 2
a120 2
#ifdef USE_MPI
           IF (MYPID .EQ. 0) THEN
a123 4
#else
           IF (VERBOSE .AND. IRTFLG .EQ. 0)
     &        WRITE(NOUT,*) ' DELETED INLINE FILE: ',FILNAM(1:NLET)
#endif
d127 3
a129 3
C          DESTROY SIMPLE FILE          
#ifdef USE_MPI
           IF (MYPID .EQ. 0) THEN
d133 2
a135 2
#else
           IF (IER .EQ. 0) CLOSE(LUN,STATUS='DELETE',IOSTAT=IER)
d140 1
a140 2
#ifdef USE_MPI
           IF (MYPID .EQ. 0) THEN 
a142 3
#else
           IF (VERBOSE) WRITE(NOUT,*) ' DELETED: ',FILN(1:NLETA)
#endif
d146 2
a147 2
#ifdef USE_MPI
           IF (MYPID .EQ. 0) THEN
d150 1
a150 3
#else
           WRITE(NOUT,*) ' NO SUCH FILE: ',FILN(1:NLETA)
#endif
d162 3
a164 5
#ifdef USE_MPI
999     IF (VERBOSE .AND. MYPID .EQ. 0) WRITE(NOUT,*) ' '
#else           
999     IF (VERBOSE) WRITE(NOUT,*) ' '
#endif
@


1.24
log
@opfilec
@
text
@d40 8
a47 1

d105 4
a108 1

d111 1
d120 6
a125 1

d128 1
d133 7
a139 1
           OPEN(LUN,FILE=FILN(1:NLETA),STATUS='OLD',IOSTAT=IER)
d141 1
d145 5
d151 1
d155 5
d161 1
d173 3
a175 1
           
d177 1
@


1.23
log
@file inc. bug
@
text
@d8 1
d79 1
a79 1
           CALL OPFIL(.FALSE.,FILNAM,LUN,'O',NSAM,NROW,NSLICE,
@


1.22
log
@indexed stacks
@
text
@d17 1
a17 1
CC
d30 1
d34 3
a36 3
        CHARACTER *(*) FILNAM
        CHARACTER *81  FILN
        CHARACTER *1   NULL
d38 1
a38 1
        LOGICAL        GOT_IMAGE,ISDIGI
d65 3
d99 1
a99 1
     &         WRITE(NOUT,*) ' DELETED STACKED IMAGE: ', FILNAM(1:NLET)
a112 8
        ELSEIF (LOCAT .GT. 1) THEN
C          DELETE A WHOLE IMAGE STACK!!!!!!
           CALL FILNAMANDEXT(FILNAM(1:LOCAT-1),DATEXC(1:3),FILN,NLETA,
     &                       .FALSE.,IRTFLG)

           OPEN(LUN,FILE=FILN(1:NLETA),STATUS='OLD',IOSTAT=IER)
           IF (IER .EQ. 0) CLOSE(LUN,STATUS='DELETE',IOSTAT=IER)
   
d114 1
a114 4
C          ADD EXTENSION AND DESTROY SIMPLE FILE          
           CALL FILNAMANDEXT(FILNAM(1:NLET),DATEXC(1:3),FILN,NLETA,
     &                       .FALSE.,IRTFLG)

@


1.21
log
@getfilenum
@
text
@d7 1
d9 9
a17 10
C **************************************************************************
C *  SPIDER - MODULAR IMAGE PROCESSING SYSTEM.  AUTHOR: J.FRANK            *
C *  COPYRIGHT (C)1981,1987, WADSWORTH CENTER FOR LABORATORIES AND         *
C *  RESEARCH, NEW YORK STATE DEPARTMENT OF HEALTH, ALBANY, NY 12201.      *
C *    THE CONTENTS OF THIS DOCUMENT ARE PROPRIETARY TO THE CENTER FOR     *
C *    LABORATORIES AND RESEARCH AND ARE NOT TO BE DISCLOSED TO OTHERS OR  *
C *    USED FOR PURPOSES OTHER THAN INTENDED WITHOUT WRITTEN APPROVAL OF   *
C *    THE CENTER FOR LABORATORIES AND RESEARCH 			   *
C **************************************************************************
C
a63 3
        FILN  = FILNAM(1:NLET) // '.' // DATEXC(1:3) // NULL
        NLETA = NLET + 4

d79 1
a79 1
           CALL LUNGETIMGNUM(LUN,IMGNUM,IRTFLG)
d81 1
a81 1
           CALL LUNWRTHED(LUN,IMGNUM,IRTFLG)
d95 1
a95 1
     &         WRITE(NOUT,*) 'DELETED STACKED IMAGE: ', FILNAM(1:NLET)
d106 1
a106 1
     &        WRITE(NOUT,*) 'DELETED INLINE FILE: ',FILNAM(1:NLET)
d109 8
d118 4
a121 1
C          DESTROY SIMPLE FILE          
d127 1
a127 1
           IF (VERBOSE) WRITE(NOUT,*) 'DELETED: ',FILN(1:NLETA)
d131 1
a131 1
           WRITE(NOUT,*) 'NO SUCH FILE: ',FILN(1:NLETA)
@


1.20
log
@*** empty log message ***
@
text
@d6 1
a34 3
        CHARACTER *6   PROMPT
        CHARACTER *5   PROMPTS
        CHARACTER *8   FMT2
a38 4
        DATA FMT2   /'(I  .  )'/
        DATA PROMPT /'DELETE'/
        DATA PROMPTS/'FIRST'/

d44 1
a44 1
           CALL FILERD(FILNAM,NLET,NULL,PROMPTS,IRTFLG)
d48 1
a48 1
           IDIG = 0
d50 1
a50 11
           DO  I=NLET,1,-1
             IF (FILNAM(I:I) .LT. '0' .OR. FILNAM(I:I) .GT. '9')GOTO 11
             IDIG = IDIG + 1
           ENDDO
           GOTO 999

C          PRESERVE I INDEX FOR USE BELOW!
11         WRITE(FMT2(3:4),8000,ERR=999) IDIG
           FMT2(6:7) = FMT2(3:4)
8000       FORMAT(I2)
           READ(FILNAM(I+1:NLET),'(I9)',ERR=999) IFILE
d52 1
d55 1
a55 1
           CALL FILERD(FILNAM,NLET,NULL,PROMPT,IRTFLG)
d58 1
a58 1
           IFILE = 1
d130 1
d132 1
a132 1
           WRITE(FILN(I+1:NLET),FMT2,ERR=999) IFILE
@


1.19
log
@used '(I9)' in internal read
@
text
@d24 1
a24 1
C **************************************************************************
d64 1
a64 1
           FMT2(6:7) = FMT(3:4)
@


1.18
log
@another verbose added
@
text
@a36 1
        CHARACTER *5   FMT
a40 1
        DATA FMT    /'(I  )'/
d63 1
a63 2
11         WRITE(FMT(3:4),8000,ERR=999) IDIG
           FMT2(3:4) = FMT(3:4)
d66 1
a66 1
           READ(FILNAM(I+1:NLET),FMT,ERR=999) IFILE
@


1.17
log
@N_VERBOSE --> VERBOSE
@
text
@d4 3
a6 1
C    DELETF.FOR     REMOVED AND ALTERED CODE FROM UTIL1 DEC 88 al
d131 1
a131 1
C          DESTROY THE FILE          
d153 1
a153 1
999     WRITE(NOUT,*) ' '
@


1.16
log
@filn(1:nleta) specified in open
@
text
@d1 1
d113 1
a113 1
           IF (N_VERBOSE .EQ. 1) 
d124 1
a124 1
           IF (N_VERBOSE .EQ. 1 .AND. IRTFLG .EQ. 0)
d135 1
a135 1
           IF (N_VERBOSE .EQ. 1)WRITE(NOUT,*) 'DELETED: ',FILN(1:NLETA)
@


1.15
log
@removed SP_UNIX
@
text
@d129 1
a129 1
           OPEN(LUN,FILE=FILN,STATUS='OLD',IOSTAT=IER)
@


1.14
log
@resets maxim in stacks
@
text
@d153 1
a153 6
CCC UNUSED ------------------
CCCifdef SP_UNIX
CCC          TWO UNIX SPECIFIC CODE LINES FOLLOW
CCC          LINE = '\rm ' // FILNAM
CCC          CALL CSVMS(LINE,JSTAT)
CCCendif
@


1.13
log
@used opfil
@
text
@a25 1
CNO_SAVE
d37 1
a37 1
        LOGICAL        GOTIMAGE,ISDIGI
d84 4
a87 5
20      CONTINUE
        ILOC = INDEX(FILNAM,'@@')      
        GOTIMAGE = (FILNAM(1:1) .EQ. '_' .AND. 
     &             ILOC .LT. NLET .AND. 
     &             ISDIGI(FILNAM(ILOC+1:ILOC+1)))
d89 2
a90 2
        IF (ILOC .GT. 0 .AND. GOTIMAGE) THEN
C          DELETE IMAGE IN A PLAIN (NOT-INLINED) IMAGE STACK
d96 16
a111 4
           CALL REDHED(LUN,BUF,17000,NSAM,0,IRTFLG)
C          SET UNUSED FLAG FOR THIS STACKED IMAGE
           BUF(25) = 0.0
           CALL WRTHED(LUN,BUF,NSAM,IRTFLG)
d159 38
@


1.12
log
@added NOSTOP parameter to redhed call
@
text
@d93 5
a97 2
	   CALL OPENFB(BUF,FILNAM,LUN,NSAM,NROW,'O',NFT,NSLICE)
           IF (NFT .NE. 2)  RETURN
@


1.11
log
@added neederrt parameter to openinln call
@
text
@d95 1
a95 1
           CALL REDHED(LUN,BUF,17000,NSAM,IRTFLG)
@


1.10
log
@no longer used common commun
@
text
@d108 1
a108 1
           CALL OPENINLN(LUN,NUMBUF,.TRUE.,0,0,IRTFLG)
@


1.9
log
@rmoved C#ifdef
@
text
@d30 1
a31 3
        COMMON /COMMUN/FILN
 
        CHARACTER *(*) FILNAM
@


1.8
log
@added trap for _@@1 deletion
@
text
@d143 1
a143 1
CCC#ifdef SP_UNIX
d147 1
a147 1
CCC#endif
@


1.7
log
@added verbose check
@
text
@d40 2
d89 3
d93 2
a94 2
        IF (ILOC .GT. 0) THEN
C          DELETE IMAGE IN AN IMAGE STACK
@


1.6
log
@outputs filename now
@
text
@d96 2
a97 1
           WRITE(NOUT,*) 'DELETED STACKED IMAGE: ', FILNAM(1:NLET)
d107 1
a107 1
           IF (IRTFLG .EQ. 0)
d118 1
a118 1
           WRITE(NOUT,*) 'DELETED: ',FILN(1:NLETA)
@


1.5
log
@added code for inline stack of images deletion
@
text
@d96 1
a96 1
           WRITE(NOUT,*) 'DELETED IMAGE IN INLINE STACK: ',FILN(1:NLETA)
d101 1
a101 1
           CALL INLNBUF(FILNAM,NLETA,NUMBUF,IRTFLG)
d106 2
a107 1
           WRITE(NOUT,*) 'DELETED INLINE STACK: ',FILN(1:NLETA)
@


1.4
log
@set ier for deallocate return
@
text
@a86 6
        IF (FILNAM(1:1) .EQ. '_') THEN
C          INLINED BUFFER DELETE WANTED, GET BUFFER NUMBER
           CALL INLNBUF(FILNAM,NLETA,NUMBUF,IRTFLG)

C          FREE UP THE INLINE BUFFER (DEALLOCATES IF NECESSARY)
           CALL OPENINLN(LUN,NUMBUF,.TRUE.,0,0,IER)
d88 1
a88 1
        ELSE IF (ILOC .GT. 0) THEN
d96 11
d108 1
@


1.3
log
@stacks introduced
@
text
@d92 1
a92 1
           CALL OPENINLN(LUN,NUMBUF,.TRUE.,0,0,IRTFLG)
@


1.2
log
@added inline buffer stuff
@
text
@d14 1
a14 1
C    DELETF(CFUNC,FILNAM,LUN,DATEXC)
d16 1
a16 2
C    PARAMETERS:     CFUNC     OPERATION
C                    FILNAM    CHAR. VARIABLE FOR FILENAME
a17 1
C                    DATEXC    DATA EXTENSION
d19 1
a19 1
C    PURPOSE:        DELETE FILES
d23 1
a23 1
        SUBROUTINE DELETF(CFUNC,FILNAM,LUN,DATEXC)
d25 6
a30 1
        COMMON /UNITS/LUNC,NIN,NOUT,NECHO,IFOUND,NPROC,NDAT
d33 1
a33 2
        CHARACTER *(*) FILNAM,DATEXC,CFUNC
        CHARACTER *81  FILN
a38 2
        LOGICAL        ISDIGI

d47 1
a47 1
200     IF (CFUNC(4:4) .EQ. 'A') THEN
d49 1
a49 1
903        FORMAT(/,' WARNING, YOU ARE DELETING WHOLE FILE SERIES'/)
d84 1
d86 2
a87 1
        IF (FILN(1:1) .EQ. '_') THEN
d94 9
d110 1
a110 2
           WRITE(NOUT,901) FILN(1:NLETA)
901        FORMAT(' DELETED: ',A)
d114 1
a114 2
           WRITE(NOUT,900) FILN(1:NLETA)
900        FORMAT(' NO SUCH FILE: ',A)
d129 6
@


1.1
log
@Initial revision
@
text
@d3 1
a3 1
C $$ DELETF.FOR     REMOVED AND ALTERED CODE FROM UTIL1 DEC 88 al
d14 1
a14 1
C $$ DELETF(CFUNC,FILNAM,LUN,DATEXC)
d32 2
a33 2
        CHARACTER *7   PROMPT
        CHARACTER *6   PROMPTS
d37 1
d39 1
d42 2
a43 3
        DATA PROMPT /' DELETE'/
        DATA PROMPTS/' FIRST'/
        NULL=CHAR(0)
d45 1
a45 1
c        WRITE(6,*) ' IN DELETF'
d51 2
a52 1
           IF (FILNAM(1:1) .EQ. '*') RETURN
d56 1
a56 1
           DO 10 I=NLET,1,-1
d59 1
a59 1
10         CONTINUE
d72 1
a72 1
           IF (FILNAM(1:1) .EQ. '*') RETURN
d80 1
a80 1
        FILN = FILNAM(1:NLET) // '.' // DATEXC(1:3) // NULL
d83 14
a96 3
	NOFIND=0
20	OPEN(LUN,FILE=FILN,STATUS='OLD',IOSTAT=IER)
        IF (IER .EQ. 0) CLOSE(LUN,STATUS='DELETE',IOSTAT=IER)
d99 2
a100 2
           WRITE(NOUT,901) (FILN(II:II),II=1,NLETA)
901        FORMAT(' DELETED: ',80A1)
d104 2
a105 2
           WRITE(NOUT,900) (FILN(II:II),II=1,NLETA)
900        FORMAT(' NO SUCH FILE: ',80A1)
@
